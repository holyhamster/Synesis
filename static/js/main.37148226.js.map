{"version":3,"file":"static/js/main.37148226.js","mappings":"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","sources":["src/colors.ts","src/screens/materialButton.tsx","src/screens/synonyms/wordInputField.tsx","src/dictionaries/data/wordNormal.ts","src/dictionaries/data/synonymCloud.ts","src/screens/synonyms/colorChart/rectangle.ts","src/screens/synonyms/colorChart/gradient.ts","src/screens/synonyms/colorChart/colorNormal.ts","src/screens/synonyms/colorChart/animatedRectangle.tsx","src/screens/synonyms/colorChart/rectangleTransition.ts","src/screens/synonyms/colorChart/colorChart.tsx","src/useValueSynchronizer.ts","src/screens/synonyms/synonymWord.tsx","src/events.ts","src/dictionaries/storageHandling.ts","src/screens/synonyms/backgroundImage.tsx","src/screens/synonyms/synonymList.tsx","src/dictionaries/data/apiResponse.ts","src/dictionaries/dictionary.ts","src/dictionaries/datamuse.ts","src/dictionaries/meriam.ts","src/dictionaries/keyHandling.ts","src/dictionaries/bighugelabs.ts","src/dictionaries/dictionaryLoading.ts","src/screens/synonyms/wordListView.tsx","src/screens/synonyms/hintsView.tsx","src/screens/synonyms/hintOverlay.tsx","src/dictionaries/data/synonymCollection.ts","src/screens/titledToggle.tsx","src/screens/options/apiSwitch.tsx","src/screens/options/tileCountSwitch.tsx","src/screens/options/optionsScreen.tsx","src/screens/synonyms/synonymScreen.tsx","src/dictionaries/data/useSynonyms.ts","src/screens/inputModal.tsx","App.tsx","src/navigation.ts","webpack/bootstrap","webpack/runtime/chunk loaded","webpack/runtime/compat get default export","webpack/runtime/create fake namespace object","webpack/runtime/define property getters","webpack/runtime/global","webpack/runtime/hasOwnProperty shorthand","webpack/runtime/make namespace object","webpack/runtime/node module decorator","webpack/runtime/publicPath","webpack/runtime/jsonp chunk loading","webpack/startup"],"sourcesContent":["export function getRandomColor(): string {\r\n  return colors[Math.floor(Math.random() * colors.length)];\r\n}\r\n\r\nfunction getFreeColor(takenColors: string[]): string {\r\n  const set = new Set(colors);\r\n  for (const color of takenColors) set.delete(color);\r\n\r\n  return set.size == 0\r\n    ? getRandomColor()\r\n    : Array.from(set)[Math.floor(Math.random() * set.size)];\r\n}\r\n\r\nexport function RebuildColorMap<T>(oldMap: Map<T, string>, keys: T[]) {\r\n  const takenColors = new Set<string>();\r\n  oldMap.forEach((color, key) => {\r\n    if (keys.includes(key)) takenColors.add(color);\r\n  });\r\n\r\n  const newColormap = new Map<T, string>();\r\n  keys.forEach((key) => {\r\n    const color = oldMap.get(key) || getFreeColor(Array.from(takenColors));\r\n    newColormap.set(key, color);\r\n    takenColors.add(color);\r\n  });\r\n  return newColormap;\r\n}\r\n\r\nconst colors = [\r\n  \"#B66DFF\",\r\n  \"#FF2A95\",\r\n  \"#FFB6DB\",\r\n  \"#4673FF\",\r\n  \"#00A6A6\",\r\n  \"#8CCAFF\",\r\n  \"#FB6E6E\",\r\n  \"#FFB488\",\r\n  \"#24FF24\",\r\n];\r\nexport const DisabledGrey: string = \"#7A7B7A\";\r\nexport const BGWhite: string = \"#FFFFFF\";\r\nexport const AccentColor: string = \"#eac8f7\";\r\nexport const CountourColor: string = \"#000000\";\r\n","import React, { FC } from \"react\";\r\nimport { StyleSheet, TouchableOpacity } from \"react-native\";\r\nimport { MaterialIcons } from \"@expo/vector-icons\";\r\n\r\ninterface MaterialButtonStyle {\r\n  backgroundColor?: string;\r\n  countourColor?: string;\r\n  disabledCountourColor?: string;\r\n  size?: number;\r\n  opacity?: number;\r\n}\r\n\r\ninterface MaterialButtonProps {\r\n  style?: MaterialButtonStyle;\r\n  disabled?: boolean;\r\n  name: keyof typeof MaterialIcons.glyphMap;\r\n  onPress: () => void;\r\n}\r\nconst MaterialButton: FC<MaterialButtonProps> = ({\r\n  disabled,\r\n  style,\r\n  name,\r\n  onPress,\r\n}) => {\r\n  const bgColor = style?.backgroundColor || defaultBackground;\r\n  const counterColor = disabled\r\n    ? style?.disabledCountourColor || defaultDisabled\r\n    : style?.countourColor || defaultCountour;\r\n  return (\r\n    <TouchableOpacity\r\n      style={{\r\n        ...styles.inputButton,\r\n        backgroundColor: bgColor,\r\n        borderColor: counterColor,\r\n      }}\r\n      onPress={onPress}\r\n      disabled={disabled}\r\n    >\r\n      <MaterialIcons\r\n        name={name}\r\n        size={style?.size || defaultSize}\r\n        color={counterColor}\r\n      />\r\n    </TouchableOpacity>\r\n  );\r\n};\r\n\r\nconst defaultCountour = \"black\";\r\nconst defaultBackground = \"white\";\r\nconst defaultDisabled = \"darkgrey\";\r\nconst defaultSize = 40;\r\n\r\nconst styles = StyleSheet.create({\r\n  inputButton: {\r\n    alignItems: \"center\",\r\n    borderWidth: 2,\r\n    borderRadius: 15,\r\n    marginHorizontal: 5,\r\n  },\r\n});\r\n\r\nexport default MaterialButton;\r\n","import React, { FC } from \"react\";\r\nimport { TextInput, StyleSheet, View } from \"react-native\";\r\nimport { BGWhite, CountourColor, DisabledGrey } from \"../../colors\";\r\nimport MaterialButton from \"../materialButton\";\r\n\r\ninterface WordInputProps {\r\n  onAddWord: (word: string) => void;\r\n}\r\n\r\nconst WordInputField: FC<WordInputProps> = ({ onAddWord }) => {\r\n  const [inputText, setInputText] = React.useState<string>(\"\");\r\n\r\n  const onSubmitEditing = (newText: string) => {\r\n    onAddWord(newText);\r\n    setInputText(\"\");\r\n  };\r\n  const inputButtonDisabled = inputText === \"\";\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.inputHolder}>\r\n        <TextInput\r\n          style={styles.inputText}\r\n          autoFocus={true}\r\n          blurOnSubmit={true}\r\n          value={inputText}\r\n          onChangeText={(text) => {\r\n            setInputText(text);\r\n          }}\r\n          onSubmitEditing={(event) => {\r\n            const newText = event.nativeEvent.text;\r\n            if (newText) onSubmitEditing(newText);\r\n          }}\r\n        />\r\n      </View>\r\n\r\n      <MaterialButton\r\n        disabled={inputButtonDisabled}\r\n        name=\"add\"\r\n        onPress={() => onSubmitEditing(inputText)}\r\n        style={{\r\n          backgroundColor: BGWhite,\r\n          disabledCountourColor: DisabledGrey,\r\n          countourColor: CountourColor,\r\n        }}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    flexDirection: \"row\",\r\n  },\r\n  inputHolder: {\r\n    flex: 5,\r\n    borderWidth: 2,\r\n    borderRadius: 15,\r\n    marginHorizontal: 5,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    backgroundColor: BGWhite,\r\n  },\r\n  inputText: {\r\n    fontSize: 20,\r\n    width: \"90%\",\r\n    textAlign: \"center\",\r\n  },\r\n});\r\n\r\nexport default WordInputField;\r\n","//normal vector of synonyms for a word\r\n// [{word:\"vague\", value:.5}, {word:\"undefined\", value:.3}, {word:\"inaccurate\", value: .2}]\r\nexport default class WordNormal extends Array<{ word: string; value: number }> {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  public static Build(connections: Map<string, number[]>, sum: number[]) {\r\n    const normal = new WordNormal();\r\n    const connectionWeights = CalculateWeights(sum);\r\n\r\n    for (const [word, mentions] of connections) {\r\n      let val = 0;\r\n      for (let i = 0; i < mentions.length; i++)\r\n        val += connectionWeights[i] * mentions[i] || 0;\r\n\r\n      normal.push({\r\n        word: word,\r\n        value: parseFloat(val.toFixed(5)),\r\n      });\r\n    }\r\n\r\n    return normal;\r\n  }\r\n\r\n  public static Copy(copy: WordNormal) {\r\n    return [...copy];\r\n  }\r\n}\r\n\r\n//determines a weight of every dimension of the array for a total amount to be 1\r\n//every next dimension takes a space less than a single unit of the previous one\r\n//[1, 1, 1] => [0.65, 0.25, 0.1]\r\nexport function CalculateWeights(quantities: number[]) {\r\n  const weights: number[] = [];\r\n  const orderWeightIncrease = 0.3;\r\n  let unitWeight = 1;\r\n  let totalWeight = 0;\r\n  for (let i = quantities.length - 1; i >= 0; i--) {\r\n    const currentQ = quantities[i];\r\n    weights[i] = currentQ ? unitWeight : 0;\r\n    if (!currentQ) continue;\r\n\r\n    const columnWeight = unitWeight * currentQ;\r\n    totalWeight += columnWeight;\r\n    unitWeight = Math.ceil(columnWeight * (1 + orderWeightIncrease));\r\n  }\r\n\r\n  return weights.map((val) => (totalWeight ? val / totalWeight : 0));\r\n}\r\n","import SynonymCollection from \"./synonymCollection\";\r\nimport WordNormal, { CalculateWeights } from \"./wordNormal\";\r\n\r\n//Synonym word crossreferences with other words\r\nexport default class SynonymCloud {\r\n  connections = new Map<string, number[]>();\r\n  connectionSum = []; //calculated in parallel for performance\r\n  public constructor(public name: string) {}\r\n\r\n  public addConnection(word: string, order: number) {\r\n    this.nullCache();\r\n    const existingDimensions = this.connections.get(word) || [];\r\n    if (existingDimensions.length == 0)\r\n      this.connections.set(word, existingDimensions);\r\n    existingDimensions[order] = (existingDimensions[order] || 0) + 1;\r\n    while (this.connectionSum.length <= order) this.connectionSum.push(0);\r\n    this.connectionSum[order] += 1;\r\n  }\r\n\r\n  private nullCache() {\r\n    this.normalCache = undefined;\r\n    this.wordMapCache = undefined;\r\n  }\r\n\r\n  //gets a map of a normalized n-dimensional vector of connections [\"word1\": 0.25, \"word2\": 0.5, \"word3\": 0.25]\r\n  private normalCache: WordNormal;\r\n  public GetWordNormal() {\r\n    if (!this.normalCache)\r\n      this.normalCache = WordNormal.Build(this.connections, this.connectionSum);\r\n    return WordNormal.Copy(this.normalCache);\r\n  }\r\n\r\n  //translates word normal into a map\r\n  private wordMapCache;\r\n  public GetWordMap() {\r\n    if (!this.wordMapCache) {\r\n      this.wordMapCache = new Map();\r\n      this.GetWordNormal().forEach(({ word, value }) =>\r\n        this.wordMapCache.set(word, value)\r\n      );\r\n    }\r\n    return this.wordMapCache;\r\n  }\r\n\r\n  public static GetSorted(clouds: SynonymCloud[], word: string) {\r\n    const result = Array.from(clouds);\r\n    if (!word || word == \"\") return result;\r\n    result.sort(\r\n      (a, b) =>\r\n        (a.GetWordMap().get(word) || 0) - (b.GetWordMap().get(word) || 0)\r\n    );\r\n    return result;\r\n  }\r\n}\r\n\r\n//build clouds of synonyms from given collections\r\nexport function CrossReference(collections: SynonymCollection[]) {\r\n  const allKeywords = collections.map(\r\n    (synonymCollection) => synonymCollection.Word\r\n  );\r\n\r\n  const map = new Map<string, SynonymCloud>();\r\n\r\n  const getCloud = (word) => {\r\n    let cloud = map.get(word);\r\n    if (!cloud) {\r\n      cloud = new SynonymCloud(word);\r\n      map.set(word, cloud);\r\n    }\r\n    return cloud;\r\n  };\r\n\r\n  const addConnectionToSet = (\r\n    set: Set<string>,\r\n    keyWord: string,\r\n    order: number\r\n  ) => {\r\n    for (const setWord of set) {\r\n      if (!allKeywords.includes(setWord))\r\n        getCloud(setWord).addConnection(keyWord, order);\r\n    }\r\n  };\r\n\r\n  for (const collection of collections)\r\n    for (const definition of collection.definitionSets)\r\n      for (const synonymSet of definition)\r\n        for (const word of synonymSet) {\r\n          //if found a word from main list\r\n          if (allKeywords.includes(word)) {\r\n            //go through synonym list, add 1st degree connection\r\n            addConnectionToSet(synonymSet, word, 1);\r\n\r\n            for (const synonymList2 of definition) {\r\n              if (synonymList2 !== synonymSet)\r\n                addConnectionToSet(synonymList2, word, 2);\r\n            }\r\n          } else getCloud(word).addConnection(collection.Word, 0);\r\n        }\r\n\r\n  return Array.from(map.values());\r\n}\r\n","export default class Rectangle {\r\n  constructor(\r\n    public left: number,\r\n    public bottom: number,\r\n    public width: number,\r\n    public height: number,\r\n    public color: string\r\n  ) {}\r\n\r\n  static Zero() {\r\n    return { left: 0, bottom: 0, width: 0, height: 0, color: \"white\" };\r\n  }\r\n}\r\n\r\nexport function RectToString(rect: Rectangle, fixedDecimals = 10) {\r\n  return `L: ${rect.left.toFixed(fixedDecimals)} B: ${rect.bottom.toFixed(\r\n    fixedDecimals\r\n  )} W: ${rect.width} H:${rect.height} C:${rect.color}`;\r\n}\r\n\r\nexport function LerpRectangles(\r\n  progress: number,\r\n  rect1: Rectangle,\r\n  rect2: Rectangle\r\n) {\r\n  return new Rectangle(\r\n    Lerp(progress, rect1.left, rect2.left),\r\n    Lerp(progress, rect1.bottom, rect2.bottom),\r\n    Lerp(progress, rect1.width, rect2.width),\r\n    Lerp(progress, rect1.height, rect2.height),\r\n    rect2.color\r\n  );\r\n}\r\n\r\nfunction Lerp(progress: number, start: number, end: number) {\r\n  return (1 - progress) * start + progress * end;\r\n}\r\n\r\n//matches arrays of rectangles index to index by color, by inserting new 0-width rectangles when colors differ\r\nexport function AlignRectangles(\r\n  start: Rectangle[],\r\n  end: Rectangle[]\r\n): [startRects: Rectangle[], endRects: Rectangle[]] {\r\n  start = Array.from(start);\r\n  end = Array.from(end);\r\n  let startLength = start.length;\r\n  let endLength = end.length;\r\n  const defHeight = start[0]?.height || end[0]?.height || 0;\r\n\r\n  for (let i = 0; i < Math.max(startLength, endLength); i += 1) {\r\n    if (start[i]?.color === end[i]?.color) continue;\r\n    //find matching colors for a transition\r\n    if (startLength <= i || start[i]?.color == end[i + 1]?.color) {\r\n      spliceRect(start, i, defHeight, end[i].color);\r\n      startLength += 1;\r\n    } else if (endLength <= i || end[i]?.color == start[i + 1]?.color) {\r\n      spliceRect(end, i, defHeight, start[i].color);\r\n      endLength += 1;\r\n    }\r\n    //didn't find matches, insert new colors into each array set\r\n    else {\r\n      spliceRect(start, i, defHeight, end[i].color);\r\n      spliceRect(end, i + 1, defHeight, start[i + 1].color);\r\n      startLength += 1;\r\n      endLength += 1;\r\n    }\r\n  }\r\n  return [start, end];\r\n}\r\n\r\n//insert a width-0 rectangle of color\r\nexport function spliceRect(\r\n  rects: Rectangle[],\r\n  index: number,\r\n  height: number,\r\n  color: string\r\n) {\r\n  const prevRect = rects[index - 1];\r\n  const left = prevRect ? prevRect.left + prevRect.width : 0;\r\n  rects.splice(index, 0, {\r\n    left: left,\r\n    width: 0,\r\n    height: height,\r\n    bottom: 0,\r\n    color: color,\r\n  });\r\n}\r\n","import Rectangle from \"./rectangle\";\r\n\r\ntype colorSection = { color: string; start: number; width: number };\r\ntype rectSize = { height: number; width: number };\r\n\r\n//[{color:\"red\", start:0, end: .5}, {color:\"blue\", start: .5, end: 1}]\r\nexport default class Gradient extends Array<colorSection> {\r\n  constructor(...items: colorSection[]) {\r\n    super(...(items ?? []));\r\n  }\r\n\r\n  ToRectangle(size: rectSize): Rectangle[] {\r\n    return this.map(\r\n      (colorSection) =>\r\n        new Rectangle(\r\n          colorSection.start * size.width,\r\n          0,\r\n          colorSection.width * size.width,\r\n          size.height,\r\n          colorSection.color\r\n        )\r\n    );\r\n  }\r\n}\r\n","import WordNormal from \"../../../dictionaries/data/wordNormal\";\r\nimport Gradient from \"./gradient\";\r\n\r\n// normal vector with colors as axis\r\n// [{color:\"red\", value:.5}, {color:\"blue\", value:.5}]\r\nexport default class ColorNormal extends Array<{\r\n  color: string;\r\n  value: number;\r\n}> {\r\n  public IsValid = false;\r\n  constructor(wordNormal: WordNormal, colorMap: Map<string, string>) {\r\n    let validated = wordNormal.length > 0 && colorMap.size > 0;\r\n\r\n    const array = wordNormal.map((val) => {\r\n      const wordColor = colorMap.get(val.word);\r\n      if (!wordColor) validated = false;\r\n      return { color: wordColor, value: val.value };\r\n    });\r\n\r\n    super(...array);\r\n    this.IsValid = validated;\r\n  }\r\n\r\n  isEqualTo(normal: ColorNormal) {\r\n    const ln = this.length;\r\n    if (ln != normal.length) return false;\r\n    for (let i = 0; i < ln; i++) {\r\n      if (this[i].color != normal[i].color || this[i].value != normal[i].value)\r\n        return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  //translates ColorNormal into a gradient for GradientRect component\r\n  //[{color:\"red\", value: 0.5}, {color:\"blue\", value: 0.5}] => [{color:\"red\", start: 0, width: 0.5}, {color:\"blue\", start:0.5, width: 0.5}]\r\n  ToGradient() {\r\n    const sections = [];\r\n    let start = 0;\r\n    this.forEach((pair) => {\r\n      sections.push({ color: pair.color, start: start, width: pair.value });\r\n      start += pair.value;\r\n    });\r\n    return new Gradient(...sections);\r\n  }\r\n\r\n  getDominantColor() {\r\n    let backgroundColorValue = 0;\r\n    let ibackground: string = undefined;\r\n\r\n    this.forEach((pair) => {\r\n      if (pair.value > backgroundColorValue) {\r\n        ibackground = pair.color;\r\n        backgroundColorValue = pair.value;\r\n      }\r\n    });\r\n    return ibackground;\r\n  }\r\n}\r\n","import React, { FC, useEffect, useMemo } from \"react\";\r\nimport Animated, {\r\n  SharedValue,\r\n  useAnimatedStyle,\r\n  useSharedValue,\r\n} from \"react-native-reanimated\";\r\nimport { ViewProps, ViewStyle } from \"react-native\";\r\nimport { RectangleTransition } from \"./rectangleTransition\";\r\n\r\ninterface RectProps {\r\n  transition: RectangleTransition;\r\n  dataKey: string;\r\n  animationProgress: SharedValue<number>;\r\n  style?: ViewProps;\r\n  debugMessages?: boolean;\r\n  registerTransitionUpdates?: (\r\n    id: string,\r\n    val: (RectangleTransition) => void\r\n  ) => void;\r\n}\r\n\r\n//View rectangle animated to change its size from start to finish according to progressValue\r\nconst AnimatedRect: FC<RectProps> = ({\r\n  animationProgress,\r\n  transition,\r\n  style,\r\n  dataKey,\r\n  registerTransitionUpdates,\r\n}) => {\r\n  const transitionRef = useSharedValue<RectangleTransition>(transition);\r\n\r\n  useEffect(() => {\r\n    const updateTransition = (newTransition: RectangleTransition) =>\r\n      (transitionRef.value = newTransition);\r\n    registerTransitionUpdates?.(dataKey, updateTransition);\r\n  }, [dataKey, registerTransitionUpdates]);\r\n\r\n  const staticStyle: Animated.AnimateStyle<ViewStyle> = useMemo(\r\n    () => ({\r\n      position: \"absolute\",\r\n      ...style,\r\n    }),\r\n    [style]\r\n  );\r\n\r\n  //runs on the UI threat every time animation value changes\r\n  const animatedStyle =\r\n    useAnimatedStyle((): Animated.AnimateStyle<ViewStyle> => {\r\n      const { start, end } = transitionRef.value;\r\n      const { value } = animationProgress;\r\n      return {\r\n        ...staticStyle,\r\n        left: lerpWorklet(value, start.left, end.left),\r\n        bottom: lerpWorklet(value, start.bottom, end.bottom),\r\n        width: lerpWorklet(value, start.width, end.width),\r\n        height: lerpWorklet(value, start.height, end.height),\r\n        backgroundColor: end.color,\r\n      };\r\n    }, [animationProgress]);\r\n\r\n  return <Animated.View style={animatedStyle} />;\r\n};\r\n\r\n//interpolates arrays of values on a UI thread\r\nfunction lerpWorklet(progress: number, start: number, end: number) {\r\n  \"worklet\";\r\n  return (1 - progress) * start + progress * end;\r\n}\r\n\r\nexport default AnimatedRect;\r\n","import Rectangle from \"./rectangle\";\r\n\r\nexport type RectangleTransition = { start: Rectangle; end: Rectangle };\r\n\r\n//Gives rectangle a unique identifier based on its color\r\nexport function GetTransitionsKeys(rects: RectangleTransition[]) {\r\n  const result = new Map<string, RectangleTransition>();\r\n  const colors = new Map<string, number>();\r\n  rects.forEach((rect) => {\r\n    const color = rect.end.color;\r\n    const colorCount = 1 + (colors.get(color) ?? 0);\r\n    colors.set(color, colorCount);\r\n    result.set(color + colorCount, rect);\r\n  });\r\n  return result;\r\n}\r\n","import React, { FC, useCallback, useEffect } from \"react\";\r\nimport { StyleSheet, View, ViewStyle } from \"react-native\";\r\nimport { useSharedValue, withTiming } from \"react-native-reanimated\";\r\n\r\nimport ColorNormal from \"./colorNormal\";\r\nimport AnimatedRect from \"./animatedRectangle\";\r\nimport {\r\n  AlignRectangles as AlignRectangles,\r\n  LerpRectangles as LerpRectangles,\r\n} from \"./rectangle\";\r\nimport { GetTransitionsKeys, RectangleTransition } from \"./rectangleTransition\";\r\nimport { useValueSynchronizer } from \"../../../useValueSynchronizer\";\r\n\r\ninterface ColorChartProps {\r\n  colorNormal: ColorNormal;\r\n  animationLength?: number;\r\n  size: { height: number; width: number };\r\n  style?: ViewStyle;\r\n}\r\n\r\n//Takes in a ColorNormal, draws a rectangle chart with sharp gradients according to it\r\n//if passed a new ColorNormal, will animate transition to it\r\nconst ColorChart: FC<ColorChartProps> = ({\r\n  colorNormal,\r\n  animationLength,\r\n  size,\r\n  style,\r\n}) => {\r\n  const {\r\n    registerSetter,\r\n    keys,\r\n    setArray: setTransitions,\r\n    array: transitions,\r\n  } = useValueSynchronizer<RectangleTransition>(GetTransitionsKeys);\r\n\r\n  const animationProgress = useSharedValue(1);\r\n  const restartAnimation = useCallback(() => {\r\n    const duration = isNaN(animationLength)\r\n      ? DEFAULT_ANIMATION_LENGTH\r\n      : animationLength;\r\n    animationProgress.value = 0;\r\n    animationProgress.value = withTiming(1, {\r\n      duration: duration,\r\n    });\r\n  }, [animationLength]);\r\n\r\n  //calculate starting and ending rectangles when normal changes\r\n  useEffect(() => {\r\n    if (!colorNormal?.IsValid) return;\r\n    //get current rectangles according to animation progress\r\n    const currentRects = transitions\r\n      .map(({ start, end }) =>\r\n        LerpRectangles(animationProgress.value, start, end)\r\n      )\r\n      .filter((rect) => rect.width != 0);\r\n\r\n    //calculate new start and end between current\r\n    const normalRectangles = colorNormal.ToGradient().ToRectangle(size);\r\n    const [newStart, newTarget] = AlignRectangles(\r\n      currentRects,\r\n      normalRectangles\r\n    );\r\n\r\n    const newRects = newStart.map((_, index) => ({\r\n      start: newStart[index],\r\n      end: newTarget[index],\r\n    }));\r\n\r\n    setTransitions((previous: RectangleTransition[]) => {\r\n      if (previous.length) restartAnimation();\r\n      return newRects;\r\n    });\r\n  }, [colorNormal, size, setTransitions]);\r\n\r\n  return (\r\n    <View style={[styles.view, style]}>\r\n      {Array.from(keys.keys()).map((id) => (\r\n        <AnimatedRect\r\n          transition={keys.get(id)}\r\n          dataKey={id}\r\n          key={id}\r\n          animationProgress={animationProgress}\r\n          registerTransitionUpdates={registerSetter}\r\n        />\r\n      ))}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  view: {\r\n    flexDirection: \"row\",\r\n    position: \"absolute\",\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n});\r\n\r\nconst DEFAULT_ANIMATION_LENGTH = 1000;\r\n\r\nexport default ColorChart;\r\n","import React from \"react\";\r\n\r\n//maintains an array of values\r\n//sends new assigned values to all registered for live updates\r\nexport function useValueSynchronizer<T>(\r\n  keyExtractor: (array: T[]) => Map<string, T>\r\n) {\r\n  const [values, setValues] = React.useState<T[]>([]);\r\n\r\n  //used to identify setters in an array\r\n  const [keys, setKeys] = React.useState(keyExtractor(values));\r\n\r\n  //setters are stored along their keys and called when the value is changed\r\n  type Setter = (val: T) => void;\r\n\r\n  const setters = React.useRef(new Map<string, Setter>());\r\n\r\n  removeUnusedSetters(setters, keys);\r\n\r\n  const registerSetter = React.useCallback((key: string, setter: Setter) => {\r\n    setters.current.set(key, setter);\r\n  }, []);\r\n\r\n  //sets the value to state, calls all setters with the new value\r\n  const setArray = React.useCallback(\r\n    (arrayOrCallback: T[] | ((previous) => T[])) => {\r\n      setValues((previous: T[]) => {\r\n        const array =\r\n          typeof arrayOrCallback == \"function\"\r\n            ? arrayOrCallback(previous)\r\n            : arrayOrCallback;\r\n        const newKeys = keyExtractor(array);\r\n        newKeys.forEach((value, key) => setters.current.get(key)?.(value));\r\n        setKeys(newKeys);\r\n        return array;\r\n      });\r\n    },\r\n    [setValues, setKeys, keyExtractor]\r\n  );\r\n\r\n  return { array: values, setArray, registerSetter, keys };\r\n}\r\n\r\nfunction removeUnusedSetters(setters, keys) {\r\n  setters.current.forEach((_, key) => {\r\n    if (!keys.has(key)) setters.current.delete(key);\r\n  });\r\n}\r\n","import React, { FC, memo, useState, useMemo } from \"react\";\r\nimport {\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  ViewStyle,\r\n  TextStyle,\r\n  Pressable,\r\n  Platform,\r\n  Animated,\r\n} from \"react-native\";\r\n\r\nimport ColorNormal from \"./colorChart/colorNormal\";\r\nimport ColorChart from \"./colorChart/colorChart\";\r\nimport * as Colors from \"../../colors\";\r\n\r\ninterface SynonymWordProps {\r\n  word: string;\r\n  colorNormal: ColorNormal;\r\n  onPress: (word: string) => void;\r\n  onLongPress: (word: string) => void;\r\n  style?: ViewStyle;\r\n}\r\n\r\n//pressable tile with a word and a color gradient of given color normal\r\nconst SynonymWord: FC<SynonymWordProps> = memo(\r\n  ({ colorNormal, word, onPress, onLongPress, style: propStyle }) => {\r\n    const [layoutSize, setLayoutSize] = useState<{\r\n      height: number;\r\n      width: number;\r\n    }>({\r\n      height: 0,\r\n      width: 0,\r\n    });\r\n\r\n    const styles = useMemo(() => {\r\n      const { zIndex = 0 } = propStyle ?? {};\r\n      return StyleSheet.create<SynonymWordStyles>({\r\n        chart: { zIndex: zIndex + 1 },\r\n        container: {\r\n          ...propStyle,\r\n          backgroundColor: colorNormal?.getDominantColor() ?? \"white\",\r\n        },\r\n        word: {\r\n          margin: 5,\r\n          marginHorizontal: 10,\r\n          fontSize: 20,\r\n          zIndex: zIndex + 2,\r\n        },\r\n      });\r\n    }, [propStyle]);\r\n\r\n    const onLayout = ({ nativeEvent }) => {\r\n      setLayoutSize({\r\n        height: nativeEvent.layout.height,\r\n        width: nativeEvent.layout.width,\r\n      });\r\n    };\r\n\r\n    // use effect hook to run the animation when the component mounts and unmounts\r\n    const viewOpacity = React.useRef(new Animated.Value(0)).current;\r\n    React.useEffect(() => {\r\n      // fade in the component when it mounts\r\n      Animated.timing(viewOpacity, {\r\n        toValue: 1,\r\n        duration: 500,\r\n        useNativeDriver: true,\r\n      }).start();\r\n    }, []);\r\n\r\n    return (\r\n      <Animated.View style={{ opacity: viewOpacity }}>\r\n        <Pressable\r\n          android_ripple={{\r\n            color: Colors.BGWhite,\r\n            foreground: true,\r\n          }}\r\n          onPress={() => onPress(word)}\r\n          onLongPress={() => {\r\n            onLongPress(word);\r\n          }}\r\n          style={({ pressed }) => ({\r\n            opacity: Platform.OS != \"android\" && pressed ? 0.6 : 1,\r\n          })}\r\n        >\r\n          <View\r\n            style={styles.container}\r\n            onLayout={layoutSize.width == 0 ? onLayout : undefined}\r\n          >\r\n            {layoutSize.width != 0 && (\r\n              <ColorChart\r\n                colorNormal={colorNormal}\r\n                style={styles.chart}\r\n                size={layoutSize}\r\n              />\r\n            )}\r\n            <Text style={styles.word}>{word}</Text>\r\n          </View>\r\n        </Pressable>\r\n      </Animated.View>\r\n    );\r\n  }\r\n);\r\n\r\ninterface SynonymWordStyles {\r\n  chart: ViewStyle;\r\n  container: ViewStyle;\r\n  word: TextStyle;\r\n}\r\n\r\nexport default SynonymWord;\r\n","//events run by DeviceEventEmitter\r\nexport enum EventsEnum {\r\n  ApiKeyEntered = \"api-key-entered\",\r\n  ApiChanged = \"api-changed\",\r\n  LayoutChanged = \"layout-changed\",\r\n  TileCountChanged = \"tile-count-changed\",\r\n  HintsReset = \"hints-reset\",\r\n}\r\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\r\n\r\nexport default class Storage {\r\n  static async GetString(storageString: string) {\r\n    return AsyncStorage.getItem(storageString);\r\n  }\r\n\r\n  static async SetString(storageString: string, value: string) {\r\n    return AsyncStorage.setItem(storageString, value);\r\n  }\r\n}\r\n\r\nexport enum StringTypesEnum {\r\n  WasLaunched = \"WasLaunched\",\r\n  DisabledVisualts = \"DisabledVisuals\",\r\n  TileLayout = \"TileLayout\",\r\n  TileCount = \"TileCount\",\r\n}\r\n","import React, { FC } from \"react\";\r\nimport {\r\n  Animated,\r\n  ImageBackground,\r\n  ImageSourcePropType,\r\n  StyleSheet,\r\n  ViewStyle,\r\n} from \"react-native\";\r\n\r\ninterface BackgroundImageProps {\r\n  style?: ViewStyle;\r\n  faded: boolean;\r\n  source: ImageSourcePropType;\r\n  fadeCeiling?: number;\r\n  fadeFloor?: number;\r\n  duration?: number;\r\n}\r\n\r\n//background image with animated opacity\r\nconst BackgroundImage: FC<BackgroundImageProps> = ({\r\n  style,\r\n  faded,\r\n  source,\r\n  fadeFloor,\r\n  fadeCeiling,\r\n  duration,\r\n}) => {\r\n  fadeFloor = isNaN(fadeFloor) ? defaultFadeFloor : fadeFloor;\r\n  fadeCeiling = isNaN(fadeCeiling) ? defaultFadeCeiling : fadeCeiling;\r\n  duration = isNaN(duration) ? defaultDuration : duration;\r\n\r\n  const animatiedOpacity = React.useState(new Animated.Value(fadeCeiling))[0];\r\n  React.useEffect(() => {\r\n    Animated.timing(animatiedOpacity, {\r\n      toValue: faded ? fadeFloor : fadeCeiling,\r\n      duration: duration,\r\n      useNativeDriver: true,\r\n    }).start();\r\n  }, [faded]);\r\n\r\n  return (\r\n    <Animated.View\r\n      style={{ ...style, ...styles.view, opacity: animatiedOpacity }}\r\n    >\r\n      <ImageBackground\r\n        source={source}\r\n        resizeMode=\"center\"\r\n        style={styles.imageBackground}\r\n      ></ImageBackground>\r\n    </Animated.View>\r\n  );\r\n};\r\n\r\nconst defaultFadeCeiling = 0.85;\r\nconst defaultFadeFloor = 0.4;\r\nconst defaultDuration = 1000;\r\n\r\nconst styles = StyleSheet.create({\r\n  view: {\r\n    position: \"absolute\",\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n  imageBackground: { width: \"100%\", height: \"100%\" },\r\n});\r\n\r\nexport default BackgroundImage;\r\n","import React, { FC, useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  DeviceEventEmitter,\r\n  Platform,\r\n  ScrollView,\r\n  StyleSheet,\r\n  View,\r\n  ViewStyle,\r\n} from \"react-native\";\r\nimport {\r\n  Transition,\r\n  Transitioning,\r\n  TransitioningView,\r\n} from \"react-native-reanimated\";\r\nimport SynonymCloud, {\r\n  CrossReference,\r\n} from \"../../dictionaries/data/synonymCloud\";\r\nimport ColorNormal from \"./colorChart/colorNormal\";\r\nimport SynonymWord from \"./synonymWord\";\r\nimport SynonymCollection from \"../../dictionaries/data/synonymCollection\";\r\nimport { EventsEnum } from \"../../events\";\r\nimport Storage, { StringTypesEnum } from \"../../dictionaries/storageHandling\";\r\nimport BackgroundImage from \"./backgroundImage\";\r\n\r\ninterface SynonymListProps {\r\n  synonyms: SynonymCollection[];\r\n  colorMap: Map<string, string>;\r\n  wordToSortBy?: string;\r\n  addNewWord: (newWord: string) => void;\r\n  addAndHiglight: (newWord: string) => void;\r\n  showTooltip?: (text: string) => void;\r\n  style?: ViewStyle;\r\n}\r\n//Builds clouds of words from synonyms and displays them in a ScrollList\r\nconst SynonymList: FC<SynonymListProps> = ({\r\n  synonyms,\r\n  colorMap,\r\n  wordToSortBy,\r\n  addNewWord,\r\n  addAndHiglight,\r\n  showTooltip,\r\n  style,\r\n}) => {\r\n  //layout transition for tile movement (only on android)\r\n  const transitionViewRef = useRef<TransitioningView>();\r\n  const animateTransition = () => {\r\n    if (Platform.OS == \"android\")\r\n      transitionViewRef.current?.animateNextTransition();\r\n  };\r\n\r\n  //process synonyms into word clouds\r\n  const [clouds, setClouds] = useState<SynonymCloud[]>([]);\r\n  useEffect(() => {\r\n    const newClouds = SynonymCloud.GetSorted(\r\n      CrossReference(synonyms),\r\n      wordToSortBy\r\n    );\r\n    setClouds(newClouds);\r\n    animateTransition();\r\n  }, [synonyms, setClouds]);\r\n\r\n  useEffect(() => {\r\n    setClouds((previous) => SynonymCloud.GetSorted(previous, wordToSortBy));\r\n  }, [wordToSortBy]);\r\n\r\n  //build color normals for clouds\r\n  const [colorNormals, setColorNormals] = useState(\r\n    new Map<string, ColorNormal>()\r\n  );\r\n  useEffect(\r\n    () =>\r\n      setColorNormals((previous) => rebuildNormals(clouds, colorMap, previous)),\r\n    [clouds, colorMap]\r\n  );\r\n\r\n  //get tileLimit value out of memory\r\n  const [tileLimit, setTileLimit] = useState(DEFAULT_TILE_LIMIT);\r\n  useEffect(() => {\r\n    const loadTilelimit = () => {\r\n      Storage.GetString(StringTypesEnum.TileCount).then((value) =>\r\n        setTileLimit(parseInt(value) ?? DEFAULT_TILE_LIMIT)\r\n      );\r\n    };\r\n    loadTilelimit();\r\n    const subscription = DeviceEventEmitter.addListener(\r\n      EventsEnum.TileCountChanged,\r\n      loadTilelimit\r\n    );\r\n    return () => subscription.remove();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const hiddenCount = Math.max(clouds.length - tileLimit, 0);\r\n    const toolTipText = hiddenCount == 0 ? \"\" : `Hidden: ${hiddenCount}`;\r\n    showTooltip?.(toolTipText);\r\n  }, [showTooltip, tileLimit, clouds]);\r\n\r\n  const zIndex = style?.zIndex ?? 0;\r\n\r\n  const cloudComponents = clouds\r\n    .slice(-tileLimit)\r\n    .map(({ name }) => (\r\n      <SynonymWord\r\n        key={name}\r\n        word={name}\r\n        colorNormal={colorNormals.get(name)}\r\n        onPress={addNewWord}\r\n        onLongPress={addAndHiglight}\r\n        style={{ zIndex: zIndex + 1 }}\r\n      />\r\n    ));\r\n\r\n  return (\r\n    <View style={{ flex: 1 }}>\r\n      <BackgroundImage\r\n        source={require(\"../../../assets/icon.png\")}\r\n        faded={clouds.length > 0}\r\n      />\r\n      <ScrollView\r\n        keyboardShouldPersistTaps=\"handled\"\r\n        style={{ zIndex: zIndex }}\r\n        fadingEdgeLength={1}\r\n        snapToEnd={true}\r\n        contentContainerStyle={styles.synonymScrollContainer}\r\n      >\r\n        {Platform.OS == \"android\" ? (\r\n          <Transitioning.View\r\n            ref={transitionViewRef}\r\n            style={styles.innerView}\r\n            transition={transition}\r\n          >\r\n            {cloudComponents}\r\n          </Transitioning.View>\r\n        ) : (\r\n          <View style={styles.innerView}>{cloudComponents}</View>\r\n        )}\r\n      </ScrollView>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  innerView: {\r\n    flex: 1,\r\n    flexDirection: \"row\",\r\n    flexWrap: \"wrap\",\r\n    justifyContent: \"space-around\",\r\n    alignContent: \"center\",\r\n    alignItems: \"center\",\r\n    gap: 7,\r\n  },\r\n  synonymScrollContainer: {\r\n    flexGrow: 1,\r\n    columnGap: 100,\r\n    margin: 5,\r\n  },\r\n});\r\n\r\n//keeps old correct normals\r\nfunction rebuildNormals(\r\n  clouds: SynonymCloud[],\r\n  newColorMap: Map<string, string>,\r\n  oldNormals: Map<string, ColorNormal>\r\n) {\r\n  const map = new Map<string, ColorNormal>();\r\n  clouds.forEach((cloud) => {\r\n    const oldNormal = oldNormals.get(cloud.name);\r\n    const newNormal = new ColorNormal(cloud.GetWordNormal(), newColorMap);\r\n    if (!newNormal.IsValid) return;\r\n    map.set(\r\n      cloud.name,\r\n      oldNormal?.isEqualTo(newNormal) ? oldNormal : newNormal\r\n    );\r\n  });\r\n  return map;\r\n}\r\n\r\nconst transition = <Transition.Change durationMs={100} />;\r\n\r\nconst DEFAULT_TILE_LIMIT = 30;\r\n\r\nexport default SynonymList;\r\n","//data returned from parser\r\nexport type APIReturnData = SynonymDefinition[];\r\nexport type SynonymDefinition = SynonymSet[];\r\nexport type SynonymSet = Set<string>;\r\n\r\n//processed response from api with an additional field for web response status\r\nexport type APIResponse = SuccessResponse | ErrorResponse;\r\ninterface SuccessResponse {\r\n  type: \"success\";\r\n  data: APIReturnData;\r\n}\r\n\r\ninterface ErrorResponse {\r\n  type: \"error\";\r\n  errorMessage: string;\r\n}\r\n\r\nexport enum APIErrorEnum {\r\n  Network = \"Unknown network error\",\r\n  WrongAPIkey = \"Server denies request, check API key\",\r\n  NoWord = \"No word in the database\",\r\n  Parsing = \"Can't parse the response\",\r\n}\r\n","import { APIErrorEnum, APIResponse } from \"./data/apiResponse\";\r\n\r\n//fetches information about a word from an API and parses it into a synonym\r\nexport default class Dictionary {\r\n  constructor(\r\n    private urlGetter: getURL,\r\n    private parse: parseResponse,\r\n    private normalize?: normalizeWord\r\n  ) {}\r\n  private fetchResponse(word: string) {\r\n    return fetch(this.urlGetter(word));\r\n  }\r\n\r\n  GetSynonyms(word: string) {\r\n    word = this.normalize ? this.normalize(word) : word;\r\n\r\n    return this.fetchResponse(word)\r\n      .then((response) => this.parse(word, response))\r\n      .catch(\r\n        (_) =>\r\n          ({ type: \"error\", errorMessage: APIErrorEnum.Network } as APIResponse)\r\n      );\r\n  }\r\n}\r\n\r\ntype getURL = (word: string, apiKey?: string) => string;\r\ntype parseResponse = (word: string, response: Response) => Promise<APIResponse>;\r\ntype normalizeWord = (string: string) => string;\r\n\r\nexport enum DictionaryType {\r\n  Self = \"Default\",\r\n  Meriam = \"MeriamWebster\",\r\n  Datamuse = \"Datamuse\",\r\n  BigHugeThesarus = \"BigHugeThesarus\",\r\n}\r\n\r\nexport const DictionaryKeyRequirement = {\r\n  [DictionaryType.Self]: false,\r\n  [DictionaryType.Meriam]: true,\r\n  [DictionaryType.BigHugeThesarus]: true,\r\n  [DictionaryType.Datamuse]: false,\r\n};\r\n\r\nexport const DictionaryRegistrationLinks = {\r\n  [DictionaryType.Self]: \"\",\r\n  [DictionaryType.Meriam]: \"https://dictionaryapi.com/\",\r\n  [DictionaryType.BigHugeThesarus]:\r\n    \"https://words.bighugelabs.com/account/getkey\",\r\n  [DictionaryType.Datamuse]: \"\",\r\n};\r\n\r\nexport const DictionaryName = {\r\n  [DictionaryType.Self]: \"Default (Datamuse)\",\r\n  [DictionaryType.Meriam]: \"Merriam-Webster\",\r\n  [DictionaryType.Datamuse]: \"Datamuse\",\r\n  [DictionaryType.BigHugeThesarus]: \"BigHugeThesarus\",\r\n};\r\n","import { APIErrorEnum, APIResponse } from \"./data/apiResponse\";\r\nimport Dictionary from \"./dictionary\";\r\n\r\n//dictionary components for datamuse.com API\r\nexport default function BuildDatamuse(): Dictionary {\r\n  return new Dictionary(\r\n    (word: string) => `https://api.datamuse.com/words?rel_syn=${word}`,\r\n    DatamuseParse,\r\n    (word: string) => word.replace(\" \", \"_\")\r\n  );\r\n}\r\n\r\nexport async function DatamuseParse(\r\n  _: string,\r\n  response: Response\r\n): Promise<APIResponse> {\r\n  try {\r\n    if (!response.ok)\r\n      throw new Error(`Something went wrong: ${response.status}`);\r\n\r\n    const text = await response.text();\r\n    if (!text) throw new Error(\"Empty response\");\r\n    const parsed = JSON.parse(text);\r\n    if (parsed.length == 0 || parsed[0]?.word == undefined)\r\n      throw new Error(APIErrorEnum.NoWord);\r\n\r\n    const sets: Set<string>[] = parsed.map(\r\n      (definition) => new Set<string>([definition.word])\r\n    );\r\n\r\n    return { type: \"success\", data: [sets] };\r\n  } catch (error) {\r\n    return { type: \"error\", errorMessage: error.message };\r\n  }\r\n}\r\n","import {\r\n  APIReturnData,\r\n  APIErrorEnum,\r\n  APIResponse,\r\n  SynonymDefinition,\r\n} from \"./data/apiResponse\";\r\nimport Dictionary from \"./dictionary\";\r\n\r\n//dictionary components for MeriamWebster api\r\nexport default function BuildMeriam(apiKey: string): Dictionary {\r\n  return new Dictionary(\r\n    (word: string) =>\r\n      `https://www.dictionaryapi.com/api/v3/references/thesaurus/json/${word}?key=${apiKey}`,\r\n    MeriamParse\r\n  );\r\n}\r\n\r\nexport async function MeriamParse(\r\n  targetWord: string,\r\n  response: Response\r\n): Promise<APIResponse> {\r\n  try {\r\n    if (!response.ok)\r\n      throw new Error(`Something went wrong: ${response.status}`);\r\n\r\n    const text = await response.text();\r\n    if (!text) throw new Error(\"Empty response\");\r\n    if (text.includes(\"Invalid API key\"))\r\n      return {\r\n        type: \"error\",\r\n        errorMessage: APIErrorEnum.WrongAPIkey,\r\n      };\r\n\r\n    const parsed = JSON.parse(text);\r\n    const data: APIReturnData = [];\r\n    if (parsed.length == 0 || parsed[0].meta == undefined)\r\n      throw new Error(APIErrorEnum.NoWord);\r\n    parsed\r\n      .filter((collection) => collection.meta.id == targetWord)\r\n      .forEach((definitionJSON) => {\r\n        const definition: SynonymDefinition = [];\r\n        definitionJSON.meta.syns.forEach((synonymList: string[]) => {\r\n          if (synonymList?.length > 0) definition.push(new Set(synonymList));\r\n        });\r\n        data.push(definition);\r\n      });\r\n    return { type: \"success\", data: data };\r\n  } catch (error) {\r\n    return { type: \"error\", errorMessage: error.message };\r\n  }\r\n}\r\n","import * as SecureStore from \"expo-secure-store\";\r\nimport { DictionaryType } from \"./dictionary\";\r\nimport { Platform } from \"react-native\";\r\nimport Storage from \"./storageHandling\";\r\n\r\n//securely handles setting and getting api keys\r\nexport default class Keys {\r\n  static Set(keyType: DictionaryType, key: string) {\r\n    const varName = secureKeyName(keyType);\r\n    if (Platform.OS == \"web\") return Storage.SetString(varName, key);\r\n    return SecureStore.setItemAsync(varName, key);\r\n  }\r\n\r\n  static async Get(keyType: DictionaryType) {\r\n    const varName = secureKeyName(keyType);\r\n    if (Platform.OS == \"web\") return Storage.GetString(varName);\r\n    return SecureStore.getItemAsync(varName);\r\n  }\r\n}\r\nconst secureKeyName = (type: string) => \"key-\" + type;\r\n","import {\r\n  APIReturnData,\r\n  APIErrorEnum,\r\n  APIResponse,\r\n  SynonymDefinition,\r\n} from \"./data/apiResponse\";\r\nimport Dictionary from \"./dictionary\";\r\n\r\n//dictionary components for MeriamWebster api\r\nexport default function BuildBHL(apiKey: string): Dictionary {\r\n  return new Dictionary(\r\n    (word: string) =>\r\n      `https://words.bighugelabs.com/api/2/${apiKey}/${word}/json`,\r\n    BHLParse\r\n  );\r\n}\r\n\r\nconst allowedTypes = [\"syn\", \"sim\"];\r\nexport async function BHLParse(\r\n  targetWord: string,\r\n  response: Response\r\n): Promise<APIResponse> {\r\n  if (response.status == 500)\r\n    return { type: \"error\", errorMessage: APIErrorEnum.WrongAPIkey };\r\n  if (response.status == 404)\r\n    return { type: \"error\", errorMessage: APIErrorEnum.NoWord };\r\n  if (!response.ok)\r\n    return { type: \"error\", errorMessage: APIErrorEnum.Network };\r\n\r\n  try {\r\n    const text = await response.text();\r\n    if (!text) throw new Error(`empty response`);\r\n\r\n    const parsed = JSON.parse(text);\r\n    const set: Set<string> = new Set();\r\n    for (const wordType in parsed) {\r\n      for (const relType in parsed[wordType]) {\r\n        if (allowedTypes.includes(relType)) {\r\n          Array.from(parsed[wordType][relType]).forEach((word: string) =>\r\n            set.add(word)\r\n          );\r\n        }\r\n      }\r\n    }\r\n    return { type: \"success\", data: [[set]] };\r\n  } catch (error) {\r\n    return { type: \"error\", errorMessage: error.message };\r\n  }\r\n}\r\n","import BuildDatamuse from \"./datamuse\";\r\nimport BuildMeriam from \"./meriam\";\r\nimport Keys from \"./keyHandling\";\r\nimport Dictionary, {\r\n  DictionaryKeyRequirement,\r\n  DictionaryType,\r\n} from \"./dictionary\";\r\nimport Storage from \"./storageHandling\";\r\nimport BuildBHL from \"./bighugelabs\";\r\n\r\n//Getters and setters for dictionary information in local storage\r\nexport async function GetCurrentDictionary(): Promise<Dictionary> {\r\n  const apiType = (await LoadCurrentDictionaryType()) || DictionaryType.Self;\r\n  let key: string;\r\n\r\n  if (DictionaryKeyRequirement[apiType]) key = await Keys.Get(apiType);\r\n  switch (apiType) {\r\n    case DictionaryType.Self:\r\n      return buildDefaultDictionary();\r\n    case DictionaryType.Meriam:\r\n      return BuildMeriam(key);\r\n    case DictionaryType.Datamuse:\r\n      return BuildDatamuse();\r\n    case DictionaryType.BigHugeThesarus:\r\n      return BuildBHL(key);\r\n  }\r\n}\r\n\r\nconst apiNameKey = \"current_api_name\";\r\n\r\nexport async function LoadCurrentDictionaryType() {\r\n  const result = await Storage.GetString(apiNameKey);\r\n  return (result as DictionaryType) || DictionaryType.Self;\r\n}\r\n\r\nexport async function SaveCurrentDictionaryType(\r\n  type: DictionaryType,\r\n  key?: string\r\n) {\r\n  const promises: Promise<void>[] = [];\r\n  promises.push(Storage.SetString(apiNameKey, type));\r\n  if (type != DictionaryType.Self && key) promises.push(Keys.Set(type, key));\r\n\r\n  return Promise.all(promises);\r\n}\r\n\r\nconst buildDefaultDictionary = BuildDatamuse;\r\n","import React, { FC } from \"react\";\r\nimport { Platform, Pressable, StyleSheet, Text, View } from \"react-native\";\r\nimport SynonymCollection from \"../../dictionaries/data/synonymCollection\";\r\nimport Animated, {\r\n  Transition,\r\n  Transitioning,\r\n  TransitioningView,\r\n} from \"react-native-reanimated\";\r\nimport * as Haptics from \"expo-haptics\";\r\nimport MaterialButton from \"../materialButton\";\r\nimport * as Colors from \"../../colors\";\r\n\r\nconst anim = Animated.createAnimatedComponent(View);\r\n//UI element listing selected synonyms\r\ninterface WordListProps {\r\n  synonymArray: SynonymCollection[];\r\n  colorMap: Map<string, string>;\r\n  highlighted: string;\r\n  onPress: (word: string) => void;\r\n  onLongPress: (word: string) => void;\r\n  onClearButton: () => void;\r\n}\r\n\r\nconst WordListView: FC<WordListProps> = ({\r\n  synonymArray,\r\n  colorMap,\r\n  highlighted,\r\n  onPress,\r\n  onLongPress,\r\n  onClearButton,\r\n}) => {\r\n  const transitionReference = React.useRef<TransitioningView>();\r\n\r\n  React.useEffect(() => {\r\n    if (Platform.OS == \"android\")\r\n      transitionReference.current.animateNextTransition();\r\n  }, [synonymArray]);\r\n\r\n  const wordsComponents = synonymArray.map(({ Word, IsEmpty, WasFetched }) => {\r\n    const OVERRIDE_COLOR = !WasFetched || IsEmpty || !colorMap.has(Word);\r\n    const color = OVERRIDE_COLOR ? Colors.DisabledGrey : colorMap.get(Word);\r\n    const highlightedStyle = Word == highlighted ? styles.highlighted : [];\r\n    const getStyle = (pressed: boolean) => ({\r\n      backgroundColor: color,\r\n      ...highlightedStyle,\r\n      opacity: Platform.OS != \"android\" && pressed ? 0.6 : 1,\r\n    });\r\n    return (\r\n      <Pressable\r\n        key={Word}\r\n        android_ripple={{\r\n          color: Colors.BGWhite,\r\n        }}\r\n        style={({ pressed }) => getStyle(pressed)}\r\n        onPress={() => onPress(Word)}\r\n        onLongPress={() => {\r\n          onLongPress(Word);\r\n          if (Platform.OS == \"android\") Haptics.selectionAsync();\r\n        }}\r\n      >\r\n        <Text style={styles.text}>{Word}</Text>\r\n      </Pressable>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      {Platform.OS == \"android\" ? (\r\n        <Transitioning.View\r\n          style={styles.list}\r\n          transition={transition}\r\n          ref={transitionReference}\r\n        >\r\n          {wordsComponents}\r\n        </Transitioning.View>\r\n      ) : (\r\n        <View style={styles.list}>{wordsComponents}</View>\r\n      )}\r\n\r\n      <MaterialButton\r\n        disabled={synonymArray.length == 0}\r\n        name=\"clear\"\r\n        onPress={onClearButton}\r\n        style={{\r\n          backgroundColor: Colors.BGWhite,\r\n          disabledCountourColor: Colors.DisabledGrey,\r\n          countourColor: Colors.CountourColor,\r\n        }}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  text: { fontSize: 20, marginHorizontal: 7, marginVertical: 5 },\r\n  container: {\r\n    paddingVertical: 5,\r\n    flexDirection: \"row\",\r\n    alignItems: \"flex-end\",\r\n  },\r\n  list: {\r\n    flex: 5,\r\n    flexDirection: \"row\",\r\n    justifyContent: \"flex-start\",\r\n    flexWrap: \"wrap\",\r\n    alignSelf: \"stretch\",\r\n    alignContent: \"center\",\r\n    alignItems: \"center\",\r\n    marginHorizontal: 5,\r\n    gap: 5,\r\n  },\r\n\r\n  highlighted: {\r\n    borderWidth: 3,\r\n    borderColor: Colors.CountourColor,\r\n    margin: -3,\r\n  },\r\n});\r\n\r\nconst transition = (\r\n  <Transition.Together>\r\n    <Transition.Change durationMs={200} />\r\n  </Transition.Together>\r\n);\r\n\r\nexport default WordListView;\r\n","import React, { FC } from \"react\";\r\nimport {\r\n  Animated,\r\n  StyleProp,\r\n  StyleSheet,\r\n  Text,\r\n  TouchableOpacity,\r\n  View,\r\n  ViewStyle,\r\n} from \"react-native\";\r\n\r\nimport * as Colors from \"../../colors\";\r\n\r\ninterface HintViewProps {\r\n  style?: StyleProp<ViewStyle>;\r\n  hintText: string;\r\n  onPress: () => void;\r\n}\r\n\r\nconst HintView: FC<HintViewProps> = ({ style, hintText, onPress }) => {\r\n  const animFaded = React.useState(new Animated.Value(0))[0];\r\n\r\n  React.useEffect(() => {\r\n    Animated.timing(animFaded, {\r\n      toValue: 1,\r\n      duration: 1000,\r\n      useNativeDriver: true,\r\n    }).start();\r\n\r\n    return () => {\r\n      Animated.timing(animFaded, {\r\n        toValue: 0,\r\n        duration: 1000,\r\n        useNativeDriver: true,\r\n      }).start();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <Animated.View style={[{ opacity: animFaded }, styles.view, style]}>\r\n      <TouchableOpacity onPress={onPress}>\r\n        <Text style={{ fontSize: 20 }}>{hintText}</Text>\r\n      </TouchableOpacity>\r\n    </Animated.View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  view: {\r\n    backgroundColor: Colors.BGWhite,\r\n    borderColor: Colors.CountourColor,\r\n    borderRadius: 5,\r\n    borderWidth: 1,\r\n    padding: 6,\r\n  },\r\n});\r\n\r\nexport default HintView;\r\n","import React, { FC } from \"react\";\r\nimport { StyleSheet, View } from \"react-native\";\r\nimport HintView from \"./hintsView\";\r\n\r\ninterface HintOverlayProps {\r\n  currentHintID: number;\r\n  synonymsExist: boolean;\r\n  onHintPress: () => void;\r\n}\r\n\r\nconst HintOverlay: FC<HintOverlayProps> = ({\r\n  currentHintID,\r\n  synonymsExist,\r\n  onHintPress,\r\n}) => {\r\n  return (\r\n    <View style={styles.overlay} pointerEvents=\"box-none\">\r\n      {currentHintID == 0 && (\r\n        <HintView\r\n          style={{ ...styles.hint, bottom: 130 }}\r\n          hintText=\"Enter a word\"\r\n          onPress={onHintPress}\r\n        />\r\n      )}\r\n\r\n      {currentHintID == 1 && synonymsExist && (\r\n        <HintView\r\n          style={{\r\n            ...styles.hint,\r\n            bottom: \"50%\",\r\n          }}\r\n          hintText=\"Add more related words\"\r\n          onPress={onHintPress}\r\n        />\r\n      )}\r\n\r\n      {currentHintID == 2 && (\r\n        <HintView\r\n          style={{ ...styles.hint, bottom: 120 }}\r\n          hintText=\"Hold selected word to sort the results\"\r\n          onPress={onHintPress}\r\n        />\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  overlay: {\r\n    position: \"absolute\",\r\n    top: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    left: 0,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    fontSize: 24,\r\n    zIndex: 3,\r\n  },\r\n  hint: {\r\n    zIndex: 4,\r\n    position: \"absolute\",\r\n  },\r\n});\r\n\r\nexport default HintOverlay;\r\n","import { APIReturnData } from \"./apiResponse\";\r\nimport Dictionary from \"../dictionary\";\r\n\r\n//Synonym word with fetched api data\r\nexport default class SynonymCollection {\r\n  public Word: string;\r\n  constructor(word: string) {\r\n    this.Word = NormalizeWord(word);\r\n  }\r\n\r\n  public definitionSets: APIReturnData = [];\r\n  private set(value: APIReturnData) {\r\n    this.wasFetched = true;\r\n    this.definitionSets = value;\r\n    this.isEmpty = this.definitionSets.length == 0;\r\n  }\r\n\r\n  public async Load(dictionary: Dictionary) {\r\n    const response = await dictionary.GetSynonyms(this.Word);\r\n    const data = response.type == \"success\" ? response.data : [];\r\n    this.set(data);\r\n    return response;\r\n  }\r\n\r\n  private isEmpty: boolean = false;\r\n  get IsEmpty(): boolean {\r\n    return this.isEmpty;\r\n  }\r\n\r\n  private wasFetched: boolean = false;\r\n  get WasFetched(): boolean {\r\n    return this.wasFetched;\r\n  }\r\n}\r\n\r\nexport function NormalizeWord(word: string) {\r\n  return word\r\n    .replace(/[^a-z0-9\\s-]/gi, \"\")\r\n    .trim()\r\n    .toLowerCase();\r\n}\r\n","import React, { FC } from \"react\";\r\nimport { StyleSheet, Switch, Text, TouchableOpacity, View } from \"react-native\";\r\n\r\n// Toggle with a title\r\ninterface TitledToggleProps {\r\n  title: string;\r\n  state: boolean;\r\n  onValueChange: (state: boolean) => void;\r\n}\r\nconst TitledToggle: FC<TitledToggleProps> = ({\r\n  title,\r\n  state,\r\n  onValueChange,\r\n}) => {\r\n  return (\r\n    <TouchableOpacity\r\n      onPress={() => onValueChange(!state)}\r\n      style={styles.touchable}\r\n    >\r\n      <View style={styles.view}>\r\n        <Switch value={state} onValueChange={() => onValueChange(!state)} />\r\n        <Text style={styles.text}>{title}</Text>\r\n      </View>\r\n    </TouchableOpacity>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  text: { left: 20, fontSize: 16 },\r\n  touchable: { padding: 10 },\r\n  view: { flexDirection: \"row\", alignItems: \"center\" },\r\n});\r\n\r\nexport default TitledToggle;\r\n","import { DeviceEventEmitter, View } from \"react-native\";\r\nimport {\r\n  DictionaryKeyRequirement,\r\n  DictionaryName,\r\n  DictionaryRegistrationLinks,\r\n  DictionaryType,\r\n} from \"../../dictionaries/dictionary\";\r\nimport React, { FC } from \"react\";\r\nimport { useToast } from \"react-native-toast-notifications\";\r\n\r\nimport { InputModalEventParams } from \"../inputModal\";\r\nimport { OptionsProps } from \"../../navigation\";\r\nimport { EventsEnum } from \"../../events\";\r\nimport {\r\n  LoadCurrentDictionaryType,\r\n  SaveCurrentDictionaryType,\r\n} from \"../../dictionaries/dictionaryLoading\";\r\nimport TitledToggle from \"../titledToggle\";\r\n\r\ninterface ApiSwitchProps {\r\n  navigation: OptionsProps[\"navigation\"];\r\n}\r\n\r\n//List of toggles to switch API, pops up InputModal for API key when required\r\nexport const ApiSwitch: FC<ApiSwitchProps> = ({ navigation }) => {\r\n  const toast = useToast();\r\n  const [currentDictionaryType, setCurrentDictionaryType] =\r\n    React.useState<DictionaryType>();\r\n\r\n  React.useEffect(() => {\r\n    LoadCurrentDictionaryType().then((result) =>\r\n      setCurrentDictionaryType(result)\r\n    );\r\n\r\n    //listen to an event from InputModal, change Dictionary and API key on recieve\r\n    const callback = (params: InputModalEventParams) => {\r\n      const { varName, varValue: apiKey } = params;\r\n      const dictionaryType = varName as DictionaryType;\r\n      if (currentDictionaryType != dictionaryType || apiKey) {\r\n        setCurrentDictionaryType(dictionaryType as DictionaryType);\r\n        SaveCurrentDictionaryType(\r\n          dictionaryType as DictionaryType,\r\n          apiKey\r\n        ).then(() => DeviceEventEmitter.emit(EventsEnum.ApiChanged));\r\n      } else {\r\n        toast.show(\r\n          `Please provide a key to use ${DictionaryName[dictionaryType]} API`\r\n        );\r\n      }\r\n    };\r\n\r\n    const subscription = DeviceEventEmitter.addListener(\r\n      EventsEnum.ApiKeyEntered,\r\n      callback\r\n    );\r\n    return () => subscription.remove();\r\n  }, []);\r\n\r\n  const apiTogglesData = Object.values(DictionaryType).map((dictionaryType) => {\r\n    return {\r\n      name: dictionaryType,\r\n      state: currentDictionaryType == dictionaryType,\r\n      text: DictionaryName[dictionaryType],\r\n    };\r\n  });\r\n\r\n  const onTogglePress = (dictionaryType: DictionaryType) => {\r\n    const { state: enabled } = apiTogglesData.find(\r\n      ({ name }) => name == dictionaryType\r\n    );\r\n\r\n    if (DictionaryKeyRequirement[dictionaryType]) {\r\n      navigation.navigate(\"InputModal\", {\r\n        varName: dictionaryType,\r\n        varHint: `Enter a key for ${DictionaryName[dictionaryType]} API`,\r\n        varLink: DictionaryRegistrationLinks[dictionaryType], //todo move into personalized api section\r\n        eventName: EventsEnum.ApiKeyEntered,\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!enabled) {\r\n      setCurrentDictionaryType(dictionaryType);\r\n      SaveCurrentDictionaryType(dictionaryType).then(() =>\r\n        DeviceEventEmitter.emit(EventsEnum.ApiChanged)\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      {apiTogglesData.map(({ name, state, text }) => (\r\n        <TitledToggle\r\n          key={name}\r\n          onValueChange={() => {\r\n            onTogglePress(name);\r\n          }}\r\n          state={state}\r\n          title={text}\r\n        />\r\n      ))}\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default ApiSwitch;\r\n","import React, { FC, useRef, useState } from \"react\";\r\nimport { DeviceEventEmitter, StyleSheet, Text, View } from \"react-native\";\r\nimport Storage, { StringTypesEnum } from \"../../dictionaries/storageHandling\";\r\nimport Slider from \"@react-native-community/slider\";\r\nimport { EventsEnum } from \"../../events\";\r\n\r\ninterface TileCountSwitchProps {}\r\n\r\nconst TileCountSwitch: FC<TileCountSwitchProps> = ({}) => {\r\n  const [tileCount, setTileCount] = useState<number>(-1);\r\n  const sliderRef = useRef<any>();\r\n\r\n  if (tileCount == -1)\r\n    Storage.GetString(StringTypesEnum.TileCount).then((stringValue) => {\r\n      const numberValue = stringToTilecount(stringValue);\r\n      setTileCount(numberValue);\r\n    });\r\n\r\n  const onValChange = (newVal: number) => {\r\n    Storage.SetString(StringTypesEnum.TileCount, tilecountToString(newVal));\r\n    setTileCount(newVal);\r\n    DeviceEventEmitter.emit(EventsEnum.TileCountChanged);\r\n  };\r\n  //console.log((sliderRef?.current).value);\r\n\r\n  return (\r\n    <View\r\n      style={{\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <Text> Tile limit</Text>\r\n      <Text> {tileCount > tileValues.max ? \"No limit\" : tileCount}</Text>\r\n      <Slider\r\n        ref={sliderRef}\r\n        style={{\r\n          alignItems: \"center\",\r\n          width: \"90%\",\r\n          height: 40,\r\n        }}\r\n        step={tileValues.step}\r\n        value={tileCount}\r\n        minimumValue={tileValues.min}\r\n        maximumValue={tileValues.uimax}\r\n        onValueChange={onValChange}\r\n        minimumTrackTintColor=\"#FFFFFF\"\r\n        maximumTrackTintColor=\"#000000\"\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({ view: {} });\r\n\r\nfunction tilecountToString(count: number) {\r\n  return (isInfinite(count) ? 1000 : count).toString();\r\n}\r\n\r\nfunction stringToTilecount(count: string) {\r\n  const parsed = parseInt(count) || tileValues.default;\r\n  return isInfinite(parsed) ? tileValues.uimax : parsed;\r\n}\r\n\r\nfunction isInfinite(value) {\r\n  return value >= tileValues.uimax;\r\n}\r\n\r\nconst tileValues = {\r\n  step: 10,\r\n  min: 20,\r\n  max: 70,\r\n  uimax: 80,\r\n  default: 30,\r\n};\r\n\r\nexport default TileCountSwitch;\r\n","import {\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  DeviceEventEmitter,\r\n  TouchableOpacity,\r\n  Platform,\r\n  Linking,\r\n} from \"react-native\";\r\nimport { MaterialIcons } from \"@expo/vector-icons\";\r\nimport Accordion from \"react-native-collapsible/Accordion\";\r\nimport React, { FC, useEffect, useState } from \"react\";\r\nimport ApiSwitch from \"./apiSwitch\";\r\nimport { OptionsProps } from \"../../navigation\";\r\nimport Storage, { StringTypesEnum } from \"../../dictionaries/storageHandling\";\r\nimport { EventsEnum } from \"../../events\";\r\nimport * as Colors from \"../../colors\";\r\nimport TileCountSwitch from \"./tileCountSwitch\";\r\nimport * as Haptics from \"expo-haptics\";\r\n\r\nconst OptionsScreen: FC<OptionsProps> = ({ navigation, route }) => {\r\n  const { unravel } = route.params ?? { unravel: undefined };\r\n  useEffect(() => {\r\n    const propIndex = Object.keys(OptionSectionsEnum).indexOf(unravel);\r\n    if (propIndex >= 0) setActiveSessions([propIndex]);\r\n  }, []);\r\n\r\n  const accordionContents = {\r\n    [OptionSectionsEnum.Display]: <TileCountSwitch />,\r\n    [OptionSectionsEnum.API]: <ApiSwitch navigation={navigation} />,\r\n    [OptionSectionsEnum.About]: (\r\n      <Text style={styles.linkText} onPress={() => Linking.openURL(ABOUT_LINK)}>\r\n        {ABOUT_LINK}\r\n      </Text>\r\n    ),\r\n    [OptionSectionsEnum.Hints]: (\r\n      <TouchableOpacity\r\n        style={styles.resetHints}\r\n        onPress={() => {\r\n          if (Platform.OS == \"android\") Haptics.selectionAsync();\r\n          Storage.SetString(StringTypesEnum.WasLaunched, \"\").then(() =>\r\n            DeviceEventEmitter.emit(EventsEnum.HintsReset)\r\n          );\r\n        }}\r\n      >\r\n        <MaterialIcons name=\"replay-circle-filled\" size={30} />\r\n        <Text style={{ fontSize: 15 }}>Reset Hints</Text>\r\n      </TouchableOpacity>\r\n    ),\r\n  };\r\n\r\n  const renderAccordionHeader = (title, index, isActive) => {\r\n    return (\r\n      <View key={index} style={{ ...styles.header }}>\r\n        {isActive ? (\r\n          <MaterialIcons\r\n            name=\"expand-less\"\r\n            size={24}\r\n            color={Colors.CountourColor}\r\n          />\r\n        ) : (\r\n          <MaterialIcons\r\n            name=\"expand-more\"\r\n            size={24}\r\n            color={Colors.CountourColor}\r\n          />\r\n        )}\r\n        <Text style={styles.title}>{title}</Text>\r\n      </View>\r\n    );\r\n  };\r\n\r\n  const renderAccordingContent = (title) => {\r\n    return (\r\n      <View style={styles.content}>{accordionContents[title]}</View> || null\r\n    );\r\n  };\r\n\r\n  const [activeSessions, setActiveSessions] = React.useState<number[]>([]);\r\n  const updateSections = (activeSections: number[]) => {\r\n    setActiveSessions([...activeSections]);\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      <Accordion\r\n        underlayColor={Colors.BGWhite}\r\n        sections={Object.values(OptionSectionsEnum)}\r\n        activeSections={activeSessions}\r\n        renderHeader={renderAccordionHeader}\r\n        renderContent={renderAccordingContent}\r\n        onChange={updateSections}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n  },\r\n  content: { left: 20, paddingVertical: 20 },\r\n  header: {\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    padding: 16,\r\n  },\r\n  linkText: { fontSize: 15, color: \"blue\" },\r\n  resetHints: {\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    gap: 10,\r\n  },\r\n  title: {\r\n    marginLeft: 16,\r\n    fontSize: 18,\r\n    fontWeight: \"bold\",\r\n  },\r\n});\r\n\r\nconst ABOUT_LINK = \"https://github.com/holyhamster/Synesis/\";\r\nexport enum OptionSectionsEnum {\r\n  Display = \"Display\",\r\n  API = \"API\",\r\n  Hints = \"Hints\",\r\n  About = \"About\",\r\n}\r\n\r\nexport default OptionsScreen;\r\n","import { StatusBar } from \"expo-status-bar\";\r\nimport React, { FC, useCallback, useEffect, useRef, useState } from \"react\";\r\nimport { SafeAreaView } from \"react-native-safe-area-context\";\r\nimport {\r\n  StyleSheet,\r\n  View,\r\n  ActivityIndicator,\r\n  DeviceEventEmitter,\r\n  Text,\r\n  TouchableOpacity,\r\n} from \"react-native\";\r\n\r\nimport WordInputField from \"./wordInputField\";\r\nimport SynonymList from \"./synonymList\";\r\nimport Dictionary from \"../../dictionaries/dictionary\";\r\nimport { SynesisProps } from \"../../navigation\";\r\nimport { EventsEnum } from \"../../events\";\r\nimport { GetCurrentDictionary } from \"../../dictionaries/dictionaryLoading\";\r\nimport Storage, { StringTypesEnum } from \"../../dictionaries/storageHandling\";\r\nimport WordListView from \"./wordListView\";\r\nimport HintOverlay from \"./hintOverlay\";\r\nimport * as Colors from \"../../colors\";\r\nimport MaterialButton from \"../materialButton\";\r\nimport { useSynonyms } from \"../../dictionaries/data/useSynonyms\";\r\nimport { OptionSectionsEnum } from \"../options/optionsScreen\";\r\n\r\nconst SynonymScreen: FC<SynesisProps> = ({ navigation }) => {\r\n  //check if hints need to be shown and listen an event if it changes\r\n  const [showingHint, setShowingHint] = React.useState(-1);\r\n  useEffect(() => {\r\n    const loadHints = () =>\r\n      Storage.GetString(StringTypesEnum.WasLaunched).then((value) => {\r\n        if (!value) {\r\n          Storage.SetString(StringTypesEnum.WasLaunched, \"yes\");\r\n          setShowingHint(0);\r\n        }\r\n      });\r\n\r\n    loadHints();\r\n    const subscription = DeviceEventEmitter.addListener(\r\n      EventsEnum.HintsReset,\r\n      loadHints\r\n    );\r\n\r\n    return () => subscription.remove();\r\n  }, []);\r\n\r\n  //load default dictionary and listen an event if it changes\r\n  const [dictionary, setDictionary] = React.useState<Dictionary>();\r\n  useEffect(() => {\r\n    const loadDictionaryFromMemory = () =>\r\n      GetCurrentDictionary().then((newDictionary) =>\r\n        setDictionary(newDictionary)\r\n      );\r\n\r\n    loadDictionaryFromMemory();\r\n    const subscription = DeviceEventEmitter.addListener(\r\n      EventsEnum.ApiChanged,\r\n      loadDictionaryFromMemory\r\n    );\r\n    return () => subscription.remove();\r\n  }, []);\r\n\r\n  //\r\n  const [highlightedWord, setHighlightedWord] = useState(\"\");\r\n  const onWordRemoval = useCallback(\r\n    (removedWord) => {\r\n      setHighlightedWord((previous) =>\r\n        previous == removedWord ? \"\" : previous\r\n      );\r\n    },\r\n    [setHighlightedWord]\r\n  );\r\n\r\n  const { synonyms, addWord, removeWord, clearWords } = useSynonyms(\r\n    dictionary,\r\n    onWordRemoval\r\n  );\r\n\r\n  const colorRef = useRef(new Map<string, string>());\r\n  colorRef.current = Colors.RebuildColorMap(\r\n    colorRef.current,\r\n    synonyms.map((element) => element.Word)\r\n  );\r\n\r\n  //tooltip text at the top of the screen\r\n  const [listTooltip, setListTooltip] = useState(\"\");\r\n\r\n  const addAndHighlight = useCallback(\r\n    (word) => {\r\n      addWord(word);\r\n      setHighlightedWord(word);\r\n    },\r\n    [addWord, setHighlightedWord]\r\n  );\r\n\r\n  const menuSegment = (\r\n    <View style={styles.menuSection}>\r\n      <MaterialButton\r\n        onPress={() => navigation.navigate(\"Options\")}\r\n        name=\"settings\"\r\n        style={{ size: 40, opacity: 0.8 }}\r\n      />\r\n\r\n      {listTooltip != \"\" && (\r\n        <TouchableOpacity\r\n          style={styles.hiddenElementsTooltip}\r\n          onPress={() => {\r\n            navigation.navigate(\"Options\", {\r\n              unravel: OptionSectionsEnum.Display,\r\n            });\r\n          }}\r\n        >\r\n          <Text>{listTooltip}</Text>\r\n        </TouchableOpacity>\r\n      )}\r\n    </View>\r\n  );\r\n\r\n  const wordsBeingFetched =\r\n    synonyms.find((synonym) => !synonym.WasFetched) != null;\r\n\r\n  return (\r\n    <SafeAreaView style={styles.container}>\r\n      <StatusBar style=\"auto\" />\r\n\r\n      <HintOverlay\r\n        onHintPress={() => setShowingHint((previous) => (previous += 1))}\r\n        currentHintID={showingHint}\r\n        synonymsExist={synonyms.length > 0}\r\n      />\r\n\r\n      <SynonymList\r\n        synonyms={synonyms.filter(\r\n          (synonym) => synonym.WasFetched && !synonym.IsEmpty\r\n        )}\r\n        colorMap={colorRef.current}\r\n        addNewWord={addWord}\r\n        addAndHiglight={addAndHighlight}\r\n        wordToSortBy={highlightedWord}\r\n        showTooltip={(tooltip) => setListTooltip(tooltip)}\r\n      />\r\n\r\n      {menuSegment}\r\n\r\n      <View style={styles.connectionIndicator}>\r\n        <ActivityIndicator\r\n          pointerEvents=\"none\"\r\n          animating={wordsBeingFetched}\r\n          size=\"large\"\r\n          color={Colors.CountourColor}\r\n        />\r\n      </View>\r\n\r\n      <View style={styles.selectedList}>\r\n        <WordListView\r\n          synonymArray={synonyms}\r\n          colorMap={colorRef.current}\r\n          highlighted={highlightedWord}\r\n          onClearButton={clearWords}\r\n          onPress={(word) => removeWord(word)}\r\n          onLongPress={(word) => setHighlightedWord(word)}\r\n        />\r\n      </View>\r\n\r\n      <View style={styles.inputContainer}>\r\n        <WordInputField onAddWord={addWord} />\r\n      </View>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  connectionIndicator: {\r\n    position: \"absolute\",\r\n    right: 10,\r\n    top: 50,\r\n    width: 40,\r\n    height: 40,\r\n    zIndex: 1,\r\n  },\r\n\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"white\",\r\n    justifyContent: \"center\",\r\n    alignContent: \"center\",\r\n  },\r\n\r\n  inputContainer: {\r\n    flexDirection: \"row\",\r\n    backgroundColor: Colors.AccentColor,\r\n    paddingVertical: 5,\r\n  },\r\n\r\n  menuSection: {\r\n    flexDirection: \"row\",\r\n    position: \"absolute\",\r\n    left: \"5%\",\r\n    top: \"5%\",\r\n    zIndex: 1,\r\n  },\r\n\r\n  hiddenElementsTooltip: {\r\n    left: 5,\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    borderWidth: 2,\r\n    borderRadius: 15,\r\n    paddingHorizontal: 5,\r\n    backgroundColor: Colors.BGWhite,\r\n  },\r\n  selectedList: {\r\n    backgroundColor: Colors.AccentColor,\r\n    paddingVertical: 5,\r\n  },\r\n});\r\n\r\nexport default SynonymScreen;\r\n","import React, { useEffect, useCallback, useState } from \"react\";\r\nimport SynonymCollection from \"./synonymCollection\";\r\nimport Dictionary from \"../dictionary\";\r\nimport { useToast } from \"react-native-toast-notifications\";\r\n\r\n//react hook that provides tools for interracting with synonym collections\r\nexport function useSynonyms(\r\n  dictionary: Dictionary,\r\n  onRemove?: (word: string) => void\r\n) {\r\n  const [synonyms, setSynonyms] = React.useState<SynonymCollection[]>([]);\r\n  const toast = useToast();\r\n\r\n  useEffect(() => {\r\n    setSynonyms([]);\r\n  }, [dictionary]);\r\n\r\n  const addWord = useCallback(\r\n    (word: string) => {\r\n      setSynonyms((previous) => {\r\n        const newSynonym = new SynonymCollection(word);\r\n        const EMPTY = !newSynonym || newSynonym.Word == \"\";\r\n        const HAS_WORD_ALREADY =\r\n          previous.findIndex(\r\n            (definiton) => definiton.Word == newSynonym.Word\r\n          ) != -1;\r\n\r\n        if (!EMPTY && !HAS_WORD_ALREADY) {\r\n          newSynonym.Load(dictionary).then((result) => {\r\n            if (result.type == \"error\") toast.show(result.errorMessage);\r\n            setSynonyms((previous) => Array.from(previous));\r\n          });\r\n          return [...previous, newSynonym];\r\n        }\r\n        return previous;\r\n      });\r\n    },\r\n    [setSynonyms, dictionary]\r\n  );\r\n\r\n  const removeWord = useCallback(\r\n    (removedWord: string) => {\r\n      setSynonyms((previousSynonyms) => {\r\n        const index = previousSynonyms.findIndex(\r\n          ({ Word }) => Word == removedWord\r\n        );\r\n        if (index < 0) return previousSynonyms;\r\n        onRemove?.(removedWord);\r\n        return [\r\n          ...previousSynonyms.slice(0, index),\r\n          ...previousSynonyms.slice(index + 1),\r\n        ];\r\n      });\r\n    },\r\n    [setSynonyms, onRemove]\r\n  );\r\n\r\n  const clearWords = useCallback(() => setSynonyms([]), [setSynonyms]);\r\n  return { synonyms, addWord, removeWord, clearWords };\r\n}\r\n","import React, { FC } from \"react\";\r\nimport {\r\n  ButtonProps,\r\n  DeviceEventEmitter,\r\n  Linking,\r\n  StyleSheet,\r\n  Text,\r\n  TextInput,\r\n  TextStyle,\r\n  View,\r\n  ViewStyle,\r\n} from \"react-native\";\r\n\r\nimport { InputModalProps } from \"../navigation\";\r\nimport MaterialButton from \"./materialButton\";\r\nimport * as Colors from \"../colors\";\r\n\r\nexport interface InputModalEventParams {\r\n  varName: string;\r\n  varValue: string;\r\n}\r\n\r\n//Modal that asks for a string and launches an event after it has been submitted\r\nconst InputModal: FC<InputModalProps> = ({ navigation, route }) => {\r\n  const { eventName, varName, varHint, varLink } = route.params;\r\n\r\n  const submitValue = (value: string) => {\r\n    const params: InputModalEventParams = { varName: varName, varValue: value };\r\n    DeviceEventEmitter.emit(eventName, params);\r\n  };\r\n\r\n  const [inputText, setInputText] = React.useState(\"\");\r\n  return (\r\n    <View style={styles.parentView}>\r\n      <Text style={styles.hintText}>{varHint ?? \"Enter variable\"}</Text>\r\n      <Text style={styles.linkText} onPress={() => Linking.openURL(varLink)}>\r\n        {varLink}\r\n      </Text>\r\n      <TextInput\r\n        autoFocus={true}\r\n        blurOnSubmit={true}\r\n        value={inputText}\r\n        onChangeText={(text) => {\r\n          setInputText(text);\r\n        }}\r\n        style={styles.input}\r\n        onSubmitEditing={({ nativeEvent }) => {\r\n          const { text } = nativeEvent;\r\n          if (text) {\r\n            submitValue(text);\r\n            navigation.goBack();\r\n          }\r\n        }}\r\n      />\r\n      <View style={styles.buttonView}>\r\n        <MaterialButton\r\n          name=\"clear\"\r\n          onPress={() => navigation.goBack()}\r\n          style={{ size: 50 }}\r\n        />\r\n        <MaterialButton\r\n          name=\"check\"\r\n          onPress={() => {\r\n            submitValue(inputText);\r\n            navigation.goBack();\r\n          }}\r\n          style={{ size: 50 }}\r\n        />\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\ninterface InputModalStyleProps {\r\n  buttonView: ViewStyle;\r\n  buttons: ButtonProps;\r\n  input: TextStyle;\r\n  linkText: TextStyle;\r\n  parentView: ViewStyle;\r\n  hintText: TextStyle;\r\n}\r\n\r\nconst styles = StyleSheet.create<InputModalStyleProps>({\r\n  buttonView: { flexDirection: \"row\", gap: 10 },\r\n  buttons: {},\r\n  input: {\r\n    backgroundColor: Colors.BGWhite,\r\n    fontSize: 20,\r\n    width: \"80%\",\r\n    justifyContent: \"center\",\r\n    textAlign: \"center\",\r\n  },\r\n  linkText: { fontSize: 20, color: \"blue\", textAlign: \"center\" },\r\n  parentView: {\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n    gap: 10,\r\n    justifyContent: \"center\",\r\n  },\r\n  hintText: { fontSize: 25, textAlign: \"center\" },\r\n});\r\nexport default InputModal;\r\n","import React from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\n\nimport SynonymScreen from \"./src/screens/synonyms/synonymScreen\";\nimport OptionsScreen from \"./src/screens/options/optionsScreen\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\nimport InputModal from \"./src/screens/inputModal\";\nimport { CreateStack } from \"./src/navigation\";\nimport { ToastProvider } from \"react-native-toast-notifications\";\n\nconst Stack = CreateStack();\n\nexport default function App() {\n  return (\n    <SafeAreaProvider>\n      <ToastProvider placement=\"center\">\n        <NavigationContainer>\n          <Stack.Navigator>\n            <Stack.Screen\n              name=\"Synesis\"\n              component={SynonymScreen}\n              options={{ headerShown: false }}\n            />\n            <Stack.Screen name=\"Options\" component={OptionsScreen} />\n            <Stack.Group screenOptions={{ presentation: \"modal\" }}>\n              <Stack.Screen name=\"InputModal\" component={InputModal} />\n            </Stack.Group>\n          </Stack.Navigator>\n        </NavigationContainer>\n      </ToastProvider>\n    </SafeAreaProvider>\n  );\n}\n","import {\r\n  NativeStackScreenProps,\r\n  createNativeStackNavigator,\r\n} from \"@react-navigation/native-stack\";\r\nimport { OptionSectionsEnum } from \"./screens/options/optionsScreen\";\r\n\r\nexport type StackParamList = {\r\n  Synesis: undefined;\r\n  Options: { unravel?: OptionSectionsEnum };\r\n  InputModal: {\r\n    eventName: string;\r\n    varName: string;\r\n    varHint: string | undefined;\r\n    varLink: string | undefined;\r\n  };\r\n};\r\nexport type SynesisProps = NativeStackScreenProps<StackParamList, \"Synesis\">;\r\nexport type OptionsProps = NativeStackScreenProps<StackParamList, \"Options\">;\r\nexport type InputModalProps = NativeStackScreenProps<\r\n  StackParamList,\r\n  \"InputModal\"\r\n>;\r\n\r\nexport function CreateStack() {\r\n  return createNativeStackNavigator<StackParamList>();\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"/Synesis/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkweb\"] = self[\"webpackChunkweb\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [709], () => (__webpack_require__(9386)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["getFreeColor","takenColors","set","Set","colors","color","delete","size","Math","floor","random","length","Array","from","DisabledGrey","BGWhite","AccentColor","CountourColor","defaultCountour","defaultBackground","defaultDisabled","defaultSize","styles","StyleSheet","inputButton","alignItems","borderWidth","borderRadius","marginHorizontal","_ref","disabled","style","name","onPress","bgColor","backgroundColor","counterColor","disabledCountourColor","countourColor","_jsx","TouchableOpacity","_objectSpread","borderColor","children","MaterialIcons","container","flex","flexDirection","inputHolder","justifyContent","inputText","fontSize","width","textAlign","onAddWord","_React$useState","React","_React$useState2","_slicedToArray","setInputText","onSubmitEditing","newText","inputButtonDisabled","_jsxs","View","TextInput","autoFocus","blurOnSubmit","value","onChangeText","text","event","nativeEvent","MaterialButton","WordNormal","_Array","_inherits","_super","_createSuper","_classCallCheck","call","_createClass","key","connections","sum","normal","connectionWeights","quantities","weights","orderWeightIncrease","unitWeight","totalWeight","i","currentQ","columnWeight","ceil","map","val","CalculateWeights","_ref2","word","mentions","push","parseFloat","toFixed","copy","_toConsumableArray","_wrapNativeSuper","SynonymCloud","Map","connectionSum","order","this","nullCache","existingDimensions","get","normalCache","undefined","wordMapCache","Build","Copy","_this","GetWordNormal","forEach","clouds","result","sort","a","b","GetWordMap","Rectangle","left","bottom","height","Lerp","progress","start","end","spliceRect","rects","index","prevRect","splice","Gradient","_len","arguments","items","_key","apply","concat","colorSection","ColorNormal","wordNormal","colorMap","validated","array","wordColor","IsValid","ln","sections","pair","_construct","backgroundColorValue","ibackground","lerpWorklet","_f","_closure","asString","__workletHash","__location","animationProgress","transition","dataKey","registerTransitionUpdates","transitionRef","useSharedValue","useEffect","newTransition","staticStyle","useMemo","position","animatedStyle","useAnimatedStyle","_transitionRef$value","__optimalization","Animated","GetTransitionsKeys","rect","_colors$get","colorCount","view","DEFAULT_ANIMATION_LENGTH","colorNormal","animationLength","_useValueSynchronizer","keyExtractor","values","setValues","_React$useState3","_React$useState4","keys","setKeys","setters","current","_","has","removeUnusedSetters","registerSetter","setter","setArray","arrayOrCallback","previous","newKeys","_setters$current$get","useValueSynchronizer","setTransitions","transitions","restartAnimation","useCallback","duration","isNaN","withTiming","_AlignRectangles","_start$","_end$","startLength","endLength","defHeight","max","_start$i","_end$i","_start$i2","_end","_end$i2","_start","AlignRectangles","rect1","rect2","filter","ToGradient","ToRectangle","_AlignRectangles2","newStart","newTarget","newRects","id","AnimatedRect","SynonymWord","memo","onLongPress","propStyle","_useState","useState","_useState2","layoutSize","setLayoutSize","_colorNormal$getDomin","_ref2$zIndex","zIndex","chart","getDominantColor","margin","viewOpacity","toValue","useNativeDriver","opacity","Pressable","android_ripple","Colors","foreground","_ref4","pressed","Platform","onLayout","_ref3","layout","ColorChart","Text","EventsEnum","Storage","_GetString","_asyncToGenerator","storageString","AsyncStorage","_x","_SetString","_x2","_x3","StringTypesEnum","defaultFadeCeiling","defaultFadeFloor","defaultDuration","imageBackground","faded","source","fadeFloor","fadeCeiling","animatiedOpacity","ImageBackground","resizeMode","innerView","flexWrap","alignContent","gap","synonymScrollContainer","flexGrow","columnGap","Transition","durationMs","DEFAULT_TILE_LIMIT","_style$zIndex","synonyms","wordToSortBy","addNewWord","addAndHiglight","showTooltip","transitionViewRef","useRef","setClouds","newClouds","GetSorted","collections","allKeywords","synonymCollection","Word","getCloud","cloud","addConnectionToSet","keyWord","setWord","includes","addConnection","collection","definition","definitionSets","synonymSet","synonymList2","CrossReference","_transitionViewRef$cu","animateNextTransition","animateTransition","_useState3","_useState4","colorNormals","setColorNormals","newColorMap","oldNormals","oldNormal","newNormal","isEqualTo","rebuildNormals","_useState5","_useState6","tileLimit","setTileLimit","loadTilelimit","GetString","TileCount","then","_parseInt","parseInt","subscription","DeviceEventEmitter","TileCountChanged","remove","hiddenCount","cloudComponents","slice","BackgroundImage","require","ScrollView","keyboardShouldPersistTaps","fadingEdgeLength","snapToEnd","contentContainerStyle","Transitioning","ref","APIErrorEnum","Dictionary","urlGetter","parse","normalize","fetch","fetchResponse","response","catch","type","errorMessage","Network","DictionaryType","DictionaryKeyRequirement","_DictionaryKeyRequire","_defineProperty","Self","Meriam","BigHugeThesarus","Datamuse","DictionaryRegistrationLinks","_DictionaryRegistrati","DictionaryName","_DictionaryName","BuildDatamuse","DatamuseParse","replace","_DatamuseParse","_parsed$","ok","Error","status","parsed","JSON","NoWord","data","error","message","MeriamParse","_MeriamParse","targetWord","WrongAPIkey","meta","definitionJSON","syns","synonymList","Keys","keyType","varName","secureKeyName","SetString","SecureStore","setItemAsync","_Get","getItemAsync","allowedTypes","BHLParse","_BHLParse","wordType","relType","add","_GetCurrentDictionary","apiKey","apiType","LoadCurrentDictionaryType","Get","buildDefaultDictionary","BuildBHL","apiNameKey","_LoadCurrentDictionaryType","SaveCurrentDictionaryType","_SaveCurrentDictionaryType","promises","Promise","all","marginVertical","paddingVertical","list","alignSelf","highlighted","synonymArray","onClearButton","transitionReference","wordsComponents","IsEmpty","WasFetched","highlightedStyle","getStyle","Haptics","selectionAsync","padding","hintText","animFaded","overlay","top","right","hint","currentHintID","synonymsExist","onHintPress","pointerEvents","HintView","SynonymCollection","isEmpty","wasFetched","trim","toLowerCase","NormalizeWord","_Load","dictionary","GetSynonyms","touchable","title","state","onValueChange","Switch","navigation","toast","useToast","currentDictionaryType","setCurrentDictionaryType","ApiKeyEntered","params","varValue","dictionaryType","ApiChanged","show","apiTogglesData","Object","TitledToggle","enabled","find","navigate","varHint","varLink","eventName","onTogglePress","isInfinite","tileValues","uimax","step","min","default","_objectDestructuringEmpty","tileCount","setTileCount","sliderRef","stringValue","numberValue","count","stringToTilecount","Slider","minimumValue","maximumValue","newVal","toString","minimumTrackTintColor","maximumTrackTintColor","content","header","linkText","resetHints","marginLeft","fontWeight","ABOUT_LINK","OptionSectionsEnum","_route$params","_accordionContents","unravel","route","propIndex","indexOf","setActiveSessions","accordionContents","Display","TileCountSwitch","API","ApiSwitch","About","Linking","Hints","WasLaunched","HintsReset","activeSessions","Accordion","underlayColor","activeSections","renderHeader","isActive","renderContent","onChange","connectionIndicator","inputContainer","menuSection","hiddenElementsTooltip","paddingHorizontal","selectedList","showingHint","setShowingHint","loadHints","setDictionary","loadDictionaryFromMemory","GetCurrentDictionary","newDictionary","highlightedWord","setHighlightedWord","_useSynonyms","onRemove","setSynonyms","addWord","newSynonym","EMPTY","HAS_WORD_ALREADY","findIndex","definiton","Load","removeWord","removedWord","previousSynonyms","clearWords","useSynonyms","colorRef","oldMap","newColormap","element","listTooltip","setListTooltip","addAndHighlight","menuSegment","wordsBeingFetched","synonym","SafeAreaView","StatusBar","HintOverlay","SynonymList","tooltip","ActivityIndicator","animating","WordListView","WordInputField","buttonView","buttons","input","parentView","submitValue","goBack","Stack","createNativeStackNavigator","App","SafeAreaProvider","ToastProvider","placement","NavigationContainer","Navigator","Screen","component","SynonymScreen","options","headerShown","OptionsScreen","Group","screenOptions","presentation","InputModal","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","loaded","__webpack_modules__","m","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","r","n","getter","__esModule","d","leafPrototypes","getProto","getPrototypeOf","obj","t","mode","ns","create","def","getOwnPropertyNames","o","defineProperty","enumerable","g","globalThis","Function","e","window","prop","prototype","hasOwnProperty","Symbol","toStringTag","nmd","paths","p","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}