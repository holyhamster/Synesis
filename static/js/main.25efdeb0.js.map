{"version":3,"file":"static/js/main.25efdeb0.js","mappings":"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","sources":["src/colors.ts","src/screens/materialButton.tsx","src/screens/synonyms/wordInputField.tsx","src/dictionaries/data/wordNormal.ts","src/dictionaries/data/synonymCloud.ts","src/screens/synonyms/colorChart/rectangle.ts","src/screens/synonyms/colorChart/gradient.ts","src/screens/synonyms/colorChart/colorNormal.ts","src/screens/synonyms/colorChart/animatedRectangle.tsx","src/screens/synonyms/colorChart/rectangleTransition.ts","src/screens/synonyms/colorChart/colorChart.tsx","src/useValueSynchronizer.ts","src/screens/synonyms/synonymWord.tsx","src/events.ts","src/dictionaries/storageHandling.ts","src/screens/synonyms/synonymList.tsx","src/dictionaries/data/apiResponse.ts","src/dictionaries/dictionary.ts","src/dictionaries/datamuse.ts","src/dictionaries/meriam.ts","src/dictionaries/keyHandling.ts","src/dictionaries/dictionaryOptions.ts","src/screens/synonyms/wordListView.tsx","src/screens/synonyms/hintsView.tsx","src/screens/synonyms/hintOverlay.tsx","src/dictionaries/data/synonymCollection.ts","src/screens/titledToggle.tsx","src/screens/options/apiSwitch.tsx","src/screens/options/tileCountSwitch.tsx","src/screens/options/optionsScreen.tsx","src/screens/synonyms/synonymScreen.tsx","src/dictionaries/data/useSynonyms.ts","src/screens/inputModal.tsx","App.tsx","src/navigation.ts","webpack/bootstrap","webpack/runtime/chunk loaded","webpack/runtime/compat get default export","webpack/runtime/create fake namespace object","webpack/runtime/define property getters","webpack/runtime/global","webpack/runtime/hasOwnProperty shorthand","webpack/runtime/make namespace object","webpack/runtime/node module decorator","webpack/runtime/publicPath","webpack/runtime/jsonp chunk loading","webpack/startup"],"sourcesContent":["export function getRandomColor(): string {\r\n  return colors[Math.floor(Math.random() * colors.length)];\r\n}\r\n\r\nfunction getFreeColor(takenColors: string[]): string {\r\n  const set = new Set(colors);\r\n  for (const color of takenColors) set.delete(color);\r\n\r\n  return set.size == 0\r\n    ? getRandomColor()\r\n    : Array.from(set)[Math.floor(Math.random() * set.size)];\r\n}\r\n\r\nexport function RebuildColorMap<T>(oldMap: Map<T, string>, keys: T[]) {\r\n  const takenColors = new Set<string>();\r\n  oldMap.forEach((color, key) => {\r\n    if (keys.includes(key)) takenColors.add(color);\r\n  });\r\n\r\n  const newColormap = new Map<T, string>();\r\n  keys.forEach((key) => {\r\n    const color = oldMap.get(key) || getFreeColor(Array.from(takenColors));\r\n    newColormap.set(key, color);\r\n    takenColors.add(color);\r\n  });\r\n  return newColormap;\r\n}\r\n\r\nconst colors = [\r\n  \"#B66DFF\",\r\n  \"#FF2A95\",\r\n  \"#FFB6DB\",\r\n  \"#4673FF\",\r\n  \"#00A6A6\",\r\n  \"#8CCAFF\",\r\n  \"#FB6E6E\",\r\n  \"#FFB488\",\r\n  \"#24FF24\",\r\n];\r\nexport const DisabledGrey: string = \"#7A7B7A\";\r\nexport const BGWhite: string = \"white\";\r\nexport const AccentColor: string = \"#eac8f7\";\r\nexport const CountourColor: string = \"black\";\r\n","import React, { FC } from \"react\";\r\nimport { StyleSheet, TouchableOpacity } from \"react-native\";\r\nimport { MaterialIcons } from \"@expo/vector-icons\";\r\n\r\ninterface MaterialButtonStyle {\r\n  backgroundColor?: string;\r\n  countourColor?: string;\r\n  disabledCountourColor?: string;\r\n  size?: number;\r\n}\r\n\r\ninterface MaterialButtonProps {\r\n  style?: MaterialButtonStyle;\r\n  disabled?: boolean;\r\n  name: keyof typeof MaterialIcons.glyphMap;\r\n  onPress: () => void;\r\n}\r\nconst MaterialButton: FC<MaterialButtonProps> = ({\r\n  disabled,\r\n  style,\r\n  name,\r\n  onPress,\r\n}) => {\r\n  const bgColor = style?.backgroundColor || defaultBackground;\r\n  const counterColor = disabled\r\n    ? style?.disabledCountourColor || defaultDisabled\r\n    : style?.countourColor || defaultCountour;\r\n  return (\r\n    <TouchableOpacity\r\n      style={{\r\n        ...styles.inputButton,\r\n        backgroundColor: bgColor,\r\n        borderColor: counterColor,\r\n      }}\r\n      onPress={onPress}\r\n      disabled={disabled}\r\n    >\r\n      <MaterialIcons\r\n        name={name}\r\n        size={style?.size || defaultSize}\r\n        color={counterColor}\r\n      />\r\n    </TouchableOpacity>\r\n  );\r\n};\r\n\r\nconst defaultCountour = \"black\";\r\nconst defaultBackground = \"white\";\r\nconst defaultDisabled = \"darkgrey\";\r\nconst defaultSize = 40;\r\n\r\nconst styles = StyleSheet.create({\r\n  inputButton: {\r\n    alignItems: \"center\",\r\n    borderWidth: 2,\r\n    borderRadius: 15,\r\n    marginHorizontal: 5,\r\n  },\r\n});\r\n\r\nexport default MaterialButton;\r\n","import React, { FC } from \"react\";\r\nimport { TextInput, StyleSheet, View } from \"react-native\";\r\nimport { BGWhite, CountourColor, DisabledGrey } from \"../../colors\";\r\nimport MaterialButton from \"../materialButton\";\r\n\r\ninterface WordInputProps {\r\n  onAddWord: (word: string) => void;\r\n}\r\n\r\nconst WordInputField: FC<WordInputProps> = ({ onAddWord }) => {\r\n  const [inputText, setInputText] = React.useState<string>(\"\");\r\n\r\n  const onSubmitEditing = (newText: string) => {\r\n    onAddWord(newText);\r\n    setInputText(\"\");\r\n  };\r\n  const inputButtonDisabled = inputText === \"\";\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <View style={styles.inputHolder}>\r\n        <TextInput\r\n          style={styles.inputText}\r\n          autoFocus={true}\r\n          blurOnSubmit={true}\r\n          value={inputText}\r\n          onChangeText={(text) => {\r\n            setInputText(text);\r\n          }}\r\n          onSubmitEditing={(event) => {\r\n            const newText = event.nativeEvent.text;\r\n            if (newText) onSubmitEditing(newText);\r\n          }}\r\n        />\r\n      </View>\r\n\r\n      <MaterialButton\r\n        disabled={inputButtonDisabled}\r\n        name=\"add\"\r\n        onPress={() => onSubmitEditing(inputText)}\r\n        style={{\r\n          backgroundColor: BGWhite,\r\n          disabledCountourColor: DisabledGrey,\r\n          countourColor: CountourColor,\r\n        }}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    flexDirection: \"row\",\r\n  },\r\n  inputHolder: {\r\n    flex: 5,\r\n    borderWidth: 2,\r\n    borderRadius: 15,\r\n    marginHorizontal: 5,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    backgroundColor: BGWhite,\r\n  },\r\n  inputText: {\r\n    fontSize: 20,\r\n    width: \"90%\",\r\n    textAlign: \"center\",\r\n  },\r\n});\r\n\r\nexport default WordInputField;\r\n","//normal vector of synonyms for a word\r\n// [{word:\"vague\", value:.5}, {word:\"undefined\", value:.3}, {word:\"inaccurate\", value: .2}]\r\nexport default class WordNormal extends Array<{ word: string; value: number }> {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  public static Build(connections: Map<string, number[]>, sum: number[]) {\r\n    const normal = new WordNormal();\r\n    const connectionWeights = CalculateWeights(sum);\r\n\r\n    for (const [word, mentions] of connections) {\r\n      let val = 0;\r\n      for (let i = 0; i < mentions.length; i++)\r\n        val += connectionWeights[i] * mentions[i] || 0;\r\n\r\n      normal.push({\r\n        word: word,\r\n        value: parseFloat(val.toFixed(5)),\r\n      });\r\n    }\r\n\r\n    return normal;\r\n  }\r\n\r\n  public static Copy(copy: WordNormal) {\r\n    return [...copy];\r\n  }\r\n}\r\n\r\n//determines a weight of every dimension of the array for a total amount to be 1\r\n//every next dimension takes a space equal to a single unit of the previous one\r\n//[2, 0, 2] => [0.375/2, 0, 0.25/2]\r\nexport function CalculateWeights(sum: number[]) {\r\n  const dWeigh: number[] = [];\r\n  sum.forEach((_) => dWeigh.push(0));\r\n  let valueLeft = 1;\r\n  let valueSetAside = 0;\r\n  let emptyDimensions = 0;\r\n  const emptyDimensionPenalty = 0.5;\r\n  const ln = dWeigh.length;\r\n  for (let i = 0; i < ln; i++) {\r\n    if (!sum[i]) {\r\n      emptyDimensions += 1;\r\n      valueSetAside += valueLeft * emptyDimensionPenalty;\r\n      valueLeft *= emptyDimensionPenalty;\r\n    } else {\r\n      const remainingParts = (sum[i] || 0) + 1;\r\n      dWeigh[i] = valueLeft * (1 - 1 / remainingParts);\r\n      valueLeft -= dWeigh[i];\r\n    }\r\n  }\r\n\r\n  for (let i = 0; i < ln; i++) {\r\n    if (!sum[i]) continue;\r\n    dWeigh[i] += (valueLeft + valueSetAside) / (ln - emptyDimensions);\r\n  }\r\n\r\n  return dWeigh.map((weight, index) => (sum[index] ? weight / sum[index] : 0));\r\n}\r\n","import SynonymCollection from \"./synonymCollection\";\r\nimport WordNormal, { CalculateWeights } from \"./wordNormal\";\r\n\r\n//Synonym word crossreferences with other words\r\nexport default class SynonymCloud {\r\n  connections = new Map<string, number[]>();\r\n  connectionSum = []; //calculated in parallel for performance\r\n  public constructor(public name: string) {}\r\n\r\n  public addConnection(word: string, order: number) {\r\n    this.nullCache();\r\n    const existingDimensions = this.connections.get(word) || [];\r\n    if (existingDimensions.length == 0)\r\n      this.connections.set(word, existingDimensions);\r\n    existingDimensions[order] = (existingDimensions[order] || 0) + 1;\r\n    while (this.connectionSum.length <= order) this.connectionSum.push(0);\r\n    this.connectionSum[order] += 1;\r\n  }\r\n\r\n  private nullCache() {\r\n    this.normalCache = undefined;\r\n    this.wordMapCache = undefined;\r\n  }\r\n\r\n  //gets a map of a normalized n-dimensional vector of connections [\"word1\": 0.25, \"word2\": 0.5, \"word3\": 0.25]\r\n  private normalCache: WordNormal;\r\n  public GetWordNormal() {\r\n    if (!this.normalCache)\r\n      this.normalCache = WordNormal.Build(this.connections, this.connectionSum);\r\n    return WordNormal.Copy(this.normalCache);\r\n  }\r\n\r\n  //translates word normal into a map\r\n  private wordMapCache;\r\n  public GetWordMap() {\r\n    if (!this.wordMapCache) {\r\n      this.wordMapCache = new Map();\r\n      this.GetWordNormal().forEach(({ word, value }) =>\r\n        this.wordMapCache.set(word, value)\r\n      );\r\n    }\r\n    return this.wordMapCache;\r\n  }\r\n\r\n  public static GetSorted(clouds: SynonymCloud[], word: string) {\r\n    const result = Array.from(clouds);\r\n    if (!word || word == \"\") return result;\r\n    result.sort(\r\n      (a, b) =>\r\n        (a.GetWordMap().get(word) || 0) - (b.GetWordMap().get(word) || 0)\r\n    );\r\n    return result;\r\n  }\r\n}\r\n\r\n//build clouds of synonyms from given collections\r\nexport function CrossReference(collections: SynonymCollection[]) {\r\n  const allKeywords = collections.map(\r\n    (synonymCollection) => synonymCollection.Word\r\n  );\r\n\r\n  const map = new Map<string, SynonymCloud>();\r\n\r\n  const getCloud = (word) => {\r\n    let cloud = map.get(word);\r\n    if (!cloud) {\r\n      cloud = new SynonymCloud(word);\r\n      map.set(word, cloud);\r\n    }\r\n    return cloud;\r\n  };\r\n\r\n  const addConnectionToSet = (\r\n    set: Set<string>,\r\n    keyWord: string,\r\n    order: number\r\n  ) => {\r\n    for (const setWord of set) {\r\n      if (allKeywords.includes(setWord)) continue;\r\n      getCloud(setWord).addConnection(keyWord, order);\r\n    }\r\n  };\r\n\r\n  for (const collection of collections)\r\n    for (const definition of collection.definitionSets)\r\n      for (const synonymSet of definition)\r\n        for (const word of synonymSet) {\r\n          //if found a word from main list\r\n          if (allKeywords.includes(word)) {\r\n            //go through synonym list, add 1st degree connection\r\n            addConnectionToSet(synonymSet, word, 1);\r\n\r\n            for (const synonymList2 of definition) {\r\n              if (synonymList2 === synonymSet) continue;\r\n              addConnectionToSet(synonymList2, word, 2);\r\n            }\r\n          } else {\r\n            getCloud(word).addConnection(collection.Word, 0);\r\n          }\r\n        }\r\n\r\n  return Array.from(map.values());\r\n}\r\n","export default class Rectangle {\r\n  constructor(\r\n    public left: number,\r\n    public bottom: number,\r\n    public width: number,\r\n    public height: number,\r\n    public color: string\r\n  ) {}\r\n\r\n  static Zero() {\r\n    return { left: 0, bottom: 0, width: 0, height: 0, color: \"white\" };\r\n  }\r\n}\r\n\r\nexport function RectToString(rect: Rectangle, fixedDecimals = 10) {\r\n  return `L: ${rect.left.toFixed(fixedDecimals)} B: ${rect.bottom.toFixed(\r\n    fixedDecimals\r\n  )} W: ${rect.width} H:${rect.height} C:${rect.color}`;\r\n}\r\n\r\nexport function LerpRectangles(\r\n  progress: number,\r\n  rect1: Rectangle,\r\n  rect2: Rectangle\r\n) {\r\n  return new Rectangle(\r\n    Lerp(progress, rect1.left, rect2.left),\r\n    Lerp(progress, rect1.bottom, rect2.bottom),\r\n    Lerp(progress, rect1.width, rect2.width),\r\n    Lerp(progress, rect1.height, rect2.height),\r\n    rect2.color\r\n  );\r\n}\r\n\r\nfunction Lerp(progress: number, start: number, end: number) {\r\n  return (1 - progress) * start + progress * end;\r\n}\r\n\r\n//matches arrays of rectangles index to index by color, by inserting new 0-width rectangles when colors differ\r\nexport function AlignRectangles(\r\n  start: Rectangle[],\r\n  end: Rectangle[]\r\n): [startRects: Rectangle[], endRects: Rectangle[]] {\r\n  start = Array.from(start);\r\n  end = Array.from(end);\r\n  let startLength = start.length;\r\n  let endLength = end.length;\r\n  const defHeight = start[0]?.height || end[0]?.height || 0;\r\n\r\n  for (let i = 0; i < Math.max(startLength, endLength); i += 1) {\r\n    if (start[i]?.color === end[i]?.color) continue;\r\n    //find matching colors for a transition\r\n    if (startLength <= i || start[i]?.color == end[i + 1]?.color) {\r\n      spliceRect(start, i, defHeight, end[i].color);\r\n      startLength += 1;\r\n    } else if (endLength <= i || end[i]?.color == start[i + 1]?.color) {\r\n      spliceRect(end, i, defHeight, start[i].color);\r\n      endLength += 1;\r\n    }\r\n    //didn't find matches, insert new colors into each array set\r\n    else {\r\n      spliceRect(start, i, defHeight, end[i].color);\r\n      spliceRect(end, i + 1, defHeight, start[i + 1].color);\r\n      startLength += 1;\r\n      endLength += 1;\r\n    }\r\n  }\r\n  return [start, end];\r\n}\r\n\r\n//insert a width-0 rectangle of color\r\nexport function spliceRect(\r\n  rects: Rectangle[],\r\n  index: number,\r\n  height: number,\r\n  color: string\r\n) {\r\n  const prevRect = rects[index - 1];\r\n  const left = prevRect ? prevRect.left + prevRect.width : 0;\r\n  rects.splice(index, 0, {\r\n    left: left,\r\n    width: 0,\r\n    height: height,\r\n    bottom: 0,\r\n    color: color,\r\n  });\r\n}\r\n","import Rectangle from \"./rectangle\";\r\n\r\ntype colorSection = { color: string; start: number; width: number };\r\ntype rectSize = { height: number; width: number };\r\n\r\n//[{color:\"red\", start:0, end: .5}, {color:\"blue\", start: .5, end: 1}]\r\nexport default class Gradient extends Array<colorSection> {\r\n  constructor(...items: colorSection[]) {\r\n    super(...(items ?? []));\r\n  }\r\n\r\n  ToRectangle(size: rectSize): Rectangle[] {\r\n    return this.map(\r\n      (colorSection) =>\r\n        new Rectangle(\r\n          colorSection.start * size.width,\r\n          0,\r\n          colorSection.width * size.width,\r\n          size.height,\r\n          colorSection.color\r\n        )\r\n    );\r\n  }\r\n}\r\n","import WordNormal from \"../../../dictionaries/data/wordNormal\";\r\nimport Gradient from \"./gradient\";\r\n\r\n// normal vector with colors as axis\r\n// [{color:\"red\", value:.5}, {color:\"blue\", value:.5}]\r\nexport default class ColorNormal extends Array<{\r\n  color: string;\r\n  value: number;\r\n}> {\r\n  public IsValid = false;\r\n  constructor(wordNormal: WordNormal, colorMap: Map<string, string>) {\r\n    let validated = wordNormal.length > 0 && colorMap.size > 0;\r\n\r\n    const array = wordNormal.map((val) => {\r\n      const wordColor = colorMap.get(val.word);\r\n      if (!wordColor) validated = false;\r\n      return { color: wordColor, value: val.value };\r\n    });\r\n\r\n    super(...array);\r\n    this.IsValid = validated;\r\n  }\r\n\r\n  isEqualTo(normal: ColorNormal) {\r\n    const ln = this.length;\r\n    if (ln != normal.length) return false;\r\n    for (let i = 0; i < ln; i++) {\r\n      if (this[i].color != normal[i].color || this[i].value != normal[i].value)\r\n        return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  //translates ColorNormal into a gradient for GradientRect component\r\n  //[{color:\"red\", value: 0.5}, {color:\"blue\", value: 0.5}] => [{color:\"red\", start: 0, width: 0.5}, {color:\"blue\", start:0.5, width: 0.5}]\r\n  ToGradient() {\r\n    const sections = [];\r\n    let start = 0;\r\n    this.forEach((pair) => {\r\n      sections.push({ color: pair.color, start: start, width: pair.value });\r\n      start += pair.value;\r\n    });\r\n    return new Gradient(...sections);\r\n  }\r\n\r\n  getDominantColor() {\r\n    let backgroundColorValue = 0;\r\n    let ibackground: string = undefined;\r\n\r\n    this.forEach((pair) => {\r\n      if (pair.value > backgroundColorValue) {\r\n        ibackground = pair.color;\r\n        backgroundColorValue = pair.value;\r\n      }\r\n    });\r\n    return ibackground;\r\n  }\r\n}\r\n","import React, { FC, useEffect, useMemo } from \"react\";\r\nimport Animated, {\r\n  SharedValue,\r\n  useAnimatedStyle,\r\n  useSharedValue,\r\n} from \"react-native-reanimated\";\r\nimport { ViewProps, ViewStyle } from \"react-native\";\r\nimport { RectangleTransition } from \"./rectangleTransition\";\r\n\r\ninterface RectProps {\r\n  transition: RectangleTransition;\r\n  dataKey: string;\r\n  animationProgress: SharedValue<number>;\r\n  style?: ViewProps;\r\n  debugMessages?: boolean;\r\n  registerTransitionUpdates?: (\r\n    id: string,\r\n    val: (RectangleTransition) => void\r\n  ) => void;\r\n}\r\n\r\n//View rectangle animated to change its size from start to finish according to progressValue\r\nconst AnimatedRect: FC<RectProps> = ({\r\n  animationProgress,\r\n  transition,\r\n  style,\r\n  dataKey,\r\n  registerTransitionUpdates,\r\n}) => {\r\n  const transitionRef = useSharedValue<RectangleTransition>(transition);\r\n\r\n  useEffect(() => {\r\n    const updateTransition = (newTransition: RectangleTransition) =>\r\n      (transitionRef.value = newTransition);\r\n    registerTransitionUpdates?.(dataKey, updateTransition);\r\n  }, [dataKey, registerTransitionUpdates]);\r\n\r\n  const staticStyle: Animated.AnimateStyle<ViewStyle> = useMemo(\r\n    () => ({\r\n      position: \"absolute\",\r\n      ...style,\r\n    }),\r\n    [style]\r\n  );\r\n\r\n  //runs on the UI threat every time animation value changes\r\n  const animatedStyle =\r\n    useAnimatedStyle((): Animated.AnimateStyle<ViewStyle> => {\r\n      const { start, end } = transitionRef.value;\r\n      const { value } = animationProgress;\r\n      return {\r\n        ...staticStyle,\r\n        left: lerpWorklet(value, start.left, end.left),\r\n        bottom: lerpWorklet(value, start.bottom, end.bottom),\r\n        width: lerpWorklet(value, start.width, end.width),\r\n        height: lerpWorklet(value, start.height, end.height),\r\n        backgroundColor: end.color,\r\n      };\r\n    }, [animationProgress]);\r\n\r\n  return <Animated.View style={animatedStyle} />;\r\n};\r\n\r\n//interpolates arrays of values on a UI thread\r\nfunction lerpWorklet(progress: number, start: number, end: number) {\r\n  \"worklet\";\r\n  return (1 - progress) * start + progress * end;\r\n}\r\n\r\nexport default AnimatedRect;\r\n","import Rectangle from \"./rectangle\";\r\n\r\nexport type RectangleTransition = { start: Rectangle; end: Rectangle };\r\n\r\n//Gives rectangle a unique identifier based on its color\r\nexport function GetTransitionsKeys(rects: RectangleTransition[]) {\r\n  const result = new Map<string, RectangleTransition>();\r\n  const colors = new Map<string, number>();\r\n  rects.forEach((rect) => {\r\n    const colorCount = 1 + (colors.get(rect.end.color) ?? 0);\r\n    colors.set(rect.end.color, colorCount);\r\n    result.set(rect.end.color + colorCount, rect);\r\n  });\r\n  return result;\r\n}\r\n","import React, { FC, useCallback, useEffect } from \"react\";\r\nimport { StyleSheet, View, ViewStyle } from \"react-native\";\r\nimport { useSharedValue, withTiming } from \"react-native-reanimated\";\r\n\r\nimport ColorNormal from \"./colorNormal\";\r\nimport AnimatedRect from \"./animatedRectangle\";\r\nimport {\r\n  AlignRectangles as AlignRectangles,\r\n  LerpRectangles as LerpRectangles,\r\n} from \"./rectangle\";\r\nimport { GetTransitionsKeys, RectangleTransition } from \"./rectangleTransition\";\r\nimport { useValueSynchronizer } from \"../../../useValueSynchronizer\";\r\n\r\ninterface ColorChartProps {\r\n  colorNormal: ColorNormal;\r\n  animationLength?: number;\r\n  size: { height: number; width: number };\r\n  style?: ViewStyle;\r\n}\r\n\r\n//Takes in a ColorNormal, draws a rectangle chart with sharp gradients according to it\r\n//if passed a new ColorNormal, will animate transition to it\r\nconst ColorChart: FC<ColorChartProps> = ({\r\n  colorNormal,\r\n  animationLength,\r\n  size,\r\n  style,\r\n}) => {\r\n  const {\r\n    registerSetter,\r\n    keys,\r\n    setArray: setTransitions,\r\n    array: transitions,\r\n  } = useValueSynchronizer<RectangleTransition>(GetTransitionsKeys);\r\n\r\n  const animationProgress = useSharedValue(1);\r\n  const restartAnimation = useCallback(() => {\r\n    const duration = isNaN(animationLength)\r\n      ? DEFAULT_ANIMATION_LENGTH\r\n      : animationLength;\r\n    animationProgress.value = 0;\r\n    animationProgress.value = withTiming(1, {\r\n      duration: duration,\r\n    });\r\n  }, [animationLength]);\r\n\r\n  //calculate starting and ending animation rectangles and start animation\r\n  useEffect(() => {\r\n    if (!colorNormal?.IsValid) return;\r\n    //get current rectangles according to animation progress\r\n    const currentRects = transitions\r\n      .map(({ start, end }) =>\r\n        LerpRectangles(animationProgress.value, start, end)\r\n      )\r\n      .filter((rect) => rect.width != 0);\r\n\r\n    //calculate new start and end between current\r\n    const normalRectangles = colorNormal.ToGradient().ToRectangle(size);\r\n    const [newStart, newTarget] = AlignRectangles(\r\n      currentRects,\r\n      normalRectangles\r\n    );\r\n\r\n    const newRects = newStart.map((_, index) => ({\r\n      start: newStart[index],\r\n      end: newTarget[index],\r\n    }));\r\n\r\n    setTransitions(newRects, (previous) => {\r\n      if (!previous.length) return;\r\n      restartAnimation();\r\n    });\r\n  }, [colorNormal, size, setTransitions]);\r\n\r\n  return (\r\n    <View style={[styles.view, style]}>\r\n      {Array.from(keys.keys()).map((id) => (\r\n        <AnimatedRect\r\n          transition={keys.get(id)}\r\n          dataKey={id}\r\n          key={id}\r\n          animationProgress={animationProgress}\r\n          registerTransitionUpdates={registerSetter}\r\n        />\r\n      ))}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  view: {\r\n    flexDirection: \"row\",\r\n    position: \"absolute\",\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n});\r\n\r\nconst DEFAULT_ANIMATION_LENGTH = 1000;\r\n\r\nexport default ColorChart;\r\n","import React from \"react\";\r\n\r\n//maintains an array of values\r\n//if child components register for live updates, they will recieve them live whenever setter is used\r\nexport function useValueSynchronizer<T>(\r\n  keyExtractor: (array: T[]) => Map<string, T>\r\n) {\r\n  const [values, setValues] = React.useState<T[]>([]);\r\n\r\n  //used to identify setters in an array\r\n  const [keys, setKeys] = React.useState(keyExtractor(values));\r\n\r\n  //setters are stored and called when the value is changed\r\n  type Setter = (val: T) => void;\r\n\r\n  const setters = React.useRef(new Map<string, Setter>());\r\n\r\n  removeUnusedSetters(setters, keys);\r\n\r\n  const registerSetter = React.useCallback((key: string, setter: Setter) => {\r\n    setters.current.set(key, setter);\r\n  }, []);\r\n\r\n  //sets the value state and calls all setters\r\n  const setArray = React.useCallback(\r\n    (newArray: T[], callback?: (previous) => void) => {\r\n      const newKeys = keyExtractor(newArray);\r\n      setValues((previous) => {\r\n        callback?.(previous);\r\n        newKeys.forEach((value, key) => setters.current.get(key)?.(value));\r\n        return newArray;\r\n      });\r\n      setKeys(newKeys);\r\n    },\r\n    [setValues, setKeys, keyExtractor]\r\n  );\r\n\r\n  return { array: values, setArray, registerSetter, keys };\r\n}\r\n\r\nfunction removeUnusedSetters(setters, keys) {\r\n  setters.current.forEach((_, key) => {\r\n    if (!keys.has(key)) setters.current.delete(key);\r\n  });\r\n}\r\n","import React, { FC, memo, useState, useMemo } from \"react\";\r\nimport {\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  ViewStyle,\r\n  TextStyle,\r\n  Pressable,\r\n  Platform,\r\n  Animated,\r\n} from \"react-native\";\r\n\r\nimport ColorNormal from \"./colorChart/colorNormal\";\r\nimport ColorChart from \"./colorChart/colorChart\";\r\nimport * as Colors from \"../../colors\";\r\n\r\ninterface SynonymWordProps {\r\n  word: string;\r\n  colorNormal: ColorNormal;\r\n  onPress: (word: string) => void;\r\n  onLongPress: (word: string) => void;\r\n  style?: ViewStyle;\r\n}\r\n\r\n//pressable tile with a word and a sharp color gradient of given color normal\r\nconst SynonymWord: FC<SynonymWordProps> = memo(\r\n  ({ colorNormal, word, onPress, onLongPress, style: propStyle }) => {\r\n    const [layoutSize, setLayoutSize] = useState<{\r\n      height: number;\r\n      width: number;\r\n    }>({\r\n      height: 0,\r\n      width: 0,\r\n    });\r\n\r\n    //tracks when touch started and ended to display a view with opacity on top\r\n    const [highlighted, setHighlighted] = useState(false);\r\n\r\n    const styles = useMemo(() => {\r\n      const { zIndex = 0 } = propStyle ?? {};\r\n\r\n      return StyleSheet.create<SynonymWordStyles>({\r\n        chart: { zIndex: zIndex + 1 },\r\n        container: {\r\n          ...propStyle,\r\n          backgroundColor: colorNormal?.getDominantColor() ?? \"white\",\r\n        },\r\n        touchOverlay: {\r\n          flex: 1,\r\n          position: \"absolute\",\r\n          height: \"100%\",\r\n          width: \"100%\",\r\n          top: 0,\r\n          right: 0,\r\n          backgroundColor: \"white\",\r\n          opacity: highlighted ? 0.5 : 0,\r\n          zIndex: zIndex + 3,\r\n        },\r\n        word: {\r\n          flex: 1,\r\n          margin: 5,\r\n          marginHorizontal: 10,\r\n          fontSize: 20,\r\n          zIndex: zIndex + 2,\r\n        },\r\n      });\r\n    }, [propStyle, highlighted]);\r\n\r\n    const onLayout = ({ nativeEvent }) => {\r\n      setLayoutSize({\r\n        height: nativeEvent.layout.height,\r\n        width: nativeEvent.layout.width,\r\n      });\r\n    };\r\n    const opacity = React.useRef(new Animated.Value(0)).current;\r\n\r\n    // use effect hook to run the animation when the component mounts and unmounts\r\n    React.useEffect(() => {\r\n      // fade in the component when it mounts\r\n      Animated.timing(opacity, {\r\n        toValue: 1,\r\n        duration: 500,\r\n        useNativeDriver: false,\r\n      }).start();\r\n    }, []);\r\n\r\n    return (\r\n      <Animated.View style={{ opacity }}>\r\n        <Pressable\r\n          android_ripple={{\r\n            color: Colors.BGWhite,\r\n            foreground: true,\r\n          }}\r\n          onPress={() => onPress(word)}\r\n          onLongPress={() => {\r\n            onLongPress(word);\r\n          }}\r\n          style={({ pressed }) => ({\r\n            opacity: Platform.OS != \"android\" && pressed ? 0.6 : 1,\r\n          })}\r\n        >\r\n          <View\r\n            style={styles.container}\r\n            onLayout={layoutSize.width == 0 ? onLayout : undefined}\r\n          >\r\n            {layoutSize.width != 0 && (\r\n              <ColorChart\r\n                colorNormal={colorNormal}\r\n                style={styles.chart}\r\n                size={layoutSize}\r\n              />\r\n            )}\r\n            <View style={styles.touchOverlay} />\r\n            <Text style={styles.word}>{word}</Text>\r\n          </View>\r\n        </Pressable>\r\n      </Animated.View>\r\n    );\r\n  }\r\n);\r\n\r\ninterface SynonymWordStyles {\r\n  chart: ViewStyle;\r\n  container: ViewStyle;\r\n  touchOverlay: ViewStyle;\r\n  word: TextStyle;\r\n}\r\n\r\nexport default SynonymWord;\r\n","//events run by DeviceEventEmitter\r\nexport enum EventsEnum {\r\n  ApiKeyEntered = \"api-key-entered\",\r\n  ApiChanged = \"api-changed\",\r\n  LayoutChanged = \"layout-changed\",\r\n  TileCountChanged = \"tile-count-changed\",\r\n  HintsReset = \"hints-reset\",\r\n}\r\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\r\n\r\nexport async function GetStringFromStorage(storageString: string) {\r\n  return AsyncStorage.getItem(storageString);\r\n}\r\n\r\nexport async function SetStringInStorage(storageString: string, value: string) {\r\n  return AsyncStorage.setItem(storageString, value);\r\n}\r\n\r\nexport enum StringTypesEnum {\r\n  WasLaunched = \"WasLaunched\",\r\n  DisabledVisulats = \"DisabledVisulats\",\r\n  TileLayout = \"TileLayout\",\r\n  TileCount = \"TileCount\",\r\n}\r\n","import React, { FC, useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  DeviceEventEmitter,\r\n  Platform,\r\n  ScrollView,\r\n  StyleSheet,\r\n  View,\r\n  ViewStyle,\r\n} from \"react-native\";\r\nimport {\r\n  Transition,\r\n  Transitioning,\r\n  TransitioningView,\r\n} from \"react-native-reanimated\";\r\nimport SynonymCloud, {\r\n  CrossReference,\r\n} from \"../../dictionaries/data/synonymCloud\";\r\nimport ColorNormal from \"./colorChart/colorNormal\";\r\nimport SynonymWord from \"./synonymWord\";\r\nimport SynonymCollection from \"../../dictionaries/data/synonymCollection\";\r\nimport { EventsEnum } from \"../../events\";\r\nimport {\r\n  GetStringFromStorage,\r\n  StringTypesEnum,\r\n} from \"../../dictionaries/storageHandling\";\r\n\r\ninterface SynonymListProps {\r\n  synonyms: SynonymCollection[];\r\n  colorMap: Map<string, string>;\r\n  wordToSortBy?: string;\r\n  addNewWord: (newWord: string) => void;\r\n  addAndHiglight: (newWord: string) => void;\r\n  showTooltip?: (text: string) => void;\r\n  style?: ViewStyle;\r\n}\r\n//Takes synonyms, builds clouds of words and displays them in a ScrollList\r\nconst SynonymList: FC<SynonymListProps> = ({\r\n  synonyms,\r\n  colorMap,\r\n  wordToSortBy,\r\n  addNewWord,\r\n  addAndHiglight,\r\n  showTooltip,\r\n  style,\r\n}) => {\r\n  //use layout transition for tile movement (supported only on android)\r\n  const transitionViewRef = useRef<TransitioningView>();\r\n  const animateTransition = () => {\r\n    if (Platform.OS == \"android\")\r\n      transitionViewRef.current?.animateNextTransition();\r\n  };\r\n\r\n  //process synonyms into word clouds\r\n  const [clouds, setClouds] = useState<SynonymCloud[]>([]);\r\n  useEffect(() => {\r\n    const newClouds = SynonymCloud.GetSorted(\r\n      CrossReference(synonyms),\r\n      wordToSortBy\r\n    );\r\n    setClouds(newClouds);\r\n    animateTransition();\r\n  }, [synonyms, setClouds]);\r\n\r\n  useEffect(() => {\r\n    setClouds((previous) => SynonymCloud.GetSorted(previous, wordToSortBy));\r\n  }, [wordToSortBy]);\r\n\r\n  //build color normals for clouds\r\n  const [colorNormals, setColorNormals] = useState(\r\n    new Map<string, ColorNormal>()\r\n  );\r\n  useEffect(() => {\r\n    setColorNormals((previous) => rebuildNormals(clouds, colorMap, previous));\r\n  }, [clouds, colorMap]);\r\n\r\n  //get tileLimit value out of memory\r\n  const [tileLimit, setTileLimit] = useState(DEFAULT_TILE_LIMIT);\r\n  useEffect(() => {\r\n    const loadTilelimit = () => {\r\n      GetStringFromStorage(StringTypesEnum.TileCount).then((value) =>\r\n        setTileLimit(parseInt(value) ?? DEFAULT_TILE_LIMIT)\r\n      );\r\n    };\r\n    loadTilelimit();\r\n    const subscription = DeviceEventEmitter.addListener(\r\n      EventsEnum.TileCountChanged,\r\n      loadTilelimit\r\n    );\r\n    return () => subscription.remove();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const hiddenCount = Math.max(clouds.length - tileLimit, 0);\r\n    const toolTipText = hiddenCount == 0 ? \"\" : `Hidden: ${hiddenCount}`;\r\n    showTooltip?.(toolTipText);\r\n  }, [showTooltip, tileLimit, clouds]);\r\n\r\n  const styleWord = React.useMemo(\r\n    () => ({ zIndex: (style?.zIndex ?? 0) + 1 }),\r\n    [style?.zIndex]\r\n  );\r\n\r\n  const cloudComponents = clouds\r\n    .slice(-tileLimit)\r\n    .map((cloud) => (\r\n      <SynonymWord\r\n        key={cloud.name}\r\n        word={cloud.name}\r\n        colorNormal={colorNormals.get(cloud.name)}\r\n        onPress={addNewWord}\r\n        onLongPress={addAndHiglight}\r\n        style={styleWord}\r\n      />\r\n    ));\r\n\r\n  return (\r\n    <ScrollView\r\n      keyboardShouldPersistTaps=\"handled\"\r\n      style={{ zIndex: style?.zIndex ?? 0 }}\r\n      fadingEdgeLength={1}\r\n      snapToEnd={true}\r\n      contentContainerStyle={styles.synonymScrollContainer}\r\n    >\r\n      {Platform.OS == \"android\" ? (\r\n        <Transitioning.View\r\n          ref={transitionViewRef}\r\n          style={styles.innerView}\r\n          transition={transition}\r\n        >\r\n          {cloudComponents}\r\n        </Transitioning.View>\r\n      ) : (\r\n        <View style={styles.innerView}>{cloudComponents}</View>\r\n      )}\r\n    </ScrollView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  innerView: {\r\n    flex: 1,\r\n    flexDirection: \"row\",\r\n    flexWrap: \"wrap\",\r\n    justifyContent: \"space-around\",\r\n    alignContent: \"center\",\r\n    alignItems: \"center\",\r\n    gap: 7,\r\n  },\r\n  synonymScrollContainer: {\r\n    flexGrow: 1,\r\n    columnGap: 100,\r\n    paddingVertical: 5,\r\n  },\r\n});\r\n\r\n//compares old normal map with a new colormap, creates new normals when required\r\nfunction rebuildNormals(\r\n  clouds: SynonymCloud[],\r\n  newColorMap: Map<string, string>,\r\n  oldNormals: Map<string, ColorNormal>\r\n) {\r\n  const map = new Map<string, ColorNormal>();\r\n  clouds.forEach((cloud) => {\r\n    const oldNormal = oldNormals.get(cloud.name);\r\n    const newNormal = new ColorNormal(cloud.GetWordNormal(), newColorMap);\r\n    if (!newNormal.IsValid) return;\r\n    map.set(\r\n      cloud.name,\r\n      oldNormal?.isEqualTo(newNormal) ? oldNormal : newNormal\r\n    );\r\n  });\r\n  return map;\r\n}\r\n\r\nconst transition = <Transition.Change durationMs={100} />;\r\n\r\nconst DEFAULT_TILE_LIMIT = 30;\r\n\r\nexport default SynonymList;\r\n","//data returned from parser\r\nexport type APIReturnData = SynonymDefinition[];\r\nexport type SynonymDefinition = SynonymSet[];\r\nexport type SynonymSet = Set<string>;\r\n\r\n//processed response from api with an additional field for web response status\r\nexport type APIResponse = SuccessResponse | ErrorResponse;\r\ninterface SuccessResponse {\r\n  type: \"success\";\r\n  data: APIReturnData;\r\n}\r\n\r\ninterface ErrorResponse {\r\n  type: \"error\";\r\n  errorMessage: string;\r\n}\r\n\r\nexport enum APIErrorEnum {\r\n  WrongAPIkey = \"Server denies request, check API key\",\r\n  NoWord = \"No word in the database\",\r\n}\r\n","import { APIResponse } from \"./data/apiResponse\";\r\n\r\n//fetches information about a word from an API and parses it into a synonym\r\nexport default class Dictionary {\r\n  constructor(\r\n    private fetcher: Fetcher,\r\n    private parser: Parser,\r\n    private normalizer?: Normalizer\r\n  ) {}\r\n\r\n  GetSynonyms(word: string) {\r\n    word = this.normalizer ? this.normalizer.NormalizeWord(word) : word;\r\n    return this.fetcher.FetchData(word).then((data) => {\r\n      return this.parser.ParseData(data, word);\r\n    });\r\n  }\r\n}\r\n\r\nexport interface Fetcher {\r\n  FetchData(word: string): Promise<string>;\r\n}\r\n\r\nexport interface Parser {\r\n  ParseData(response: string, targetWord: string): APIResponse;\r\n}\r\n\r\nexport interface Normalizer {\r\n  NormalizeWord(word: string): string;\r\n}\r\n\r\nexport enum DictionaryType {\r\n  Self = \"Default\",\r\n  Meriam = \"MeriamWebster\",\r\n  Datamuse = \"Datamuse\",\r\n}\r\n\r\nexport const DictionaryKeyRequirement = {\r\n  [DictionaryType.Self]: false,\r\n  [DictionaryType.Meriam]: true,\r\n  [DictionaryType.Datamuse]: false,\r\n};\r\n","import { APIErrorEnum, APIResponse } from \"./data/apiResponse\";\r\nimport Dictionary, { Fetcher, Normalizer, Parser } from \"./dictionary\";\r\n\r\n//dictionary components for datamuse.com API\r\nexport default function BuildDatamuse(): Dictionary {\r\n  return new Dictionary(\r\n    new DatamuseFetcher(),\r\n    new DatamuseParser(),\r\n    new DatamuseNormalizer()\r\n  );\r\n}\r\n\r\nexport class DatamuseParser implements Parser {\r\n  public ParseData(response: string): APIResponse {\r\n    try {\r\n      const parsed = JSON.parse(response);\r\n      if (parsed.length == 0 || parsed[0]?.word == undefined)\r\n        throw new Error(APIErrorEnum.NoWord);\r\n\r\n      const sets: Set<string>[] = parsed.map(\r\n        (definition) => new Set<string>([definition.word])\r\n      );\r\n\r\n      return { type: \"success\", data: [sets] };\r\n    } catch (error) {\r\n      return { type: \"error\", errorMessage: error.message };\r\n    }\r\n  }\r\n}\r\n\r\nexport class DatamuseFetcher implements Fetcher {\r\n  public async FetchData(word: string): Promise<string> {\r\n    word.replace(\" \", \"_\");\r\n    const response = await fetch(\r\n      `https://api.datamuse.com/words?rel_syn=${word}`\r\n    );\r\n\r\n    if (!response.ok)\r\n      throw new Error(`Something went wrong: ${response.status}`);\r\n\r\n    const text = await response.text();\r\n\r\n    if (!text) throw new Error(\"Empty response\");\r\n\r\n    return text;\r\n  }\r\n}\r\n\r\nexport class DatamuseNormalizer implements Normalizer {\r\n  public NormalizeWord(word: string): string {\r\n    return word.replace(\" \", \"_\");\r\n  }\r\n}\r\n","import {\r\n  APIReturnData,\r\n  APIErrorEnum,\r\n  APIResponse,\r\n  SynonymDefinition,\r\n} from \"./data/apiResponse\";\r\nimport Dictionary, { Fetcher, Parser } from \"./dictionary\";\r\n\r\n//dictionary components for MeriamWebster api\r\nexport default function BuildMeriam(apiKey: string): Dictionary {\r\n  return new Dictionary(new MeriamFetcher(apiKey), new MeriamParser());\r\n}\r\n\r\nexport class MeriamParser implements Parser {\r\n  public ParseData(response: string, targetWord: string): APIResponse {\r\n    if (detectWrongKey(response))\r\n      return {\r\n        type: \"error\",\r\n        errorMessage: APIErrorEnum.WrongAPIkey,\r\n      };\r\n\r\n    try {\r\n      const parsed = JSON.parse(response);\r\n      const data: APIReturnData = [];\r\n      if (parsed.length == 0 || parsed[0].meta == undefined)\r\n        throw new Error(APIErrorEnum.NoWord);\r\n      parsed\r\n        .filter((collection) => collection.meta.id == targetWord)\r\n        .forEach((definitionJSON) => {\r\n          const definition: SynonymDefinition = [];\r\n          definitionJSON.meta.syns.forEach((synonymList: string[]) => {\r\n            if (synonymList?.length > 0) definition.push(new Set(synonymList));\r\n          });\r\n          data.push(definition);\r\n        });\r\n      return { type: \"success\", data: data };\r\n    } catch (error) {\r\n      return { type: \"error\", errorMessage: error.message };\r\n    }\r\n  }\r\n}\r\n\r\nexport class MeriamFetcher implements Fetcher {\r\n  constructor(private apiKey: string) {}\r\n  public async FetchData(word: string): Promise<string> {\r\n    const response = await fetch(\r\n      `https://www.dictionaryapi.com/api/v3/references/thesaurus/json/${word}?key=${this.apiKey}`\r\n    );\r\n\r\n    if (!response.ok)\r\n      throw new Error(`Something went wrong: ${response.status}`);\r\n\r\n    const text = await response.text();\r\n\r\n    if (!text) throw new Error(\"Empty response\");\r\n\r\n    return text;\r\n  }\r\n}\r\n\r\nfunction detectWrongKey(response: string): boolean {\r\n  return response === \"Invalid API key. Not subscribed for this reference.\";\r\n}\r\n","import * as SecureStore from \"expo-secure-store\";\r\nimport { DictionaryType } from \"./dictionary\";\r\n\r\n//securely handles setting and getting api keys\r\nexport default class Keys {\r\n  static Set(keyType: DictionaryType, key: string) {\r\n    return SecureStore.setItemAsync(secureKeyName(keyType), key);\r\n  }\r\n\r\n  static async Get(keyType: DictionaryType) {\r\n    return SecureStore.getItemAsync(secureKeyName(keyType));\r\n  }\r\n}\r\nconst secureKeyName = (type: string) => \"key-\" + type;\r\n","import BuildDatamuse from \"./datamuse\";\r\nimport BuildMeriam from \"./meriam\";\r\nimport Keys from \"./keyHandling\";\r\nimport Dictionary, {\r\n  DictionaryKeyRequirement,\r\n  DictionaryType,\r\n} from \"./dictionary\";\r\nimport { GetStringFromStorage, SetStringInStorage } from \"./storageHandling\";\r\n\r\n//Getters and setters for dictionary information in local storage\r\nexport async function GetCurrentDictionary(): Promise<Dictionary> {\r\n  const apiType = (await LoadCurrentDictionaryType()) || DictionaryType.Self;\r\n  let key;\r\n\r\n  if (DictionaryKeyRequirement[apiType]) key = await Keys.Get(apiType);\r\n\r\n  switch (apiType) {\r\n    case DictionaryType.Self:\r\n      return BuildDatamuse();\r\n    case DictionaryType.Meriam:\r\n      return BuildMeriam(key);\r\n    case DictionaryType.Datamuse:\r\n      return BuildDatamuse();\r\n  }\r\n}\r\n\r\nconst apiNameKey = \"current_api_name\";\r\nexport async function LoadCurrentDictionaryType() {\r\n  const result = await GetStringFromStorage(apiNameKey);\r\n  return (result as DictionaryType) || DictionaryType.Self;\r\n}\r\n\r\nexport async function SaveCurrentDictionaryType(\r\n  type: DictionaryType,\r\n  key?: string\r\n) {\r\n  const promises: Promise<void>[] = [];\r\n  promises.push(SetStringInStorage(apiNameKey, type));\r\n  if (type != DictionaryType.Self && key) promises.push(Keys.Set(type, key));\r\n\r\n  return Promise.all(promises);\r\n}\r\n","import React, { FC } from \"react\";\r\nimport { Platform, Pressable, StyleSheet, Text, View } from \"react-native\";\r\nimport SynonymCollection from \"../../dictionaries/data/synonymCollection\";\r\nimport Animated, {\r\n  Transition,\r\n  Transitioning,\r\n  TransitioningView,\r\n} from \"react-native-reanimated\";\r\nimport * as Haptics from \"expo-haptics\";\r\nimport MaterialButton from \"../materialButton\";\r\nimport * as Colors from \"../../colors\";\r\n\r\nconst anim = Animated.createAnimatedComponent(View);\r\n//UI element listing selected synonyms\r\ninterface WordListProps {\r\n  synonymArray: SynonymCollection[];\r\n  colorMap: Map<string, string>;\r\n  highlighted: string;\r\n  onPress: (word: string) => void;\r\n  onLongPress: (word: string) => void;\r\n  onClearButton: () => void;\r\n}\r\n\r\nconst WordListView: FC<WordListProps> = ({\r\n  synonymArray,\r\n  colorMap,\r\n  highlighted,\r\n  onPress,\r\n  onLongPress,\r\n  onClearButton,\r\n}) => {\r\n  const transitionReference = React.useRef<TransitioningView>();\r\n\r\n  React.useEffect(() => {\r\n    if (Platform.OS == \"android\")\r\n      transitionReference.current.animateNextTransition();\r\n  }, [synonymArray]);\r\n\r\n  const wordsComponents = synonymArray.map(({ Word, IsEmpty, WasFetched }) => {\r\n    const OVERRIDE_COLOR = !WasFetched || IsEmpty || !colorMap.has(Word);\r\n    const color = OVERRIDE_COLOR ? Colors.DisabledGrey : colorMap.get(Word);\r\n    const highlightedStyle = Word == highlighted ? styles.highlighted : [];\r\n    const getStyle = (pressed: boolean) => ({\r\n      backgroundColor: color,\r\n      ...highlightedStyle,\r\n      opacity: Platform.OS != \"android\" && pressed ? 0.6 : 1,\r\n    });\r\n    return (\r\n      <Pressable\r\n        key={Word}\r\n        android_ripple={{\r\n          color: Colors.BGWhite,\r\n        }}\r\n        style={({ pressed }) => getStyle(pressed)}\r\n        onPress={() => onPress(Word)}\r\n        onLongPress={() => {\r\n          onLongPress(Word);\r\n          if (Platform.OS == \"android\") Haptics.selectionAsync();\r\n        }}\r\n      >\r\n        <Text style={styles.text}>{Word}</Text>\r\n      </Pressable>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      {Platform.OS == \"android\" ? (\r\n        <Transitioning.View\r\n          style={styles.list}\r\n          transition={transition}\r\n          ref={transitionReference}\r\n        >\r\n          {wordsComponents}\r\n        </Transitioning.View>\r\n      ) : (\r\n        <View style={styles.list}>{wordsComponents}</View>\r\n      )}\r\n\r\n      <MaterialButton\r\n        disabled={synonymArray.length == 0}\r\n        name=\"clear\"\r\n        onPress={onClearButton}\r\n        style={{\r\n          backgroundColor: Colors.BGWhite,\r\n          disabledCountourColor: Colors.DisabledGrey,\r\n          countourColor: Colors.CountourColor,\r\n        }}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  text: { fontSize: 20, marginHorizontal: 7, marginVertical: 5 },\r\n  container: {\r\n    paddingVertical: 5,\r\n    flexDirection: \"row\",\r\n    alignItems: \"flex-end\",\r\n  },\r\n  list: {\r\n    flex: 5,\r\n    flexDirection: \"row\",\r\n    justifyContent: \"flex-start\",\r\n    flexWrap: \"wrap\",\r\n    alignSelf: \"stretch\",\r\n    alignContent: \"center\",\r\n    alignItems: \"center\",\r\n    marginHorizontal: 5,\r\n    gap: 5,\r\n  },\r\n\r\n  highlighted: {\r\n    borderWidth: 3,\r\n    borderColor: Colors.CountourColor,\r\n    margin: -3,\r\n  },\r\n});\r\n\r\nconst transition = (\r\n  <Transition.Together>\r\n    <Transition.Change durationMs={200} />\r\n  </Transition.Together>\r\n);\r\n\r\nexport default WordListView;\r\n","import React, { FC } from \"react\";\r\nimport {\r\n  Animated,\r\n  StyleProp,\r\n  StyleSheet,\r\n  Text,\r\n  TouchableOpacity,\r\n  View,\r\n  ViewStyle,\r\n} from \"react-native\";\r\n\r\nimport * as Colors from \"../../colors\";\r\n\r\ninterface HintViewProps {\r\n  style?: StyleProp<ViewStyle>;\r\n  hintText: string;\r\n  onPress: () => void;\r\n}\r\n\r\nconst HintView: FC<HintViewProps> = ({ style, hintText, onPress }) => {\r\n  const animFaded = React.useState(new Animated.Value(0))[0];\r\n\r\n  React.useEffect(() => {\r\n    Animated.timing(animFaded, {\r\n      toValue: 1,\r\n      duration: 1000,\r\n      useNativeDriver: true,\r\n    }).start();\r\n\r\n    return () => {\r\n      Animated.timing(animFaded, {\r\n        toValue: 0,\r\n        duration: 1000,\r\n        useNativeDriver: true,\r\n      }).start();\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <Animated.View style={[{ opacity: animFaded }, styles.view, style]}>\r\n      <TouchableOpacity onPress={onPress}>\r\n        <Text style={{ fontSize: 20 }}>{hintText}</Text>\r\n      </TouchableOpacity>\r\n    </Animated.View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  view: {\r\n    backgroundColor: Colors.BGWhite,\r\n    borderColor: Colors.CountourColor,\r\n    borderRadius: 5,\r\n    borderWidth: 1,\r\n    padding: 6,\r\n  },\r\n});\r\n\r\nexport default HintView;\r\n","import React, { FC } from \"react\";\r\nimport { StyleProp, StyleSheet, View, ViewStyle } from \"react-native\";\r\nimport HintView from \"./hintsView\";\r\n\r\ninterface HintOverlayProps {\r\n  currentHintID: number;\r\n  synonymsExist: boolean;\r\n  onHintPress: () => void;\r\n}\r\n\r\nconst HintOverlay: FC<HintOverlayProps> = ({\r\n  currentHintID,\r\n  synonymsExist,\r\n  onHintPress,\r\n}) => {\r\n  return (\r\n    <View style={styles.overlay} pointerEvents=\"box-none\">\r\n      {currentHintID == 0 && (\r\n        <HintView\r\n          style={{ ...styles.hint, bottom: 130 }}\r\n          hintText=\"Enter a word\"\r\n          onPress={onHintPress}\r\n        />\r\n      )}\r\n\r\n      {currentHintID == 1 && synonymsExist && (\r\n        <HintView\r\n          style={{\r\n            ...styles.hint,\r\n            bottom: \"50%\",\r\n          }}\r\n          hintText=\"Add more related words\"\r\n          onPress={onHintPress}\r\n        />\r\n      )}\r\n\r\n      {currentHintID == 2 && (\r\n        <HintView\r\n          style={{ ...styles.hint, bottom: 120 }}\r\n          hintText=\"Hold selected word to sort the results\"\r\n          onPress={onHintPress}\r\n        />\r\n      )}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  overlay: {\r\n    position: \"absolute\",\r\n    top: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    left: 0,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    fontSize: 24,\r\n    zIndex: 3,\r\n  },\r\n  hint: {\r\n    zIndex: 4,\r\n    position: \"absolute\",\r\n  },\r\n});\r\n\r\nexport default HintOverlay;\r\n","import { APIReturnData } from \"./apiResponse\";\r\nimport Dictionary from \"../dictionary\";\r\n\r\n//Synonym word with fetched api data\r\nexport default class SynonymCollection {\r\n  public Word: string;\r\n  constructor(word: string) {\r\n    this.Word = NormalizeWord(word);\r\n  }\r\n\r\n  public definitionSets: APIReturnData = [];\r\n  private set(value: APIReturnData) {\r\n    this.wasFetched = true;\r\n    this.definitionSets = value;\r\n    this.isEmpty = this.definitionSets.length == 0;\r\n  }\r\n\r\n  public async Load(dictionary: Dictionary) {\r\n    const response = await dictionary.GetSynonyms(this.Word);\r\n    const data = response.type == \"success\" ? response.data : [];\r\n    this.set(data);\r\n    return response;\r\n  }\r\n\r\n  private isEmpty: boolean = false;\r\n  get IsEmpty(): boolean {\r\n    return this.isEmpty;\r\n  }\r\n\r\n  private wasFetched: boolean = false;\r\n  get WasFetched(): boolean {\r\n    return this.wasFetched;\r\n  }\r\n}\r\n\r\nexport function NormalizeWord(word: string) {\r\n  return word\r\n    .replace(/[^a-z0-9\\s-]/gi, \"\")\r\n    .trim()\r\n    .toLowerCase();\r\n}\r\n","import React, { FC } from \"react\";\r\nimport { StyleSheet, Switch, Text, TouchableOpacity, View } from \"react-native\";\r\n\r\n// Toggle with a title\r\ninterface TitledToggleProps {\r\n  title: string;\r\n  state: boolean;\r\n  onValueChange: (state: boolean) => void;\r\n}\r\nconst TitledToggle: FC<TitledToggleProps> = ({\r\n  title,\r\n  state,\r\n  onValueChange,\r\n}) => {\r\n  return (\r\n    <TouchableOpacity\r\n      onPress={() => onValueChange(!state)}\r\n      style={styles.touchable}\r\n    >\r\n      <View style={styles.view}>\r\n        <Switch value={state} onValueChange={() => onValueChange(!state)} />\r\n        <Text style={styles.text}>{title}</Text>\r\n      </View>\r\n    </TouchableOpacity>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  text: { left: 20, fontSize: 16 },\r\n  touchable: { padding: 10 },\r\n  view: { flexDirection: \"row\", alignItems: \"center\" },\r\n});\r\n\r\nexport default TitledToggle;\r\n","import { DeviceEventEmitter, View } from \"react-native\";\r\nimport {\r\n  DictionaryKeyRequirement,\r\n  DictionaryType,\r\n} from \"../../dictionaries/dictionary\";\r\nimport React, { FC } from \"react\";\r\nimport { useToast } from \"react-native-toast-notifications\";\r\n\r\nimport { InputModalEventParams } from \"../inputModal\";\r\nimport { OptionsProps } from \"../../navigation\";\r\nimport { EventsEnum } from \"../../events\";\r\nimport {\r\n  LoadCurrentDictionaryType,\r\n  SaveCurrentDictionaryType,\r\n} from \"../../dictionaries/dictionaryOptions\";\r\nimport TitledToggle from \"../titledToggle\";\r\n\r\ninterface ApiSwitchProps {\r\n  navigation: OptionsProps[\"navigation\"];\r\n}\r\n\r\n//List of toggles to switch API, pops up InputModal for API key\r\nexport const ApiSwitch: FC<ApiSwitchProps> = ({ navigation }) => {\r\n  const toast = useToast();\r\n  const [currentDictionaryType, setCurrentDictionaryType] =\r\n    React.useState<DictionaryType>();\r\n\r\n  React.useEffect(() => {\r\n    LoadCurrentDictionaryType().then((result) =>\r\n      setCurrentDictionaryType(result)\r\n    );\r\n\r\n    //listen to an event from InputModal, change Dictionary and API key on recieve\r\n    const callback = (params: InputModalEventParams) => {\r\n      const { varName, varValue: apiKey } = params;\r\n      const dictionaryType = varName as DictionaryType;\r\n      if (currentDictionaryType != dictionaryType || apiKey) {\r\n        setCurrentDictionaryType(dictionaryType as DictionaryType);\r\n        SaveCurrentDictionaryType(\r\n          dictionaryType as DictionaryType,\r\n          apiKey\r\n        ).then(() => DeviceEventEmitter.emit(EventsEnum.ApiChanged));\r\n      } else {\r\n        toast.show(\r\n          `Please provide an API key to use ${dictionaryType} dictionary`\r\n        );\r\n      }\r\n    };\r\n\r\n    const subscription = DeviceEventEmitter.addListener(\r\n      EventsEnum.ApiKeyEntered,\r\n      callback\r\n    );\r\n    return () => subscription.remove();\r\n  }, []);\r\n\r\n  const apiTogglesData = Object.values(DictionaryType).map((dictionaryType) => {\r\n    return {\r\n      name: dictionaryType,\r\n      state: currentDictionaryType == dictionaryType,\r\n    };\r\n  });\r\n\r\n  const onPressAPIToggle = (dictionaryType: DictionaryType) => {\r\n    const { state: enabled } = apiTogglesData.find(\r\n      (apiToggle) => apiToggle.name == dictionaryType\r\n    );\r\n\r\n    if (DictionaryKeyRequirement[dictionaryType]) {\r\n      navigation.navigate(\"InputModal\", {\r\n        varName: dictionaryType,\r\n        varHint: `API key for ${dictionaryType}`,\r\n        varLink: `https://dictionaryapi.com/`, //todo move into personalized api section\r\n        eventName: EventsEnum.ApiKeyEntered,\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!enabled) {\r\n      setCurrentDictionaryType(dictionaryType);\r\n      SaveCurrentDictionaryType(dictionaryType).then(() =>\r\n        DeviceEventEmitter.emit(EventsEnum.ApiChanged)\r\n      );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      {apiTogglesData.map(({ name, state }) => (\r\n        <TitledToggle\r\n          key={name}\r\n          onValueChange={(state) => {\r\n            onPressAPIToggle(name);\r\n          }}\r\n          state={state}\r\n          title={name}\r\n        />\r\n      ))}\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default ApiSwitch;\r\n","import React, { FC, useRef, useState } from \"react\";\r\nimport { DeviceEventEmitter, StyleSheet, Text, View } from \"react-native\";\r\nimport {\r\n  GetStringFromStorage,\r\n  SetStringInStorage,\r\n  StringTypesEnum,\r\n} from \"../../dictionaries/storageHandling\";\r\nimport Slider from \"@react-native-community/slider\";\r\nimport { EventsEnum } from \"../../events\";\r\nimport { topLeft } from \"@shopify/react-native-skia\";\r\n\r\ninterface TileCountSwitchProps {}\r\n\r\nconst TileCountSwitch: FC<TileCountSwitchProps> = ({}) => {\r\n  const [tileCount, setTileCount] = useState<number>(-1);\r\n  const sliderRef = useRef<any>();\r\n\r\n  if (tileCount == -1)\r\n    GetStringFromStorage(StringTypesEnum.TileCount).then((stringValue) => {\r\n      const numberValue = stringToTilecount(stringValue);\r\n      setTileCount(numberValue);\r\n    });\r\n\r\n  const onValChange = (newVal: number) => {\r\n    SetStringInStorage(StringTypesEnum.TileCount, tilecountToString(newVal));\r\n    setTileCount(newVal);\r\n    DeviceEventEmitter.emit(EventsEnum.TileCountChanged);\r\n  };\r\n  //console.log((sliderRef?.current).value);\r\n\r\n  return (\r\n    <View\r\n      style={{\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <Text> Tile limit</Text>\r\n      <Text> {tileCount > tileValues.max ? \"No limit\" : tileCount}</Text>\r\n      <Slider\r\n        ref={sliderRef}\r\n        style={{\r\n          alignItems: \"center\",\r\n          width: \"90%\",\r\n          height: 40,\r\n        }}\r\n        step={tileValues.step}\r\n        value={tileCount}\r\n        minimumValue={tileValues.min}\r\n        maximumValue={tileValues.uimax}\r\n        onValueChange={onValChange}\r\n        minimumTrackTintColor=\"#FFFFFF\"\r\n        maximumTrackTintColor=\"#000000\"\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({ view: {} });\r\n\r\nfunction tilecountToString(count: number) {\r\n  return (isInfinite(count) ? 1000 : count).toString();\r\n}\r\n\r\nfunction stringToTilecount(count: string) {\r\n  const parsed = parseInt(count) || tileValues.default;\r\n  return isInfinite(parsed) ? tileValues.uimax : parsed;\r\n}\r\n\r\nfunction isInfinite(value) {\r\n  return value >= tileValues.uimax;\r\n}\r\n\r\nconst tileValues = {\r\n  step: 10,\r\n  min: 20,\r\n  max: 70,\r\n  uimax: 80,\r\n  default: 30,\r\n};\r\n\r\nexport default TileCountSwitch;\r\n","import {\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  DeviceEventEmitter,\r\n  TouchableOpacity,\r\n  Platform,\r\n  Linking,\r\n} from \"react-native\";\r\nimport { MaterialIcons } from \"@expo/vector-icons\";\r\nimport Accordion from \"react-native-collapsible/Accordion\";\r\nimport React, { FC, useEffect, useState } from \"react\";\r\nimport ApiSwitch from \"./apiSwitch\";\r\nimport { OptionsProps } from \"../../navigation\";\r\nimport {\r\n  GetStringFromStorage,\r\n  SetStringInStorage,\r\n  StringTypesEnum,\r\n} from \"../../dictionaries/storageHandling\";\r\nimport { EventsEnum } from \"../../events\";\r\nimport TitledToggle from \"../titledToggle\";\r\nimport * as Colors from \"../../colors\";\r\nimport TileCountSwitch from \"./tileCountSwitch\";\r\nimport * as Haptics from \"expo-haptics\";\r\n\r\nconst OptionsScreen: FC<OptionsProps> = ({ navigation, route }) => {\r\n  const { unravel } = route.params ?? { unravel: undefined };\r\n\r\n  useEffect(() => {\r\n    const propIndex = Object.keys(OptionSectionsEnum).indexOf(unravel);\r\n    if (propIndex >= 0) setActiveSessions([propIndex]);\r\n  }, []);\r\n\r\n  const [tileLayout, setTileLayout] = useState(false);\r\n  GetStringFromStorage(StringTypesEnum.TileLayout).then((val) => {\r\n    setTileLayout(val != undefined && val != \"\");\r\n  });\r\n\r\n  const accordionContents = {\r\n    [OptionSectionsEnum.Display]: <TileCountSwitch />,\r\n    [OptionSectionsEnum.API]: <ApiSwitch navigation={navigation} />,\r\n    [OptionSectionsEnum.About]: (\r\n      <Text style={styles.linkText} onPress={() => Linking.openURL(ABOUT_LINK)}>\r\n        {ABOUT_LINK}\r\n      </Text>\r\n    ),\r\n    [OptionSectionsEnum.Hints]: (\r\n      <TouchableOpacity\r\n        style={styles.resetHints}\r\n        onPress={() => {\r\n          if (Platform.OS == \"android\") Haptics.selectionAsync();\r\n          SetStringInStorage(StringTypesEnum.WasLaunched, \"\").then(() =>\r\n            DeviceEventEmitter.emit(EventsEnum.HintsReset)\r\n          );\r\n        }}\r\n      >\r\n        <MaterialIcons name=\"replay-circle-filled\" size={30} />\r\n        <Text style={{ fontSize: 15 }}>Reset Hints</Text>\r\n      </TouchableOpacity>\r\n    ),\r\n  };\r\n\r\n  const renderAccordionHeader = (title, index, isActive) => {\r\n    return (\r\n      <View key={index} style={{ ...styles.header }}>\r\n        {isActive ? (\r\n          <MaterialIcons\r\n            name=\"expand-less\"\r\n            size={24}\r\n            color={Colors.CountourColor}\r\n          />\r\n        ) : (\r\n          <MaterialIcons\r\n            name=\"expand-more\"\r\n            size={24}\r\n            color={Colors.CountourColor}\r\n          />\r\n        )}\r\n        <Text style={styles.title}>{title}</Text>\r\n      </View>\r\n    );\r\n  };\r\n\r\n  const renderAccordingContent = (title) => {\r\n    return (\r\n      <View style={styles.content}>{accordionContents[title]}</View> || null\r\n    );\r\n  };\r\n\r\n  const [activeSessions, setActiveSessions] = React.useState<number[]>([]);\r\n  const updateSections = (activeSections: number[]) => {\r\n    setActiveSessions([...activeSections]);\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      <Accordion\r\n        underlayColor={Colors.BGWhite}\r\n        sections={Object.values(OptionSectionsEnum)}\r\n        activeSections={activeSessions}\r\n        renderHeader={renderAccordionHeader}\r\n        renderContent={renderAccordingContent}\r\n        onChange={updateSections}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n  },\r\n  content: { left: 20, paddingVertical: 20 },\r\n  header: {\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    padding: 16,\r\n  },\r\n  linkText: { fontSize: 15, color: \"blue\" },\r\n  resetHints: {\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    gap: 10,\r\n  },\r\n  title: {\r\n    marginLeft: 16,\r\n    fontSize: 18,\r\n    fontWeight: \"bold\",\r\n  },\r\n});\r\n\r\nconst ABOUT_LINK = \"https://github.com/holyhamster/Synesis/\";\r\nexport enum OptionSectionsEnum {\r\n  Display = \"Display\",\r\n  API = \"API\",\r\n  Hints = \"Hints\",\r\n  About = \"About\",\r\n}\r\n\r\nexport default OptionsScreen;\r\n","import { StatusBar } from \"expo-status-bar\";\r\nimport React, { FC, useCallback, useEffect, useRef, useState } from \"react\";\r\nimport { SafeAreaView } from \"react-native-safe-area-context\";\r\nimport {\r\n  StyleSheet,\r\n  View,\r\n  ActivityIndicator,\r\n  DeviceEventEmitter,\r\n  Text,\r\n  TouchableOpacity,\r\n} from \"react-native\";\r\n\r\nimport WordInputField from \"./wordInputField\";\r\nimport SynonymList from \"./synonymList\";\r\nimport Dictionary from \"../../dictionaries/dictionary\";\r\nimport { HomeProps } from \"../../navigation\";\r\nimport { EventsEnum } from \"../../events\";\r\nimport { GetCurrentDictionary } from \"../../dictionaries/dictionaryOptions\";\r\nimport {\r\n  GetStringFromStorage,\r\n  SetStringInStorage,\r\n  StringTypesEnum,\r\n} from \"../../dictionaries/storageHandling\";\r\nimport WordListView from \"./wordListView\";\r\nimport HintOverlay from \"./hintOverlay\";\r\nimport * as Colors from \"../../colors\";\r\nimport MaterialButton from \"../materialButton\";\r\nimport { useSynonyms } from \"../../dictionaries/data/useSynonyms\";\r\nimport { OptionSectionsEnum } from \"../options/optionsScreen\";\r\n\r\nconst SynonymScreen: FC<HomeProps> = ({ navigation }) => {\r\n  //check if hints need to be shown and listen an event if it changes\r\n  const [showingHint, setShowingHint] = React.useState(-1);\r\n  useEffect(() => {\r\n    const loadHints = () =>\r\n      GetStringFromStorage(StringTypesEnum.WasLaunched).then((value) => {\r\n        if (!value) {\r\n          SetStringInStorage(StringTypesEnum.WasLaunched, \"yes\");\r\n          setShowingHint(0);\r\n        }\r\n      });\r\n\r\n    loadHints();\r\n    const subscription = DeviceEventEmitter.addListener(\r\n      EventsEnum.HintsReset,\r\n      loadHints\r\n    );\r\n\r\n    return () => subscription.remove();\r\n  }, []);\r\n\r\n  //load default dictionary and listen an event if it changes\r\n  const [dictionary, setDictionary] = React.useState<Dictionary>();\r\n  useEffect(() => {\r\n    const loadDictionaryFromMemory = () =>\r\n      GetCurrentDictionary().then((newDictionary) =>\r\n        setDictionary(newDictionary)\r\n      );\r\n\r\n    loadDictionaryFromMemory();\r\n    const subscription = DeviceEventEmitter.addListener(\r\n      EventsEnum.ApiChanged,\r\n      loadDictionaryFromMemory\r\n    );\r\n    return () => subscription.remove();\r\n  }, []);\r\n\r\n  //\r\n  const [highlightedWord, setHighlightedWord] = useState(\"\");\r\n  const onWordRemoval = useCallback(\r\n    (removedWord) => {\r\n      setHighlightedWord((previous) =>\r\n        previous == removedWord ? \"\" : previous\r\n      );\r\n    },\r\n    [setHighlightedWord]\r\n  );\r\n\r\n  const { synonyms, addWord, removeWord, clearWords } = useSynonyms(\r\n    dictionary,\r\n    onWordRemoval\r\n  );\r\n\r\n  const colorRef = useRef(new Map<string, string>());\r\n  colorRef.current = Colors.RebuildColorMap(\r\n    colorRef.current,\r\n    synonyms.map((element) => element.Word)\r\n  );\r\n\r\n  //tooltip text at the top of the screen\r\n  const [listTooltip, setListTooltip] = useState(\"\");\r\n\r\n  const addAndHighlight = useCallback(\r\n    (word) => {\r\n      addWord(word);\r\n      setHighlightedWord(word);\r\n    },\r\n    [addWord, setHighlightedWord]\r\n  );\r\n\r\n  const menuSegment = (\r\n    <View style={styles.menuButton}>\r\n      <MaterialButton\r\n        onPress={() => navigation.navigate(\"Options\")}\r\n        name=\"settings\"\r\n        style={{ size: 50 }}\r\n      />\r\n\r\n      {listTooltip != \"\" && (\r\n        <TouchableOpacity\r\n          style={styles.hiddenElementsTooltip}\r\n          onPress={() => {\r\n            navigation.navigate(\"Options\", {\r\n              unravel: OptionSectionsEnum.Display,\r\n            });\r\n          }}\r\n        >\r\n          <Text>{listTooltip}</Text>\r\n        </TouchableOpacity>\r\n      )}\r\n    </View>\r\n  );\r\n\r\n  const wordsBeingFetched =\r\n    synonyms.find((synonym) => !synonym.WasFetched) != null;\r\n\r\n  return (\r\n    <SafeAreaView style={styles.container}>\r\n      <StatusBar style=\"auto\" />\r\n\r\n      <HintOverlay\r\n        onHintPress={() => setShowingHint((previous) => (previous += 1))}\r\n        currentHintID={showingHint}\r\n        synonymsExist={synonyms.length > 0}\r\n      />\r\n\r\n      <SynonymList\r\n        synonyms={synonyms.filter(\r\n          (synonym) => synonym.WasFetched && !synonym.IsEmpty\r\n        )}\r\n        colorMap={colorRef.current}\r\n        addNewWord={addWord}\r\n        addAndHiglight={addAndHighlight}\r\n        wordToSortBy={highlightedWord}\r\n        showTooltip={(tooltip) => setListTooltip(tooltip)}\r\n      />\r\n\r\n      {menuSegment}\r\n\r\n      <View style={styles.connectionIndicator}>\r\n        <ActivityIndicator\r\n          pointerEvents=\"none\"\r\n          animating={wordsBeingFetched}\r\n          size=\"large\"\r\n          color={Colors.CountourColor}\r\n        />\r\n      </View>\r\n\r\n      <View style={styles.selectedList}>\r\n        <WordListView\r\n          synonymArray={synonyms}\r\n          colorMap={colorRef.current}\r\n          highlighted={highlightedWord}\r\n          onClearButton={clearWords}\r\n          onPress={(word) => removeWord(word)}\r\n          onLongPress={(word) => setHighlightedWord(word)}\r\n        />\r\n      </View>\r\n\r\n      <View style={styles.inputContainer}>\r\n        <WordInputField onAddWord={addWord} />\r\n      </View>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  connectionIndicator: {\r\n    position: \"absolute\",\r\n    right: 10,\r\n    top: 50,\r\n    width: 40,\r\n    height: 40,\r\n    zIndex: 1,\r\n  },\r\n\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"white\",\r\n    justifyContent: \"center\",\r\n    alignContent: \"center\",\r\n  },\r\n\r\n  inputContainer: {\r\n    flexDirection: \"row\",\r\n    backgroundColor: Colors.AccentColor,\r\n    paddingVertical: 5,\r\n  },\r\n\r\n  menuButton: {\r\n    flexDirection: \"row\",\r\n    position: \"absolute\",\r\n    left: 10,\r\n    top: 50,\r\n    zIndex: 1,\r\n  },\r\n\r\n  hiddenElementsTooltip: {\r\n    left: 5,\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    borderWidth: 2,\r\n    borderRadius: 15,\r\n    paddingHorizontal: 5,\r\n    backgroundColor: Colors.BGWhite,\r\n  },\r\n  selectedList: {\r\n    backgroundColor: Colors.AccentColor,\r\n    paddingVertical: 5,\r\n  },\r\n});\r\n\r\nexport default SynonymScreen;\r\n","import React, { useEffect, useCallback, useState } from \"react\";\r\nimport SynonymCollection from \"./synonymCollection\";\r\nimport Dictionary from \"../dictionary\";\r\nimport { useToast } from \"react-native-toast-notifications\";\r\n\r\n//react hook that provides tools for interracting with synonym collections\r\nexport function useSynonyms(\r\n  dictionary: Dictionary,\r\n  onRemove?: (word: string) => void\r\n) {\r\n  const [synonyms, setSynonyms] = React.useState<SynonymCollection[]>([]);\r\n  const toast = useToast();\r\n\r\n  useEffect(() => {\r\n    setSynonyms([]);\r\n  }, [dictionary]);\r\n\r\n  const addWord = useCallback(\r\n    (word: string) => {\r\n      setSynonyms((previous) => {\r\n        const newSynonym = new SynonymCollection(word);\r\n        const EMPTY = !newSynonym || newSynonym.Word == \"\";\r\n        const HAS_WORD_ALREADY =\r\n          previous.findIndex(\r\n            (definiton) => definiton.Word == newSynonym.Word\r\n          ) != -1;\r\n\r\n        if (!EMPTY && !HAS_WORD_ALREADY) {\r\n          newSynonym.Load(dictionary).then((result) => {\r\n            if (result.type == \"error\") toast.show(result.errorMessage);\r\n            setSynonyms((previous) => Array.from(previous));\r\n          });\r\n          return [...previous, newSynonym];\r\n        }\r\n        return previous;\r\n      });\r\n    },\r\n    [setSynonyms, dictionary]\r\n  );\r\n\r\n  const removeWord = useCallback(\r\n    (removedWord: string) => {\r\n      setSynonyms((previousSynonyms) => {\r\n        const index = previousSynonyms.findIndex(\r\n          ({ Word }) => Word == removedWord\r\n        );\r\n        if (index < 0) return previousSynonyms;\r\n        onRemove?.(removedWord);\r\n        return [\r\n          ...previousSynonyms.slice(0, index),\r\n          ...previousSynonyms.slice(index + 1),\r\n        ];\r\n      });\r\n    },\r\n    [setSynonyms, onRemove]\r\n  );\r\n\r\n  const clearWords = useCallback(() => setSynonyms([]), [setSynonyms]);\r\n  return { synonyms, addWord, removeWord, clearWords };\r\n}\r\n","import React, { FC } from \"react\";\r\nimport {\r\n  ButtonProps,\r\n  DeviceEventEmitter,\r\n  Linking,\r\n  StyleSheet,\r\n  Text,\r\n  TextInput,\r\n  TextStyle,\r\n  View,\r\n  ViewStyle,\r\n} from \"react-native\";\r\n\r\nimport { InputModalProps } from \"../navigation\";\r\nimport MaterialButton from \"./materialButton\";\r\nimport * as Colors from \"../colors\";\r\n\r\nexport interface InputModalEventParams {\r\n  varName: string;\r\n  varValue: string;\r\n}\r\n\r\n//Modal that asks for a string and launches an event after it has been submitted\r\nconst InputModal: FC<InputModalProps> = ({ navigation, route }) => {\r\n  const { eventName, varName, varHint, varLink } = route.params;\r\n\r\n  const submitValue = (value: string) => {\r\n    const params: InputModalEventParams = { varName: varName, varValue: value };\r\n    DeviceEventEmitter.emit(eventName, params);\r\n  };\r\n\r\n  const [inputText, setInputText] = React.useState(\"\");\r\n  return (\r\n    <View style={styles.parentView}>\r\n      <Text style={styles.hintText}>Enter {varHint ?? \"variable\"}</Text>\r\n      <Text style={styles.linkText} onPress={() => Linking.openURL(varLink)}>\r\n        {varLink}\r\n      </Text>\r\n      <TextInput\r\n        autoFocus={true}\r\n        blurOnSubmit={true}\r\n        value={inputText}\r\n        onChangeText={(text) => {\r\n          setInputText(text);\r\n        }}\r\n        style={styles.input}\r\n        onSubmitEditing={({ nativeEvent }) => {\r\n          const { text } = nativeEvent;\r\n          if (text) {\r\n            submitValue(text);\r\n            navigation.goBack();\r\n          }\r\n        }}\r\n      />\r\n      <View style={styles.buttonView}>\r\n        <MaterialButton\r\n          name=\"clear\"\r\n          onPress={() => navigation.goBack()}\r\n          style={{ size: 50 }}\r\n        />\r\n        <MaterialButton\r\n          name=\"check\"\r\n          onPress={() => submitValue(inputText)}\r\n          style={{ size: 50 }}\r\n        />\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\ninterface InputModalStyleProps {\r\n  buttonView: ViewStyle;\r\n  buttons: ButtonProps;\r\n  input: TextStyle;\r\n  linkText: TextStyle;\r\n  parentView: ViewStyle;\r\n  hintText: TextStyle;\r\n}\r\n\r\nconst styles = StyleSheet.create<InputModalStyleProps>({\r\n  buttonView: { flexDirection: \"row\", gap: 10 },\r\n  buttons: {},\r\n  input: {\r\n    backgroundColor: Colors.BGWhite,\r\n    fontSize: 20,\r\n    width: \"80%\",\r\n    justifyContent: \"center\",\r\n    textAlign: \"center\",\r\n  },\r\n  linkText: { fontSize: 20, color: \"blue\" },\r\n  parentView: {\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n    gap: 10,\r\n    justifyContent: \"center\",\r\n  },\r\n  hintText: { fontSize: 25 },\r\n});\r\nexport default InputModal;\r\n","import React from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\n\nimport SynonymScreen from \"./src/screens/synonyms/synonymScreen\";\nimport OptionsScreen from \"./src/screens/options/optionsScreen\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\nimport InputModal from \"./src/screens/inputModal\";\nimport { CreateStack } from \"./src/navigation\";\nimport { ToastProvider } from \"react-native-toast-notifications\";\n\nconst Stack = CreateStack();\n\nexport default function App() {\n  return (\n    <SafeAreaProvider>\n      <ToastProvider placement=\"center\">\n        <NavigationContainer>\n          <Stack.Navigator>\n            <Stack.Screen\n              name=\"Home\"\n              component={SynonymScreen}\n              options={{ headerShown: false }}\n            />\n            <Stack.Screen name=\"Options\" component={OptionsScreen} />\n            <Stack.Group screenOptions={{ presentation: \"modal\" }}>\n              <Stack.Screen name=\"InputModal\" component={InputModal} />\n            </Stack.Group>\n          </Stack.Navigator>\n        </NavigationContainer>\n      </ToastProvider>\n    </SafeAreaProvider>\n  );\n}\n","import {\r\n  NativeStackScreenProps,\r\n  createNativeStackNavigator,\r\n} from \"@react-navigation/native-stack\";\r\nimport { OptionSectionsEnum } from \"./screens/options/optionsScreen\";\r\n\r\nexport type StackParamList = {\r\n  Home: undefined;\r\n  Options: { unravel?: OptionSectionsEnum };\r\n  InputModal: {\r\n    eventName: string;\r\n    varName: string;\r\n    varHint: string | undefined;\r\n    varLink: string | undefined;\r\n  };\r\n};\r\nexport type HomeProps = NativeStackScreenProps<StackParamList, \"Home\">;\r\nexport type OptionsProps = NativeStackScreenProps<StackParamList, \"Options\">;\r\nexport type InputModalProps = NativeStackScreenProps<\r\n  StackParamList,\r\n  \"InputModal\"\r\n>;\r\n\r\nexport function CreateStack() {\r\n  return createNativeStackNavigator<StackParamList>();\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkweb\"] = self[\"webpackChunkweb\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [709], () => (__webpack_require__(9386)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["getFreeColor","takenColors","set","Set","colors","color","delete","size","Math","floor","random","length","Array","from","DisabledGrey","BGWhite","AccentColor","CountourColor","defaultCountour","defaultBackground","defaultDisabled","defaultSize","styles","StyleSheet","inputButton","alignItems","borderWidth","borderRadius","marginHorizontal","_ref","disabled","style","name","onPress","bgColor","backgroundColor","counterColor","disabledCountourColor","countourColor","_jsx","TouchableOpacity","_objectSpread","borderColor","children","MaterialIcons","container","flex","flexDirection","inputHolder","justifyContent","inputText","fontSize","width","textAlign","onAddWord","_React$useState","React","_React$useState2","_slicedToArray","setInputText","onSubmitEditing","newText","inputButtonDisabled","_jsxs","View","TextInput","autoFocus","blurOnSubmit","value","onChangeText","text","event","nativeEvent","MaterialButton","WordNormal","_Array","_inherits","_super","_createSuper","_classCallCheck","call","_createClass","key","connections","sum","normal","connectionWeights","dWeigh","forEach","_","push","valueLeft","valueSetAside","emptyDimensions","emptyDimensionPenalty","ln","i","remainingParts","map","weight","index","CalculateWeights","_ref2","word","mentions","val","parseFloat","toFixed","copy","_toConsumableArray","_wrapNativeSuper","SynonymCloud","Map","connectionSum","order","this","nullCache","existingDimensions","get","normalCache","undefined","wordMapCache","Build","Copy","_this","GetWordNormal","clouds","result","sort","a","b","GetWordMap","Rectangle","left","bottom","height","Lerp","progress","start","end","spliceRect","rects","prevRect","splice","Gradient","_len","arguments","items","_key","apply","concat","colorSection","ColorNormal","wordNormal","colorMap","validated","array","wordColor","IsValid","sections","pair","_construct","backgroundColorValue","ibackground","lerpWorklet","_f","_closure","asString","__workletHash","__location","animationProgress","transition","dataKey","registerTransitionUpdates","transitionRef","useSharedValue","useEffect","newTransition","staticStyle","useMemo","position","animatedStyle","useAnimatedStyle","_transitionRef$value","__optimalization","Animated","GetTransitionsKeys","rect","_colors$get","colorCount","view","DEFAULT_ANIMATION_LENGTH","colorNormal","animationLength","_useValueSynchronizer","keyExtractor","values","setValues","_React$useState3","_React$useState4","keys","setKeys","setters","current","has","removeUnusedSetters","registerSetter","setter","setArray","newArray","callback","newKeys","previous","_setters$current$get","useValueSynchronizer","setTransitions","transitions","restartAnimation","useCallback","duration","isNaN","withTiming","_AlignRectangles","_start$","_end$","startLength","endLength","defHeight","max","_start$i","_end$i","_start$i2","_end","_end$i2","_start","AlignRectangles","rect1","rect2","filter","ToGradient","ToRectangle","_AlignRectangles2","newStart","newTarget","newRects","id","AnimatedRect","SynonymWord","memo","onLongPress","propStyle","_useState","useState","_useState2","layoutSize","setLayoutSize","_useState3","_useState4","highlighted","_colorNormal$getDomin","_ref2$zIndex","zIndex","chart","getDominantColor","touchOverlay","top","right","opacity","margin","toValue","useNativeDriver","Pressable","android_ripple","Colors","foreground","_ref4","pressed","Platform","onLayout","_ref3","layout","ColorChart","Text","EventsEnum","GetStringFromStorage","_x","_GetStringFromStorage","_asyncToGenerator","storageString","AsyncStorage","SetStringInStorage","_x2","_x3","_SetStringInStorage","StringTypesEnum","innerView","flexWrap","alignContent","gap","synonymScrollContainer","flexGrow","columnGap","paddingVertical","Transition","durationMs","DEFAULT_TILE_LIMIT","_style$zIndex2","synonyms","wordToSortBy","addNewWord","addAndHiglight","showTooltip","transitionViewRef","useRef","setClouds","newClouds","GetSorted","collections","allKeywords","synonymCollection","Word","getCloud","cloud","addConnectionToSet","keyWord","setWord","includes","addConnection","collection","definition","definitionSets","synonymSet","synonymList2","CrossReference","_transitionViewRef$cu","animateNextTransition","animateTransition","colorNormals","setColorNormals","newColorMap","oldNormals","oldNormal","newNormal","isEqualTo","rebuildNormals","_useState5","_useState6","tileLimit","setTileLimit","loadTilelimit","TileCount","then","_parseInt","parseInt","subscription","DeviceEventEmitter","TileCountChanged","remove","hiddenCount","styleWord","_style$zIndex","cloudComponents","slice","ScrollView","keyboardShouldPersistTaps","fadingEdgeLength","snapToEnd","contentContainerStyle","Transitioning","ref","APIErrorEnum","Dictionary","fetcher","parser","normalizer","NormalizeWord","FetchData","data","ParseData","DictionaryType","DictionaryKeyRequirement","_DictionaryKeyRequire","_defineProperty","Self","Meriam","Datamuse","BuildDatamuse","DatamuseFetcher","DatamuseParser","DatamuseNormalizer","response","_parsed$","parsed","JSON","parse","Error","NoWord","type","error","errorMessage","message","_FetchData","replace","fetch","ok","status","MeriamParser","targetWord","detectWrongKey","WrongAPIkey","meta","definitionJSON","syns","synonymList","MeriamFetcher","apiKey","Keys","keyType","SecureStore","setItemAsync","secureKeyName","_Get","getItemAsync","_GetCurrentDictionary","apiType","LoadCurrentDictionaryType","Get","apiNameKey","_LoadCurrentDictionaryType","SaveCurrentDictionaryType","_SaveCurrentDictionaryType","promises","Promise","all","marginVertical","list","alignSelf","synonymArray","onClearButton","transitionReference","wordsComponents","IsEmpty","WasFetched","highlightedStyle","getStyle","Haptics","selectionAsync","padding","hintText","animFaded","overlay","hint","currentHintID","synonymsExist","onHintPress","pointerEvents","HintView","SynonymCollection","isEmpty","wasFetched","trim","toLowerCase","_Load","dictionary","GetSynonyms","touchable","title","state","onValueChange","Switch","navigation","toast","useToast","currentDictionaryType","setCurrentDictionaryType","ApiKeyEntered","params","varName","varValue","dictionaryType","ApiChanged","show","apiTogglesData","Object","TitledToggle","enabled","find","apiToggle","navigate","varHint","varLink","eventName","onPressAPIToggle","isInfinite","tileValues","uimax","step","min","default","_objectDestructuringEmpty","tileCount","setTileCount","sliderRef","stringValue","numberValue","count","stringToTilecount","Slider","minimumValue","maximumValue","newVal","toString","minimumTrackTintColor","maximumTrackTintColor","content","header","linkText","resetHints","marginLeft","fontWeight","ABOUT_LINK","OptionSectionsEnum","_route$params","_accordionContents","unravel","route","propIndex","indexOf","setActiveSessions","setTileLayout","TileLayout","accordionContents","Display","TileCountSwitch","API","ApiSwitch","About","Linking","Hints","WasLaunched","HintsReset","activeSessions","Accordion","underlayColor","activeSections","renderHeader","isActive","renderContent","onChange","connectionIndicator","inputContainer","menuButton","hiddenElementsTooltip","paddingHorizontal","selectedList","showingHint","setShowingHint","loadHints","setDictionary","loadDictionaryFromMemory","GetCurrentDictionary","newDictionary","highlightedWord","setHighlightedWord","_useSynonyms","onRemove","setSynonyms","addWord","newSynonym","EMPTY","HAS_WORD_ALREADY","findIndex","definiton","Load","removeWord","removedWord","previousSynonyms","clearWords","useSynonyms","colorRef","oldMap","add","newColormap","element","listTooltip","setListTooltip","addAndHighlight","menuSegment","wordsBeingFetched","synonym","SafeAreaView","StatusBar","HintOverlay","SynonymList","tooltip","ActivityIndicator","animating","WordListView","WordInputField","buttonView","buttons","input","parentView","submitValue","goBack","Stack","createNativeStackNavigator","App","SafeAreaProvider","ToastProvider","placement","NavigationContainer","Navigator","Screen","component","SynonymScreen","options","headerShown","OptionsScreen","Group","screenOptions","presentation","InputModal","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","loaded","__webpack_modules__","m","deferred","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","every","r","n","getter","__esModule","d","leafPrototypes","getProto","getPrototypeOf","obj","t","mode","ns","create","def","getOwnPropertyNames","o","defineProperty","enumerable","g","globalThis","Function","e","window","prop","prototype","hasOwnProperty","Symbol","toStringTag","nmd","paths","p","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}