{"version":3,"file":"static/js/main.33626805.js","mappings":"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","sources":["src/screens/synonyms/colorChart/animatedRectangle.tsx","src/screens/synonyms/colorChart/rectangle.ts","src/screens/synonyms/colorChart/rectangleTransition.ts","src/screens/synonyms/colorChart/colorChart.tsx","src/useValueSynchronizer.ts","src/colors.ts","src/screens/synonyms/synonymWord.tsx","src/events.ts","src/dictionaries/storageHandling.ts","src/screens/synonyms/backgroundImage.tsx","src/dictionaries/data/wordNormal.ts","src/dictionaries/data/synonymCloud.ts","src/screens/synonyms/colorChart/gradient.ts","src/screens/synonyms/colorChart/colorNormal.ts","src/dictionaries/data/useClouds.ts","src/screens/synonyms/synonymList.tsx","src/dictionaries/data/apiResponse.ts","src/dictionaries/dictionary.ts","src/dictionaries/datamuse.ts","src/dictionaries/meriam.ts","src/dictionaries/keyHandling.ts","src/dictionaries/bighugelabs.ts","src/dictionaries/dictionaryLoading.ts","src/dictionaries/data/synonymCollection.ts","src/screens/materialButton.tsx","src/screens/synonyms/controlPanel.tsx","src/screens/synonyms/useHints.tsx","src/screens/synonyms/synonymScreen.tsx","src/dictionaries/data/useSynonyms.ts","src/useCachedMemo.ts","src/screens/titledToggle.tsx","src/screens/options/apiSwitch.tsx","src/screens/options/cloudCountSwitch.tsx","src/screens/options/optionsScreen.tsx","src/screens/inputModal.tsx","App.tsx","src/navigation.ts","webpack/bootstrap","webpack/runtime/chunk loaded","webpack/runtime/compat get default export","webpack/runtime/create fake namespace object","webpack/runtime/define property getters","webpack/runtime/global","webpack/runtime/hasOwnProperty shorthand","webpack/runtime/make namespace object","webpack/runtime/node module decorator","webpack/runtime/publicPath","webpack/runtime/jsonp chunk loading","webpack/startup"],"sourcesContent":["import React, { FC, useEffect, useMemo } from \"react\";\r\nimport Animated, {\r\n  SharedValue,\r\n  useAnimatedStyle,\r\n  useSharedValue,\r\n} from \"react-native-reanimated\";\r\nimport { ViewProps, ViewStyle } from \"react-native\";\r\nimport { RectangleTransition } from \"./rectangleTransition\";\r\n\r\ninterface RectProps {\r\n  transition: RectangleTransition;\r\n  dataKey: string;\r\n  animationProgress: SharedValue<number>;\r\n  style?: ViewProps;\r\n  debugMessages?: boolean;\r\n  registerTransitionUpdates?: (\r\n    id: string,\r\n    val: (RectangleTransition) => void\r\n  ) => void;\r\n}\r\n\r\n//Views animated to lerp size according to transition and progressValue\r\nconst AnimatedRect: FC<RectProps> = ({\r\n  animationProgress,\r\n  transition,\r\n  style,\r\n  dataKey,\r\n  registerTransitionUpdates,\r\n}) => {\r\n  const transitionRef = useSharedValue<RectangleTransition>(transition);\r\n\r\n  useEffect(() => {\r\n    const updateTransition = (newTransition: RectangleTransition) =>\r\n      (transitionRef.value = newTransition);\r\n    registerTransitionUpdates?.(dataKey, updateTransition);\r\n  }, [dataKey, registerTransitionUpdates]);\r\n\r\n  const staticStyle: Animated.AnimateStyle<ViewStyle> = useMemo(\r\n    () => ({\r\n      position: \"absolute\",\r\n      ...style,\r\n    }),\r\n    [style]\r\n  );\r\n\r\n  //runs on the UI threat every time animation progress changes\r\n  const animatedStyle =\r\n    useAnimatedStyle((): Animated.AnimateStyle<ViewStyle> => {\r\n      const { start, end } = transitionRef.value;\r\n      const { value } = animationProgress;\r\n      return {\r\n        ...staticStyle,\r\n        left: lerpWorklet(value, start.left, end.left),\r\n        bottom: lerpWorklet(value, start.bottom, end.bottom),\r\n        width: lerpWorklet(value, start.width, end.width),\r\n        height: lerpWorklet(value, start.height, end.height),\r\n        backgroundColor: end.color,\r\n      };\r\n    }, [animationProgress]);\r\n\r\n  return <Animated.View style={animatedStyle} />;\r\n};\r\n\r\n//interpolates arrays of values on a UI thread\r\nfunction lerpWorklet(progress: number, start: number, end: number) {\r\n  \"worklet\";\r\n  return (1 - progress) * start + progress * end;\r\n}\r\n\r\nexport default AnimatedRect;\r\n","export default class Rectangle {\r\n  constructor(\r\n    public left: number,\r\n    public bottom: number,\r\n    public width: number,\r\n    public height: number,\r\n    public color: string\r\n  ) {}\r\n\r\n  static Zero() {\r\n    return { left: 0, bottom: 0, width: 0, height: 0, color: \"white\" };\r\n  }\r\n}\r\n\r\nexport function RectToString(rect: Rectangle, fixedDecimals = 10) {\r\n  return `L: ${rect.left.toFixed(fixedDecimals)} B: ${rect.bottom.toFixed(\r\n    fixedDecimals\r\n  )} W: ${rect.width} H:${rect.height} C:${rect.color}`;\r\n}\r\n\r\nexport function LerpRectangles(\r\n  progress: number,\r\n  rect1: Rectangle,\r\n  rect2: Rectangle\r\n) {\r\n  return new Rectangle(\r\n    Lerp(progress, rect1.left, rect2.left),\r\n    Lerp(progress, rect1.bottom, rect2.bottom),\r\n    Lerp(progress, rect1.width, rect2.width),\r\n    Lerp(progress, rect1.height, rect2.height),\r\n    rect2.color\r\n  );\r\n}\r\n\r\nfunction Lerp(progress: number, start: number, end: number) {\r\n  return (1 - progress) * start + progress * end;\r\n}\r\n\r\n//matches arrays of rectangles index to index by color, by inserting new 0-width rectangles when colors differ\r\nexport function AlignRectangles(\r\n  start: Rectangle[],\r\n  end: Rectangle[]\r\n): [startRects: Rectangle[], endRects: Rectangle[]] {\r\n  start = Array.from(start);\r\n  end = Array.from(end);\r\n  let startLength = start.length;\r\n  let endLength = end.length;\r\n  const defHeight = start[0]?.height || end[0]?.height || 0;\r\n\r\n  for (let i = 0; i < Math.max(startLength, endLength); i += 1) {\r\n    if (start[i]?.color === end[i]?.color) continue;\r\n    //find matching colors for a transition\r\n    if (startLength <= i || start[i]?.color == end[i + 1]?.color) {\r\n      spliceRect(start, i, defHeight, end[i].color);\r\n      startLength += 1;\r\n    } else if (endLength <= i || end[i]?.color == start[i + 1]?.color) {\r\n      spliceRect(end, i, defHeight, start[i].color);\r\n      endLength += 1;\r\n    }\r\n    //didn't find matches, insert new colors into each array set\r\n    else {\r\n      spliceRect(start, i, defHeight, end[i].color);\r\n      spliceRect(end, i + 1, defHeight, start[i + 1].color);\r\n      startLength += 1;\r\n      endLength += 1;\r\n    }\r\n  }\r\n  return [start, end];\r\n}\r\n\r\n//insert a width-0 rectangle of color\r\nexport function spliceRect(\r\n  rects: Rectangle[],\r\n  index: number,\r\n  height: number,\r\n  color: string\r\n) {\r\n  const prevRect = rects[index - 1];\r\n  const left = prevRect ? prevRect.left + prevRect.width : 0;\r\n  rects.splice(index, 0, {\r\n    left: left,\r\n    width: 0,\r\n    height: height,\r\n    bottom: 0,\r\n    color: color,\r\n  });\r\n}\r\n","import Rectangle from \"./rectangle\";\r\n\r\nexport type RectangleTransition = { start: Rectangle; end: Rectangle };\r\n\r\n//Gives rectangle a unique identifier based on its color\r\nexport function GetTransitionsKeys(rects: RectangleTransition[]) {\r\n  const result = new Map<string, RectangleTransition>();\r\n  const colors = new Map<string, number>();\r\n  rects.forEach((rect) => {\r\n    const color = rect.end.color;\r\n    const colorCount = 1 + (colors.get(color) ?? 0);\r\n    colors.set(color, colorCount);\r\n    result.set(color + colorCount, rect);\r\n  });\r\n  return result;\r\n}\r\n","import React, { FC, useCallback, useEffect } from \"react\";\r\nimport { StyleSheet, View, ViewStyle } from \"react-native\";\r\nimport { useSharedValue, withTiming } from \"react-native-reanimated\";\r\n\r\nimport ColorNormal from \"./colorNormal\";\r\nimport AnimatedRect from \"./animatedRectangle\";\r\nimport {\r\n  AlignRectangles as AlignRectangles,\r\n  LerpRectangles as LerpRectangles,\r\n} from \"./rectangle\";\r\nimport { GetTransitionsKeys, RectangleTransition } from \"./rectangleTransition\";\r\nimport { useValueSynchronizer } from \"../../../useValueSynchronizer\";\r\n\r\ninterface ColorChartProps {\r\n  colorNormal: ColorNormal;\r\n  animationLength?: number;\r\n  size: { height: number; width: number };\r\n  style?: ViewStyle;\r\n}\r\n\r\n//Takes in a ColorNormal, draws a rectangle chart with sharp gradients according to it\r\n//if passed a different ColorNormal, will animate transition to it\r\nconst ColorChart: FC<ColorChartProps> = ({\r\n  colorNormal,\r\n  animationLength,\r\n  size,\r\n  style,\r\n}) => {\r\n  const {\r\n    registerCallback,\r\n    keys,\r\n    setArray: setTransitions,\r\n    array: transitions,\r\n  } = useValueSynchronizer<RectangleTransition>(GetTransitionsKeys);\r\n\r\n  const animationProgress = useSharedValue(1);\r\n  const restartAnimation = useCallback(() => {\r\n    const duration = isNaN(animationLength)\r\n      ? DEFAULT_ANIMATION_LENGTH\r\n      : animationLength;\r\n    animationProgress.value = 0;\r\n    animationProgress.value = withTiming(1, {\r\n      duration: duration,\r\n    });\r\n  }, [animationLength]);\r\n\r\n  //calculate starting and ending rectangles when normal changes\r\n  useEffect(() => {\r\n    if (!colorNormal?.IsValid) return;\r\n    //get current rectangles according to animation progress\r\n    const currentRects = transitions\r\n      .map(({ start, end }) =>\r\n        LerpRectangles(animationProgress.value, start, end)\r\n      )\r\n      .filter((rect) => rect.width != 0);\r\n\r\n    //calculate new start and end between current\r\n    const normalRectangles = colorNormal.ToGradient().ToRectangle(size);\r\n    const [newStart, newTarget] = AlignRectangles(\r\n      currentRects,\r\n      normalRectangles\r\n    );\r\n\r\n    const newTransitions: RectangleTransition[] = newStart.map((_, index) => ({\r\n      start: newStart[index],\r\n      end: newTarget[index],\r\n    }));\r\n\r\n    setTransitions((previous: RectangleTransition[]) => {\r\n      if (previous.length) restartAnimation();\r\n      return newTransitions;\r\n    });\r\n  }, [colorNormal, size, setTransitions]);\r\n\r\n  return (\r\n    <View style={[styles.view, style]}>\r\n      {Array.from(keys.keys()).map((id) => (\r\n        <AnimatedRect\r\n          transition={keys.get(id)}\r\n          dataKey={id}\r\n          key={id}\r\n          animationProgress={animationProgress}\r\n          registerTransitionUpdates={registerCallback}\r\n        />\r\n      ))}\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  view: {\r\n    flexDirection: \"row\",\r\n    position: \"absolute\",\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n});\r\n\r\nconst DEFAULT_ANIMATION_LENGTH = 1000;\r\n\r\nexport default ColorChart;\r\n","import React from \"react\";\r\n\r\n//maintains an array of variables and accompanying callbacks that are called syncronously when the value is changed\r\n\r\n//Key extractor must produce a unique key for each of the variable\r\n//setters are paired to a variable through a key\r\n//when the variables are updated, accompanying setters are called with an updated variable\r\nexport function useValueSynchronizer<T>(\r\n  keyProducer: (array: T[]) => Map<string, T>\r\n) {\r\n  const [array, setArray] = React.useState<T[]>([]);\r\n\r\n  //used to identify callbacks in an array\r\n  const [keys, setKeys] = React.useState(keyProducer(array));\r\n\r\n  //callbacks are stored along their keys and called when the value is updated\r\n  type Callback = (val: T) => void;\r\n\r\n  const callbacks = React.useRef(new Map<string, Callback>());\r\n  const registerCallback = React.useCallback(\r\n    (key: string, callback: Callback) => {\r\n      callbacks.current.set(key, callback);\r\n    },\r\n    []\r\n  );\r\n\r\n  //if callbacks keys are not in the key array, delete them\r\n  removeMissingMapEntries(callbacks.current, keys);\r\n\r\n  //sets the value to state, calls all callbacks with the new value\r\n  const setArrayAndUpdate = React.useCallback(\r\n    (arrayOrCallback: T[] | ((previous) => T[])) => {\r\n      setArray((previous: T[]) => {\r\n        const newArray =\r\n          typeof arrayOrCallback == \"function\"\r\n            ? arrayOrCallback(previous)\r\n            : arrayOrCallback;\r\n        const newKeys = keyProducer(newArray);\r\n        newKeys.forEach((value, key) => callbacks.current.get(key)?.(value));\r\n        setKeys(newKeys);\r\n        return newArray;\r\n      });\r\n    },\r\n    [setArray, setKeys, keyProducer]\r\n  );\r\n\r\n  return { array: array, setArray: setArrayAndUpdate, registerCallback, keys };\r\n}\r\n\r\nfunction removeMissingMapEntries<TKey>(\r\n  removeFrom: Map<TKey, any>,\r\n  missingFrom: Map<TKey, any>\r\n) {\r\n  removeFrom.forEach((_, key) => {\r\n    if (!missingFrom.has(key)) removeFrom.delete(key);\r\n  });\r\n}\r\n","export function getRandomColor(): string {\r\n  return colors[Math.floor(Math.random() * colors.length)];\r\n}\r\n\r\nfunction getFreeColor(takenColors: string[]): string {\r\n  const set = new Set(colors);\r\n  for (const color of takenColors) set.delete(color);\r\n\r\n  return set.size == 0\r\n    ? getRandomColor()\r\n    : Array.from(set)[Math.floor(Math.random() * set.size)];\r\n}\r\n\r\n//saves values from old map and generates new ones\r\nexport function RebuildColorMap<T>(oldMap: Map<T, string>, keys: T[]) {\r\n  const takenColors = new Set<string>();\r\n  oldMap?.forEach((color, key) => {\r\n    if (keys.includes(key)) takenColors.add(color);\r\n  });\r\n\r\n  const newColormap = new Map<T, string>();\r\n  keys.forEach((key) => {\r\n    const color = oldMap?.get(key) || getFreeColor(Array.from(takenColors));\r\n    newColormap.set(key, color);\r\n    takenColors.add(color);\r\n  });\r\n  return newColormap;\r\n}\r\n\r\nconst colors = [\r\n  \"#B66DFF\",\r\n  \"#FF2A95\",\r\n  \"#FFB6DB\",\r\n  \"#4673FF\",\r\n  \"#00A6A6\",\r\n  \"#8CCAFF\",\r\n  \"#FB6E6E\",\r\n  \"#FFB488\",\r\n  \"#24FF24\",\r\n];\r\nexport const DisabledGrey: string = \"#7A7B7A\";\r\nexport const BGWhite: string = \"#FFFFFF\";\r\nexport const AccentColor: string = \"#eac8f7\";\r\nexport const CountourColor: string = \"#000000\";\r\n","import React, { FC, memo, useState, useMemo } from \"react\";\r\nimport {\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  ViewStyle,\r\n  TextStyle,\r\n  Pressable,\r\n  Platform,\r\n  Animated,\r\n} from \"react-native\";\r\n\r\nimport ColorNormal from \"./colorChart/colorNormal\";\r\nimport ColorChart from \"./colorChart/colorChart\";\r\nimport * as Colors from \"../../colors\";\r\n\r\ninterface SynonymWordProps {\r\n  word: string;\r\n  fontSize: number;\r\n  colorNormal: ColorNormal;\r\n  onPress: (word: string) => void;\r\n  style?: ViewStyle;\r\n}\r\n\r\n//pressable tile with a word and a sharp color gradient for given color normal\r\nconst SynonymWord: FC<SynonymWordProps> = memo(\r\n  ({ colorNormal, word, onPress, style: propStyle, fontSize }) => {\r\n    //run the animation when the component mounts and unmounts\r\n    const viewOpacity = React.useRef(new Animated.Value(0)).current;\r\n    React.useEffect(() => {\r\n      Animated.timing(viewOpacity, {\r\n        toValue: 1,\r\n        duration: 500,\r\n        useNativeDriver: true,\r\n      }).start();\r\n    }, []);\r\n\r\n    const styles = useMemo(() => {\r\n      const { zIndex = 0 } = propStyle ?? {};\r\n      return StyleSheet.create<SynonymWordStyles>({\r\n        chart: { zIndex: zIndex + 1 },\r\n        container: {\r\n          ...propStyle,\r\n          backgroundColor: colorNormal?.getDominantColor() ?? \"white\",\r\n        },\r\n        word: {\r\n          margin: fontSize / 4,\r\n          marginHorizontal: fontSize / 2,\r\n          fontSize: fontSize,\r\n          zIndex: zIndex + 2,\r\n        },\r\n      });\r\n    }, [propStyle]);\r\n\r\n    //size of the tile is calculate via layout event\r\n    const [layoutSize, setLayoutSize] = useState({\r\n      height: 0,\r\n      width: 0,\r\n    });\r\n    const onLayout = ({ nativeEvent }) => {\r\n      setLayoutSize({\r\n        height: nativeEvent.layout.height,\r\n        width: nativeEvent.layout.width,\r\n      });\r\n    };\r\n\r\n    return (\r\n      <Animated.View style={{ opacity: viewOpacity }}>\r\n        <Pressable\r\n          android_ripple={{\r\n            color: Colors.BGWhite,\r\n            foreground: true,\r\n          }}\r\n          onPress={() => onPress(word)}\r\n          style={({ pressed }) => ({\r\n            opacity: Platform.OS != \"android\" && pressed ? 0.6 : 1,\r\n          })}\r\n        >\r\n          <View\r\n            style={styles.container}\r\n            onLayout={layoutSize.width == 0 ? onLayout : undefined}\r\n          >\r\n            {layoutSize.width != 0 && (\r\n              <ColorChart\r\n                colorNormal={colorNormal}\r\n                style={styles.chart}\r\n                size={layoutSize}\r\n              />\r\n            )}\r\n            <Text style={styles.word}>{word}</Text>\r\n          </View>\r\n        </Pressable>\r\n      </Animated.View>\r\n    );\r\n  }\r\n);\r\n\r\ninterface SynonymWordStyles {\r\n  chart: ViewStyle;\r\n  container: ViewStyle;\r\n  word: TextStyle;\r\n}\r\nexport default SynonymWord;\r\n","//events run by DeviceEventEmitter\r\nexport enum EventsEnum {\r\n  ApiKeyEntered = \"api-key-entered\",\r\n  ApiChanged = \"api-changed\",\r\n  LayoutChanged = \"layout-changed\",\r\n  CloudCountChanged = \"cloud-count-changed\",\r\n  HintsReset = \"hints-reset\",\r\n}\r\n","import AsyncStorage from \"@react-native-async-storage/async-storage\";\r\n\r\nexport default class Storage {\r\n  static async GetString(storageString: string) {\r\n    return AsyncStorage.getItem(storageString);\r\n  }\r\n\r\n  static async SetString(storageString: string, value: string) {\r\n    return AsyncStorage.setItem(storageString, value);\r\n  }\r\n}\r\n\r\nexport enum StringTypesEnum {\r\n  WasLaunched = \"WasLaunched\",\r\n  DisabledVisualts = \"DisabledVisuals\",\r\n  TileLayout = \"TileLayout\",\r\n  CloudCount = \"CloudCount\",\r\n}\r\n","import React, { FC } from \"react\";\r\nimport {\r\n  Animated,\r\n  ImageBackground,\r\n  ImageSourcePropType,\r\n  StyleSheet,\r\n  ViewStyle,\r\n} from \"react-native\";\r\n\r\ninterface BackgroundImageProps {\r\n  style?: ViewStyle;\r\n  faded: boolean;\r\n  source: ImageSourcePropType;\r\n  fadeCeiling?: number;\r\n  fadeFloor?: number;\r\n  duration?: number;\r\n}\r\n\r\n//background image with animated opacity\r\nconst BackgroundImage: FC<BackgroundImageProps> = ({\r\n  style,\r\n  faded,\r\n  source,\r\n  fadeFloor,\r\n  fadeCeiling,\r\n  duration,\r\n}) => {\r\n  fadeFloor = isNaN(fadeFloor) ? defaultFadeFloor : fadeFloor;\r\n  fadeCeiling = isNaN(fadeCeiling) ? defaultFadeCeiling : fadeCeiling;\r\n  duration = isNaN(duration) ? defaultDuration : duration;\r\n\r\n  const animatiedOpacity = React.useState(new Animated.Value(fadeCeiling))[0];\r\n  React.useEffect(() => {\r\n    Animated.timing(animatiedOpacity, {\r\n      toValue: faded ? fadeFloor : fadeCeiling,\r\n      duration: duration,\r\n      useNativeDriver: true,\r\n    }).start();\r\n  }, [faded]);\r\n\r\n  return (\r\n    <Animated.View\r\n      style={{ ...style, ...styles.view, opacity: animatiedOpacity }}\r\n    >\r\n      <ImageBackground\r\n        source={source}\r\n        resizeMode=\"center\"\r\n        style={styles.imageBackground}\r\n      ></ImageBackground>\r\n    </Animated.View>\r\n  );\r\n};\r\n\r\nconst defaultFadeCeiling = 0.85;\r\nconst defaultFadeFloor = 0.4;\r\nconst defaultDuration = 1000;\r\n\r\nconst styles = StyleSheet.create({\r\n  view: {\r\n    position: \"absolute\",\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n  },\r\n  imageBackground: { width: \"100%\", height: \"100%\" },\r\n});\r\n\r\nexport default BackgroundImage;\r\n","//normal vector of synonyms for a word\r\n// [{word:\"vague\", value:.5}, {word:\"undefined\", value:.3}, {word:\"inaccurate\", value: .2}]\r\nexport default class WordNormal extends Array<{ word: string; value: number }> {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  public static Copy(copy: WordNormal) {\r\n    return [...copy];\r\n  }\r\n}\r\n\r\n//determines a weight of every dimension of the array for a total amount to be 1\r\n//every next dimension takes a space less than a single unit of the previous one\r\n//[1, 1, 1] => [0.65, 0.25, 0.1]\r\nexport function CalculateWeights(quantities: number[]) {\r\n  const weights: number[] = [];\r\n  const orderWeightIncrease = 0.3;\r\n  let unitWeight = 1;\r\n  let totalWeight = 0;\r\n  for (let i = quantities.length - 1; i >= 0; i--) {\r\n    const currentQ = quantities[i];\r\n    weights[i] = currentQ ? unitWeight : 0;\r\n    if (!currentQ) continue;\r\n\r\n    const columnWeight = unitWeight * currentQ;\r\n    totalWeight += columnWeight;\r\n    unitWeight = Math.ceil(columnWeight * (1 + orderWeightIncrease));\r\n  }\r\n\r\n  return weights.map((val) => (totalWeight ? val / totalWeight : 0));\r\n}\r\n","import SynonymCollection from \"./synonymCollection\";\r\nimport WordNormal, { CalculateWeights } from \"./wordNormal\";\r\n\r\n//a word with connection values to other words\r\nexport default class SynonymCloud {\r\n  //a map of connections to other words\r\n  //connections are stored as an array of numbers,  the lower the index the more important the connection is\r\n  connections = new Map<string, number[]>();\r\n  connectionSum = []; //sums of connections of all words, stored in parallel for performance\r\n  public constructor(public name: string) {}\r\n\r\n  public addConnection(word: string, order: number, strength = 1) {\r\n    this.nullCache();\r\n    const existingDimensions = this.connections.get(word) || [];\r\n    if (existingDimensions.length == 0)\r\n      this.connections.set(word, existingDimensions);\r\n    existingDimensions[order] = (existingDimensions[order] || 0) + strength;\r\n    while (this.connectionSum.length <= order) this.connectionSum.push(0);\r\n    this.connectionSum[order] += strength;\r\n  }\r\n\r\n  private nullCache() {\r\n    this.normalCache = undefined;\r\n    this.wordMapCache = undefined;\r\n  }\r\n\r\n  //gets a map of a normalized n-dimensional vector of connections [\"word1\": 0.25, \"word2\": 0.5, \"word3\": 0.25]\r\n  private normalCache: WordNormal;\r\n  public GetWordNormal() {\r\n    if (!this.normalCache)\r\n      this.normalCache = buildWordNormal(this.connections, this.connectionSum);\r\n    return WordNormal.Copy(this.normalCache);\r\n  }\r\n\r\n  //translates word normal into a map\r\n  private wordMapCache;\r\n  public GetWordMap() {\r\n    if (!this.wordMapCache) {\r\n      this.wordMapCache = new Map();\r\n      this.GetWordNormal().forEach(({ word, value }) =>\r\n        this.wordMapCache.set(word, value)\r\n      );\r\n    }\r\n    return this.wordMapCache;\r\n  }\r\n\r\n  //sorts cloud array by connection strength to a certain word\r\n  public static GetSorted(clouds: SynonymCloud[], word: string) {\r\n    const result = Array.from(clouds);\r\n    if (!word || word == \"\") return result;\r\n    result.sort(\r\n      (a, b) =>\r\n        (b.GetWordMap().get(word) || 0) - (a.GetWordMap().get(word) || 0)\r\n    );\r\n    return result;\r\n  }\r\n}\r\n\r\n//build clouds of synonyms from given collections\r\nexport function CrossReference(collections: SynonymCollection[]) {\r\n  const allKeywords = collections.map(\r\n    (synonymCollection) => synonymCollection.Word\r\n  );\r\n\r\n  const map = new Map<string, SynonymCloud>();\r\n\r\n  const getCloud = (word) => {\r\n    let cloud = map.get(word);\r\n    if (!cloud) {\r\n      cloud = new SynonymCloud(word);\r\n      map.set(word, cloud);\r\n    }\r\n    return cloud;\r\n  };\r\n\r\n  const addConnectionToSet = (\r\n    set: Set<string>,\r\n    keyWord: string,\r\n    order: number\r\n  ) => {\r\n    for (const setWord of set) {\r\n      if (!allKeywords.includes(setWord))\r\n        getCloud(setWord).addConnection(keyWord, order);\r\n    }\r\n  };\r\n\r\n  //compare collections between each other, adding connections to all matching words\r\n  for (const collection of collections)\r\n    for (const definition of collection.definitionSets)\r\n      for (const synonymSet of definition)\r\n        for (const word of synonymSet) {\r\n          //if found a word from main list\r\n          if (allKeywords.includes(word)) {\r\n            //go through synonym list, add 1st degree connection\r\n            addConnectionToSet(synonymSet, word, 1);\r\n\r\n            for (const synonymList2 of definition)\r\n              if (synonymList2 !== synonymSet)\r\n                addConnectionToSet(synonymList2, word, 2);\r\n          } else getCloud(word).addConnection(collection.Word, 0);\r\n        }\r\n\r\n  return map;\r\n}\r\n\r\nfunction buildWordNormal(connections: Map<string, number[]>, sum: number[]) {\r\n  const normal = new WordNormal();\r\n  const connectionWeights = CalculateWeights(sum);\r\n\r\n  for (const [word, mentions] of connections) {\r\n    let val = 0;\r\n    for (let i = 0; i < mentions.length; i++)\r\n      val += connectionWeights[i] * mentions[i] || 0;\r\n\r\n    normal.push({\r\n      word: word,\r\n      value: parseFloat(val.toFixed(5)),\r\n    });\r\n  }\r\n\r\n  return normal;\r\n}\r\n","import Rectangle from \"./rectangle\";\r\n\r\ntype colorSection = { color: string; start: number; width: number };\r\ntype rectSize = { height: number; width: number };\r\n\r\n//Sharp color gradient values, example:\r\n//[{color:\"red\", start:0, width: .5}, {color:\"blue\", start: .5, width: .5}]\r\nexport default class Gradient extends Array<colorSection> {\r\n  constructor(...items: colorSection[]) {\r\n    super(...(items ?? []));\r\n  }\r\n\r\n  ToRectangle(size: rectSize): Rectangle[] {\r\n    return this.map(\r\n      (colorSection) =>\r\n        new Rectangle(\r\n          colorSection.start * size.width,\r\n          0,\r\n          colorSection.width * size.width,\r\n          size.height,\r\n          colorSection.color\r\n        )\r\n    );\r\n  }\r\n}\r\n","import WordNormal from \"../../../dictionaries/data/wordNormal\";\r\nimport Gradient from \"./gradient\";\r\n\r\n// normal vector with colors as axis\r\n// [{color:\"red\", value:.5}, {color:\"blue\", value:.5}]\r\nexport default class ColorNormal extends Array<{\r\n  color: string;\r\n  value: number;\r\n}> {\r\n  public IsValid = false;\r\n  constructor(wordNormal: WordNormal, colorMap: Map<string, string>) {\r\n    let validated = wordNormal.length > 0 && colorMap.size > 0;\r\n\r\n    const array = wordNormal.map((val) => {\r\n      const wordColor = colorMap.get(val.word);\r\n      if (!wordColor) validated = false;\r\n      return { color: wordColor, value: val.value };\r\n    });\r\n\r\n    super(...array);\r\n    this.IsValid = validated;\r\n  }\r\n\r\n  isEqualTo(normal: ColorNormal) {\r\n    const ln = this.length;\r\n    if (ln != normal.length) return false;\r\n    for (let i = 0; i < ln; i++) {\r\n      if (this[i].color != normal[i].color || this[i].value != normal[i].value)\r\n        return false;\r\n    }\r\n    return true;\r\n  }\r\n\r\n  //translates ColorNormal into a gradient for GradientRect component\r\n  //[{color:\"red\", value: 0.5}, {color:\"blue\", value: 0.5}] => [{color:\"red\", start: 0, width: 0.5}, {color:\"blue\", start:0.5, width: 0.5}]\r\n  ToGradient() {\r\n    const sections = [];\r\n    let start = 0;\r\n    this.forEach((pair) => {\r\n      sections.push({ color: pair.color, start: start, width: pair.value });\r\n      start += pair.value;\r\n    });\r\n    return new Gradient(...sections);\r\n  }\r\n\r\n  getDominantColor() {\r\n    let backgroundColorValue = 0;\r\n    let ibackground: string = undefined;\r\n\r\n    this.forEach((pair) => {\r\n      if (pair.value > backgroundColorValue) {\r\n        ibackground = pair.color;\r\n        backgroundColorValue = pair.value;\r\n      }\r\n    });\r\n    return ibackground;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport SynonymCollection from \"./synonymCollection\";\r\nimport SynonymCloud, { CrossReference } from \"./synonymCloud\";\r\nimport ColorNormal from \"../../screens/synonyms/colorChart/colorNormal\";\r\n\r\n//react hook that creates word clouds out of synonyms\r\nexport function useClouds(\r\n  synonyms: SynonymCollection[],\r\n  colorMap: Map<string, string>,\r\n  sortBy?: string,\r\n  limit?: number\r\n) {\r\n  //build word clouds from synonyms\r\n  const allClouds = React.useMemo(() => CrossReference(synonyms), [synonyms]);\r\n\r\n  //sort, apply limits and build an ordered map of clouds\r\n  const sortedClouds = React.useMemo(() => {\r\n    const newSorted = SynonymCloud.GetSorted(\r\n      Array.from(allClouds.values()),\r\n      sortBy\r\n    ).slice(0, isNaN(limit) ? Infinity : limit);\r\n\r\n    const orderedMap = new Map(\r\n      newSorted.map((value, order) => [value.name, { value, order }])\r\n    );\r\n    return orderedMap;\r\n  }, [allClouds, limit, sortBy]);\r\n\r\n  //set up a timer to move N amount of clouds to rendered array, every cycle\r\n  const staggetTimer = React.useRef<NodeJS.Timer>();\r\n  const [renderedClouds, setRenderedClouds] = React.useState<SynonymCloud[]>(\r\n    []\r\n  );\r\n  React.useEffect(() => {\r\n    staggetTimer.current && clearInterval(staggetTimer.current);\r\n\r\n    setRenderedClouds((previous) => {\r\n      const moveNextClouds = (previousClouds) => {\r\n        const newArray = MoveElements(\r\n          sortedClouds,\r\n          previousClouds,\r\n          ELEMENTS_PER_RENDER\r\n        );\r\n        if (sortedClouds.size == newArray.length) clearInterval(previousTimer);\r\n        return newArray;\r\n      };\r\n\r\n      const previousTimer = setInterval(() => {\r\n        if (previousTimer == staggetTimer.current)\r\n          setRenderedClouds(moveNextClouds);\r\n        else clearInterval(previousTimer);\r\n      }, TIME_INTERVAL);\r\n\r\n      staggetTimer.current = previousTimer;\r\n      return CopyExisting(sortedClouds, previous);\r\n    });\r\n  }, [setRenderedClouds, sortedClouds]);\r\n\r\n  //build color normals for clouds\r\n  const previousNormals = React.useRef(new Map<string, ColorNormal>());\r\n  const colorNormals = React.useMemo(() => {\r\n    {\r\n      const newNormals = rebuildNormals(\r\n        Array.from(allClouds.values()),\r\n        colorMap,\r\n        previousNormals.current\r\n      );\r\n      previousNormals.current = newNormals;\r\n      return newNormals;\r\n    }\r\n  }, [colorMap, allClouds]);\r\n\r\n  const displayInfo = {\r\n    totalCount: allClouds.size,\r\n    renderedCount: renderedClouds.length,\r\n  };\r\n\r\n  return {\r\n    clouds: renderedClouds,\r\n    colorNormals,\r\n    displayInfo,\r\n  };\r\n}\r\n\r\n//this reorders and leaves all elements in current that also exist in all\r\nfunction CopyExisting(\r\n  allElements: OrderedMap<string, SynonymCloud>,\r\n  current: SynonymCloud[]\r\n): SynonymCloud[] {\r\n  const result = [];\r\n  current.forEach((element) => {\r\n    const { order, value } = allElements.get(element?.name) || {};\r\n    if (value) result[order] = value;\r\n  });\r\n  return result;\r\n}\r\n\r\n//pushes missing elements from ordered map into an array by a certain amount\r\nfunction MoveElements<TKey, TValue>(\r\n  final: OrderedMap<TKey, TValue>,\r\n  current: TValue[],\r\n  changesPerCycle: number\r\n) {\r\n  const result = Array.from(current);\r\n  for (let [_, { value, order }] of final.entries()) {\r\n    if (result[order]) continue;\r\n    result[order] = value;\r\n    changesPerCycle--;\r\n    if (changesPerCycle == 0) break;\r\n  }\r\n  return result;\r\n}\r\n\r\n//keeps old correct normals\r\nfunction rebuildNormals(\r\n  clouds: SynonymCloud[],\r\n  newColorMap: Map<string, string>,\r\n  oldNormals: Map<string, ColorNormal>\r\n) {\r\n  const map = new Map<string, ColorNormal>();\r\n  clouds.forEach((cloud) => {\r\n    const oldNormal = oldNormals.get(cloud.name);\r\n    const newNormal = new ColorNormal(cloud.GetWordNormal(), newColorMap);\r\n    if (!newNormal.IsValid) return;\r\n    map.set(\r\n      cloud.name,\r\n      oldNormal?.isEqualTo(newNormal) ? oldNormal : newNormal\r\n    );\r\n  });\r\n  return map;\r\n}\r\n\r\ntype OrderedMap<T1, T2> = Map<T1, { value: T2; order: number }>;\r\n\r\nconst TIME_INTERVAL = 250;\r\n\r\nconst ELEMENTS_PER_RENDER = 20;\r\n","import React, { FC, useEffect, useRef, useState } from \"react\";\r\nimport {\r\n  DeviceEventEmitter,\r\n  Platform,\r\n  ScrollView,\r\n  StyleSheet,\r\n  Text,\r\n  View,\r\n  ViewStyle,\r\n} from \"react-native\";\r\nimport {\r\n  Transition,\r\n  Transitioning,\r\n  TransitioningView,\r\n} from \"react-native-reanimated\";\r\n\r\nimport SynonymWord from \"./synonymWord\";\r\nimport SynonymCollection from \"../../dictionaries/data/synonymCollection\";\r\nimport { EventsEnum } from \"../../events\";\r\nimport Storage, { StringTypesEnum } from \"../../dictionaries/storageHandling\";\r\nimport BackgroundImage from \"./backgroundImage\";\r\nimport { useClouds } from \"../../dictionaries/data/useClouds\";\r\nimport * as Colors from \"../../colors\";\r\n\r\ninterface SynonymListProps {\r\n  synonyms: SynonymCollection[];\r\n  colorMap: Map<string, string>;\r\n  wordToSortBy?: string;\r\n  addNewWord: (newWord: string) => void;\r\n  style?: ViewStyle;\r\n}\r\n\r\n//Builds clouds of words from synonyms and displays them in a ScrollList\r\nconst SynonymList: FC<SynonymListProps> = ({\r\n  synonyms,\r\n  colorMap,\r\n  wordToSortBy,\r\n  addNewWord,\r\n  style,\r\n}) => {\r\n  const isOnWeb = Platform.OS == \"web\";\r\n  //load tile limit from memory and watch the event for its change\r\n  const [cloudLimit, setCloudLimit] = useState(DEFAULT_CLOUD_LIMIT);\r\n  useEffect(() => {\r\n    const loadCloudLimit = () =>\r\n      Storage.GetString(StringTypesEnum.CloudCount).then((value) => {\r\n        const loaded = parseInt(value);\r\n        !isNaN(loaded) && setCloudLimit(loaded);\r\n      });\r\n\r\n    loadCloudLimit();\r\n    const subscription = DeviceEventEmitter.addListener(\r\n      EventsEnum.CloudCountChanged,\r\n      loadCloudLimit\r\n    );\r\n    return () => subscription.remove();\r\n  }, []);\r\n\r\n  //generate word clouds out of given synonyms\r\n  const { clouds, colorNormals, displayInfo } = useClouds(\r\n    synonyms,\r\n    colorMap,\r\n    wordToSortBy,\r\n    cloudLimit\r\n  );\r\n\r\n  //layout transition for tile movement (android only)\r\n  const transitionViewRef = useRef<TransitioningView>();\r\n\r\n  useEffect(() => {\r\n    if (!isOnWeb) transitionViewRef.current?.animateNextTransition();\r\n  }, [synonyms]);\r\n\r\n  //create cloud components\r\n  const zIndex = style?.zIndex ?? 0;\r\n  const cloudComponents = [];\r\n  for (const cloud of clouds) {\r\n    if (!cloud) continue;\r\n    const { name } = cloud;\r\n    const normal = colorNormals.get(name);\r\n    cloudComponents.push(\r\n      <SynonymWord\r\n        key={name}\r\n        word={name}\r\n        fontSize={FONT_SIZE}\r\n        colorNormal={normal}\r\n        onPress={addNewWord}\r\n        style={{ zIndex: zIndex + 1 }}\r\n      />\r\n    );\r\n  }\r\n\r\n  return (\r\n    <View style={{ flex: 1 }}>\r\n      <BackgroundImage source={BACKGROUND_IMAGE} faded={clouds.length > 0} />\r\n      <ScrollView\r\n        keyboardShouldPersistTaps=\"handled\"\r\n        style={{ zIndex: zIndex }}\r\n        contentContainerStyle={styles.synonymScrollContainer}\r\n      >\r\n        {isOnWeb ? (\r\n          <View style={styles.innerView}>{cloudComponents}</View>\r\n        ) : (\r\n          <Transitioning.View\r\n            ref={transitionViewRef}\r\n            style={styles.innerView}\r\n            transition={transition}\r\n          >\r\n            {cloudComponents}\r\n          </Transitioning.View>\r\n        )}\r\n      </ScrollView>\r\n\r\n      <View style={styles.tooltip} pointerEvents=\"none\">\r\n        <View style={{ ...styles.tooltipBackground, zIndex: zIndex + 10 }} />\r\n        <Text style={{ ...styles.tooltipText, zIndex: zIndex + 11 }}>\r\n          {`Showing: ${displayInfo.renderedCount}/${displayInfo.totalCount}`}\r\n        </Text>\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\nconst IS_ON_MOBILE = Platform.OS != \"web\";\r\nconst FONT_SIZE: number = IS_ON_MOBILE ? 20 : 30;\r\nconst DEFAULT_CLOUD_LIMIT: number = IS_ON_MOBILE ? 40 : 70;\r\nconst BACKGROUND_IMAGE = require(\"../../../assets/icon.png\");\r\n\r\nconst styles = StyleSheet.create({\r\n  innerView: {\r\n    flex: 1,\r\n    flexDirection: \"row\",\r\n    alignContent: \"flex-start\",\r\n    justifyContent: \"space-around\",\r\n    flexWrap: \"wrap\",\r\n    gap: FONT_SIZE * 0.7,\r\n    margin: 10,\r\n  },\r\n\r\n  synonymScrollContainer: {\r\n    margin: 5,\r\n    marginBottom: 50,\r\n  },\r\n\r\n  tooltip: {\r\n    position: \"absolute\",\r\n    left: 5,\r\n    bottom: 5,\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    paddingHorizontal: 5,\r\n  },\r\n\r\n  tooltipBackground: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    borderWidth: 2,\r\n    borderRadius: 15,\r\n    position: \"absolute\",\r\n    backgroundColor: Colors.BGWhite,\r\n    opacity: 0.7,\r\n  },\r\n  tooltipText: { margin: 7 },\r\n});\r\n\r\nconst transition = <Transition.Change durationMs={100} />;\r\n\r\nexport default SynonymList;\r\n","//data returned from parser\r\nexport type APIReturnData = SynonymDefinition[];\r\nexport type SynonymDefinition = SynonymSet[];\r\nexport type SynonymSet = Set<string>;\r\n\r\n//processed response from api with an additional field for web response status\r\nexport type APIResponse = SuccessResponse | ErrorResponse;\r\ninterface SuccessResponse {\r\n  type: \"success\";\r\n  data: APIReturnData;\r\n}\r\n\r\ninterface ErrorResponse {\r\n  type: \"error\";\r\n  errorMessage: string;\r\n}\r\n\r\nexport enum APIErrorEnum {\r\n  Network = \"Unknown network error\",\r\n  WrongAPIkey = \"Server denies request, check API key\",\r\n  NoWord = \"No word in the database\",\r\n  Parsing = \"Can't parse the response\",\r\n}\r\n","import { APIErrorEnum, APIResponse } from \"./data/apiResponse\";\r\n\r\ntype getURL = (word: string, apiKey?: string) => string;\r\ntype parseResponse = (word: string, response: Response) => Promise<APIResponse>;\r\ntype normalizeWord = (string: string) => string;\r\n\r\n//fetches information about a word from an API and parses it into a synonym\r\nexport default class Dictionary {\r\n  constructor(\r\n    private urlGetter: getURL,\r\n    private parse: parseResponse,\r\n    private normalize?: normalizeWord\r\n  ) {}\r\n  private fetchResponse(word: string) {\r\n    return fetch(this.urlGetter(word));\r\n  }\r\n\r\n  GetSynonyms(word: string) {\r\n    word = this.normalize ? this.normalize(word) : word;\r\n\r\n    return this.fetchResponse(word)\r\n      .then((response) => this.parse(word, response))\r\n      .catch(\r\n        (_) =>\r\n          ({ type: \"error\", errorMessage: APIErrorEnum.Network } as APIResponse)\r\n      );\r\n  }\r\n}\r\n\r\nexport enum DictionaryType {\r\n  Self = \"Default\",\r\n  Meriam = \"MeriamWebster\",\r\n  Datamuse = \"Datamuse\",\r\n  BigHugeThesarus = \"BigHugeThesarus\",\r\n}\r\n\r\nexport const DictionaryKeyRequirement = {\r\n  [DictionaryType.Self]: false,\r\n  [DictionaryType.Meriam]: true,\r\n  [DictionaryType.BigHugeThesarus]: true,\r\n  [DictionaryType.Datamuse]: false,\r\n};\r\n\r\nexport const DictionaryRegistrationLinks = {\r\n  [DictionaryType.Self]: \"\",\r\n  [DictionaryType.Meriam]: \"https://dictionaryapi.com/\",\r\n  [DictionaryType.BigHugeThesarus]:\r\n    \"https://words.bighugelabs.com/account/getkey\",\r\n  [DictionaryType.Datamuse]: \"\",\r\n};\r\n\r\nexport const DictionaryName = {\r\n  [DictionaryType.Self]: \"Default (Datamuse)\",\r\n  [DictionaryType.Meriam]: \"Merriam-Webster\",\r\n  [DictionaryType.Datamuse]: \"Datamuse\",\r\n  [DictionaryType.BigHugeThesarus]: \"BigHugeThesarus\",\r\n};\r\n","import { APIErrorEnum, APIResponse } from \"./data/apiResponse\";\r\nimport Dictionary from \"./dictionary\";\r\n\r\n//dictionary components for datamuse.com API\r\nexport default function BuildDatamuse(): Dictionary {\r\n  return new Dictionary(\r\n    (word: string) => `https://api.datamuse.com/words?rel_syn=${word}`,\r\n    DatamuseParse,\r\n    (word: string) => word.replace(\" \", \"_\")\r\n  );\r\n}\r\n\r\nexport async function DatamuseParse(\r\n  _: string,\r\n  response: Response\r\n): Promise<APIResponse> {\r\n  try {\r\n    if (!response.ok)\r\n      throw new Error(`Something went wrong: ${response.status}`);\r\n\r\n    const text = await response.text();\r\n    if (!text) throw new Error(\"Empty response\");\r\n    const parsed = JSON.parse(text);\r\n    if (parsed.length == 0 || parsed[0]?.word == undefined)\r\n      throw new Error(APIErrorEnum.NoWord);\r\n\r\n    const sets: Set<string>[] = parsed.map(\r\n      (definition) => new Set<string>([definition.word])\r\n    );\r\n\r\n    return { type: \"success\", data: [sets] };\r\n  } catch (error) {\r\n    return { type: \"error\", errorMessage: error.message };\r\n  }\r\n}\r\n","import {\r\n  APIReturnData,\r\n  APIErrorEnum,\r\n  APIResponse,\r\n  SynonymDefinition,\r\n} from \"./data/apiResponse\";\r\nimport Dictionary from \"./dictionary\";\r\n\r\n//dictionary components for MeriamWebster api\r\nexport default function BuildMeriam(apiKey: string): Dictionary {\r\n  return new Dictionary(\r\n    (word: string) =>\r\n      `https://www.dictionaryapi.com/api/v3/references/thesaurus/json/${word}?key=${apiKey}`,\r\n    MeriamParse\r\n  );\r\n}\r\n\r\nexport async function MeriamParse(\r\n  targetWord: string,\r\n  response: Response\r\n): Promise<APIResponse> {\r\n  try {\r\n    if (!response.ok)\r\n      throw new Error(`Something went wrong: ${response.status}`);\r\n\r\n    const text = await response.text();\r\n    if (!text) throw new Error(\"Empty response\");\r\n    if (text.includes(\"Invalid API key\"))\r\n      return {\r\n        type: \"error\",\r\n        errorMessage: APIErrorEnum.WrongAPIkey,\r\n      };\r\n\r\n    const parsed = JSON.parse(text);\r\n    const data: APIReturnData = [];\r\n    if (parsed.length == 0 || parsed[0].meta == undefined)\r\n      throw new Error(APIErrorEnum.NoWord);\r\n    parsed\r\n      .filter((collection) => collection.meta.id == targetWord)\r\n      .forEach((definitionJSON) => {\r\n        const definition: SynonymDefinition = [];\r\n        definitionJSON.meta.syns.forEach((synonymList: string[]) => {\r\n          if (synonymList?.length > 0) definition.push(new Set(synonymList));\r\n        });\r\n        data.push(definition);\r\n      });\r\n    return { type: \"success\", data: data };\r\n  } catch (error) {\r\n    return { type: \"error\", errorMessage: error.message };\r\n  }\r\n}\r\n","import * as SecureStore from \"expo-secure-store\";\r\nimport { DictionaryType } from \"./dictionary\";\r\nimport { Platform } from \"react-native\";\r\nimport Storage from \"./storageHandling\";\r\n\r\n//securely handles setting and getting api keys (mobile only)\r\nexport default class Keys {\r\n  static Set(keyType: DictionaryType, key: string) {\r\n    const varName = secureKeyName(keyType);\r\n    if (Platform.OS == \"web\") return Storage.SetString(varName, key);\r\n    return SecureStore.setItemAsync(varName, key);\r\n  }\r\n\r\n  static async Get(keyType: DictionaryType) {\r\n    const varName = secureKeyName(keyType);\r\n    if (Platform.OS == \"web\") return Storage.GetString(varName);\r\n    return SecureStore.getItemAsync(varName);\r\n  }\r\n}\r\nconst secureKeyName = (type: string) => \"key-\" + type;\r\n","import {\r\n  APIReturnData,\r\n  APIErrorEnum,\r\n  APIResponse,\r\n  SynonymDefinition,\r\n} from \"./data/apiResponse\";\r\nimport Dictionary from \"./dictionary\";\r\n\r\n//dictionary components for MeriamWebster api\r\nexport default function BuildBHL(apiKey: string): Dictionary {\r\n  return new Dictionary(\r\n    (word: string) =>\r\n      `https://words.bighugelabs.com/api/2/${apiKey}/${word}/json`,\r\n    BHLParse\r\n  );\r\n}\r\n\r\nconst allowedTypes = [\"syn\", \"sim\"];\r\nexport async function BHLParse(\r\n  targetWord: string,\r\n  response: Response\r\n): Promise<APIResponse> {\r\n  if (response.status == 500)\r\n    return { type: \"error\", errorMessage: APIErrorEnum.WrongAPIkey };\r\n  if (response.status == 404)\r\n    return { type: \"error\", errorMessage: APIErrorEnum.NoWord };\r\n  if (!response.ok)\r\n    return { type: \"error\", errorMessage: APIErrorEnum.Network };\r\n\r\n  try {\r\n    const text = await response.text();\r\n    if (!text) throw new Error(`empty response`);\r\n\r\n    const parsed = JSON.parse(text);\r\n    const set: Set<string> = new Set();\r\n    for (const wordType in parsed) {\r\n      for (const relType in parsed[wordType]) {\r\n        if (allowedTypes.includes(relType)) {\r\n          Array.from(parsed[wordType][relType]).forEach((word: string) =>\r\n            set.add(word)\r\n          );\r\n        }\r\n      }\r\n    }\r\n    return { type: \"success\", data: [[set]] };\r\n  } catch (error) {\r\n    return { type: \"error\", errorMessage: error.message };\r\n  }\r\n}\r\n","import BuildDatamuse from \"./datamuse\";\r\nimport BuildMeriam from \"./meriam\";\r\nimport Keys from \"./keyHandling\";\r\nimport Dictionary, {\r\n  DictionaryKeyRequirement,\r\n  DictionaryType,\r\n} from \"./dictionary\";\r\nimport Storage from \"./storageHandling\";\r\nimport BuildBHL from \"./bighugelabs\";\r\n\r\n//Getters and setters for dictionary information in local storage\r\nexport async function GetCurrentDictionary(): Promise<Dictionary> {\r\n  const apiType = (await LoadCurrentDictionaryType()) || DictionaryType.Self;\r\n  let key: string;\r\n\r\n  if (DictionaryKeyRequirement[apiType]) key = await Keys.Get(apiType);\r\n  switch (apiType) {\r\n    case DictionaryType.Self:\r\n      return buildDefaultDictionary();\r\n    case DictionaryType.Meriam:\r\n      return BuildMeriam(key);\r\n    case DictionaryType.Datamuse:\r\n      return BuildDatamuse();\r\n    case DictionaryType.BigHugeThesarus:\r\n      return BuildBHL(key);\r\n  }\r\n}\r\n\r\nconst apiNameKey = \"current_api_name\";\r\n\r\nexport async function LoadCurrentDictionaryType() {\r\n  const result = await Storage.GetString(apiNameKey);\r\n  return (result as DictionaryType) || DictionaryType.Self;\r\n}\r\n\r\nexport async function SaveCurrentDictionaryType(\r\n  type: DictionaryType,\r\n  key?: string\r\n) {\r\n  const promises: Promise<void>[] = [];\r\n  promises.push(Storage.SetString(apiNameKey, type));\r\n  if (type != DictionaryType.Self && key) promises.push(Keys.Set(type, key));\r\n\r\n  return Promise.all(promises);\r\n}\r\n\r\nconst buildDefaultDictionary = BuildDatamuse;\r\n","import { APIReturnData } from \"./apiResponse\";\r\nimport Dictionary from \"../dictionary\";\r\n\r\n//Synonym word with fetched api data\r\nexport default class SynonymCollection {\r\n  public Word: string;\r\n  constructor(word: string) {\r\n    this.Word = NormalizeWord(word);\r\n  }\r\n\r\n  public definitionSets: APIReturnData = [];\r\n  private set(value: APIReturnData) {\r\n    this.wasFetched = true;\r\n    this.definitionSets = value;\r\n    this.isEmpty = this.definitionSets.length == 0;\r\n  }\r\n\r\n  public async Load(dictionary: Dictionary) {\r\n    const response = await dictionary.GetSynonyms(this.Word);\r\n    const data = response.type == \"success\" ? response.data : [];\r\n    this.set(data);\r\n    return response;\r\n  }\r\n\r\n  private isEmpty: boolean = false;\r\n  get IsEmpty(): boolean {\r\n    return this.isEmpty;\r\n  }\r\n\r\n  private wasFetched: boolean = false;\r\n  get WasFetched(): boolean {\r\n    return this.wasFetched;\r\n  }\r\n}\r\n\r\nexport function NormalizeWord(word: string) {\r\n  return word\r\n    .replace(/[^a-z0-9\\s-]/gi, \"\")\r\n    .trim()\r\n    .toLowerCase();\r\n}\r\n","import React, { FC } from \"react\";\r\nimport { StyleSheet, TouchableOpacity } from \"react-native\";\r\nimport { MaterialIcons } from \"@expo/vector-icons\";\r\n\r\nexport interface MaterialButtonStyle {\r\n  backgroundColor?: string;\r\n  countourColor?: string;\r\n  disabledCountourColor?: string;\r\n  size?: number;\r\n  opacity?: number;\r\n}\r\n\r\ninterface MaterialButtonProps {\r\n  style?: MaterialButtonStyle;\r\n  disabled?: boolean;\r\n  name: keyof typeof MaterialIcons.glyphMap;\r\n  onPress?: () => void;\r\n}\r\n\r\n//a button with a material icon\r\nconst MaterialButton: FC<MaterialButtonProps> = ({\r\n  disabled,\r\n  style,\r\n  name,\r\n  onPress,\r\n}) => {\r\n  const bgColor = style?.backgroundColor || defaultBackground;\r\n  const counterColor = disabled\r\n    ? style?.disabledCountourColor || defaultDisabled\r\n    : style?.countourColor || defaultCountour;\r\n  return (\r\n    <TouchableOpacity\r\n      style={{\r\n        ...styles.inputButton,\r\n        backgroundColor: bgColor,\r\n        borderColor: counterColor,\r\n      }}\r\n      onPress={onPress}\r\n      disabled={disabled}\r\n    >\r\n      <MaterialIcons\r\n        name={name}\r\n        size={style?.size || defaultSize}\r\n        color={counterColor}\r\n      />\r\n    </TouchableOpacity>\r\n  );\r\n};\r\n\r\nconst defaultCountour = \"black\";\r\nconst defaultBackground = \"white\";\r\nconst defaultDisabled = \"darkgrey\";\r\nconst defaultSize = 40;\r\n\r\nconst styles = StyleSheet.create({\r\n  inputButton: {\r\n    alignItems: \"center\",\r\n    borderWidth: 2,\r\n    borderRadius: 15,\r\n    marginHorizontal: 5,\r\n  },\r\n});\r\n\r\nexport default MaterialButton;\r\n","import React, { FC } from \"react\";\r\nimport {\r\n  Platform,\r\n  Pressable,\r\n  StyleSheet,\r\n  Text,\r\n  TextInput,\r\n  TextStyle,\r\n  View,\r\n  ViewStyle,\r\n} from \"react-native\";\r\nimport SynonymCollection from \"../../dictionaries/data/synonymCollection\";\r\nimport {\r\n  Transition,\r\n  Transitioning,\r\n  TransitioningView,\r\n} from \"react-native-reanimated\";\r\nimport * as Haptics from \"expo-haptics\";\r\n\r\nimport MaterialButton, { MaterialButtonStyle } from \"../materialButton\";\r\nimport * as Colors from \"../../colors\";\r\n\r\ninterface ControlPanelProps {\r\n  synonyms: SynonymCollection[];\r\n  colorMap: Map<string, string>;\r\n  highlightedWord: string;\r\n  onWordPress: (word: string) => void;\r\n  onWordLongPress: (word: string) => void;\r\n  onClearButton: () => void;\r\n  onOptions: () => void;\r\n  onAddWord: (word: string) => void;\r\n}\r\n\r\nconst ControlPanelView: FC<ControlPanelProps> = ({\r\n  synonyms,\r\n  colorMap,\r\n  highlightedWord,\r\n  onWordPress,\r\n  onWordLongPress,\r\n  onClearButton,\r\n  onOptions,\r\n  onAddWord,\r\n}) => {\r\n  const isOnMobile = Platform.OS != \"web\";\r\n\r\n  const transitionReference = React.useRef<TransitioningView>();\r\n  React.useEffect(() => {\r\n    isOnMobile && transitionReference.current.animateNextTransition();\r\n  }, [synonyms]);\r\n\r\n  //create selected synonym tiles\r\n  const synonymComponents = synonyms.map(({ Word, IsEmpty, WasFetched }) => {\r\n    const overrideColor = !WasFetched || IsEmpty || !colorMap.has(Word);\r\n    const wordColor = overrideColor ? Colors.DisabledGrey : colorMap.get(Word);\r\n    const getWordStyle = (pressed: boolean) => ({\r\n      backgroundColor: wordColor,\r\n      ...(Word == highlightedWord ? styles.highlightedWord : []),\r\n      opacity: !isOnMobile && pressed ? 0.6 : 1,\r\n    });\r\n    return (\r\n      <Pressable\r\n        key={Word}\r\n        android_ripple={{\r\n          color: Colors.BGWhite,\r\n        }}\r\n        style={({ pressed }) => getWordStyle(pressed)}\r\n        onPress={() => onWordPress(Word)}\r\n        onLongPress={() => {\r\n          onWordLongPress(Word);\r\n          if (isOnMobile) Haptics.selectionAsync();\r\n        }}\r\n      >\r\n        <Text style={styles.text}>{Word}</Text>\r\n      </Pressable>\r\n    );\r\n  });\r\n\r\n  const [inputText, setInputText] = React.useState<string>(\"\");\r\n  const onSubmitEditing = (newText: string) => {\r\n    onAddWord(newText);\r\n    setInputText(\"\");\r\n  };\r\n\r\n  return (\r\n    <View>\r\n      <View style={styles.listContainer}>\r\n        <View style={{ alignSelf: \"flex-end\" }}>\r\n          <MaterialButton\r\n            name=\"settings\"\r\n            onPress={onOptions}\r\n            style={styles.materialButtonStyle}\r\n          />\r\n        </View>\r\n        {isOnMobile ? (\r\n          <Transitioning.View\r\n            style={styles.wordList}\r\n            transition={transition}\r\n            ref={transitionReference}\r\n          >\r\n            {synonymComponents}\r\n          </Transitioning.View>\r\n        ) : (\r\n          <View style={styles.wordList}>{synonymComponents}</View>\r\n        )}\r\n      </View>\r\n      <View style={styles.inputContainer}>\r\n        <MaterialButton\r\n          disabled={synonyms.length == 0}\r\n          name=\"clear\"\r\n          onPress={onClearButton}\r\n          style={styles.materialButtonStyle}\r\n        />\r\n        <View style={styles.inputHolder}>\r\n          <TextInput\r\n            style={styles.inputText}\r\n            autoFocus={true}\r\n            blurOnSubmit={true}\r\n            value={inputText}\r\n            onChangeText={(text) => {\r\n              setInputText(text);\r\n            }}\r\n            onSubmitEditing={(event) => {\r\n              const newText = event.nativeEvent.text;\r\n              if (newText) onSubmitEditing(newText);\r\n            }}\r\n          />\r\n        </View>\r\n        <MaterialButton\r\n          disabled={inputText === \"\"}\r\n          name=\"add\"\r\n          onPress={() => onSubmitEditing(inputText)}\r\n          style={styles.materialButtonStyle}\r\n        />\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\ninterface ControlPanelStyles {\r\n  text: ViewStyle;\r\n  listContainer: ViewStyle;\r\n  inputHolder: ViewStyle;\r\n  inputText: TextStyle;\r\n  inputContainer: ViewStyle;\r\n  wordList: ViewStyle;\r\n  highlightedWord: ViewStyle;\r\n  materialButtonStyle: MaterialButtonStyle;\r\n}\r\n\r\nconst styles = StyleSheet.create<ControlPanelStyles>({\r\n  text: { fontSize: 20, marginHorizontal: 7, marginVertical: 5 },\r\n  listContainer: {\r\n    flexDirection: \"row\",\r\n  },\r\n  inputHolder: {\r\n    flex: 1,\r\n    borderWidth: 2,\r\n    borderRadius: 15,\r\n    marginHorizontal: 5,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    backgroundColor: Colors.BGWhite,\r\n  },\r\n  inputText: {\r\n    fontSize: 20,\r\n    width: \"95%\",\r\n    textAlign: \"center\",\r\n  },\r\n  inputContainer: {\r\n    paddingVertical: 5,\r\n    flexDirection: \"row\",\r\n  },\r\n  wordList: {\r\n    flex: 5,\r\n    flexDirection: \"row\",\r\n    justifyContent: \"flex-start\",\r\n    flexWrap: \"wrap\",\r\n    alignSelf: \"stretch\",\r\n    alignContent: \"center\",\r\n    alignItems: \"center\",\r\n    marginHorizontal: 5,\r\n    gap: 5,\r\n  },\r\n\r\n  highlightedWord: {\r\n    borderWidth: 3,\r\n    borderColor: Colors.CountourColor,\r\n    margin: -3,\r\n  },\r\n  materialButtonStyle: {\r\n    backgroundColor: Colors.BGWhite,\r\n    disabledCountourColor: Colors.DisabledGrey,\r\n    countourColor: Colors.CountourColor,\r\n  },\r\n});\r\n\r\nconst transition = (\r\n  <Transition.Together>\r\n    <Transition.Change durationMs={200} />\r\n  </Transition.Together>\r\n);\r\n\r\nexport default ControlPanelView;\r\n","import React from \"react\";\r\nimport { DeviceEventEmitter } from \"react-native\";\r\nimport Storage, { StringTypesEnum } from \"../../dictionaries/storageHandling\";\r\nimport { EventsEnum } from \"../../events\";\r\nimport { useToast } from \"react-native-toast-notifications\";\r\n\r\nexport function useHints(screenFocused: boolean, synnonymCount: number) {\r\n  const [shownHintID, setShownHintID] = React.useState(-1);\r\n\r\n  //detect if app was launched before and set showingHint to 0 if it wasn't\r\n  React.useEffect(() => {\r\n    const loadHints = () =>\r\n      Storage.GetString(StringTypesEnum.WasLaunched).then((value) => {\r\n        if (!value) {\r\n          Storage.SetString(StringTypesEnum.WasLaunched, \"yes\");\r\n          setShownHintID(0);\r\n        }\r\n      });\r\n    loadHints();\r\n    const subscription = DeviceEventEmitter.addListener(\r\n      EventsEnum.HintsReset,\r\n      loadHints\r\n    );\r\n    return () => subscription.remove();\r\n  }, []);\r\n\r\n  //increment hint ID when conditions are met\r\n  React.useEffect(() => {\r\n    if (shownHintID == 0 && synnonymCount > 0) setShownHintID(1);\r\n    if (shownHintID == 1 && synnonymCount > 1) setShownHintID(2);\r\n  }, [synnonymCount]);\r\n\r\n  //show hint toast when the main screen is focused\r\n  const toast = useToast();\r\n  React.useEffect(() => {\r\n    if (!screenFocused) return;\r\n    if (shownHintID >= 0 && shownHintID <= hintText.length)\r\n      toast.show?.(hintText[shownHintID], {\r\n        onPress: (id) => toast?.hide(id),\r\n      });\r\n  }, [shownHintID, screenFocused]);\r\n}\r\n\r\nconst hintText = [\r\n  `Enter a word to find its synonyms`,\r\n  `Add more related words`,\r\n  `Press and hold any selected word to prioritize its relation`,\r\n];\r\n","import { StatusBar } from \"expo-status-bar\";\r\nimport React, { FC, useCallback, useEffect, useState } from \"react\";\r\nimport { SafeAreaView } from \"react-native-safe-area-context\";\r\nimport {\r\n  StyleSheet,\r\n  View,\r\n  ActivityIndicator,\r\n  DeviceEventEmitter,\r\n} from \"react-native\";\r\n\r\nimport SynonymList from \"./synonymList\";\r\nimport Dictionary from \"../../dictionaries/dictionary\";\r\nimport { SynesisProps } from \"../../navigation\";\r\nimport { EventsEnum } from \"../../events\";\r\nimport { GetCurrentDictionary } from \"../../dictionaries/dictionaryLoading\";\r\nimport * as Colors from \"../../colors\";\r\nimport { useSynonyms } from \"../../dictionaries/data/useSynonyms\";\r\nimport ControlPanelView from \"./controlPanel\";\r\nimport { useHints } from \"./useHints\";\r\nimport { useIsFocused } from \"@react-navigation/native\";\r\nimport useCachedMemo from \"../../useCachedMemo\";\r\n\r\n//main screen\r\nconst SynonymScreen: FC<SynesisProps> = ({ navigation }) => {\r\n  //load default dictionary and listen an event if it changes\r\n  const [dictionary, setDictionary] = React.useState<Dictionary>();\r\n  useEffect(() => {\r\n    const loadDictionaryFromMemory = () =>\r\n      GetCurrentDictionary().then((newDictionary) =>\r\n        setDictionary(newDictionary)\r\n      );\r\n\r\n    loadDictionaryFromMemory();\r\n    const subscription = DeviceEventEmitter.addListener(\r\n      EventsEnum.ApiChanged,\r\n      loadDictionaryFromMemory\r\n    );\r\n    return () => subscription.remove();\r\n  }, []);\r\n\r\n  //\r\n  const [highlightedWord, setHighlightedWord] = useState(\"\");\r\n  const onWordRemoval = useCallback(\r\n    (removedWord) => {\r\n      setHighlightedWord((previous) =>\r\n        previous == removedWord ? \"\" : previous\r\n      );\r\n    },\r\n    [setHighlightedWord]\r\n  );\r\n\r\n  const { synonyms, addWord, removeWord, clearWords } = useSynonyms(\r\n    dictionary,\r\n    onWordRemoval\r\n  );\r\n\r\n  useHints(useIsFocused(), synonyms.length);\r\n\r\n  const colorRef = useCachedMemo(\r\n    (previous) =>\r\n      Colors.RebuildColorMap(\r\n        previous,\r\n        synonyms.map((element) => element.Word)\r\n      ),\r\n    [synonyms]\r\n  );\r\n\r\n  const wordsBeingFetched =\r\n    synonyms.find((synonym) => !synonym.WasFetched) != null;\r\n\r\n  return (\r\n    <SafeAreaView style={styles.container}>\r\n      <StatusBar style=\"auto\" />\r\n      <SynonymList\r\n        synonyms={synonyms.filter(\r\n          (synonym) => synonym.WasFetched && !synonym.IsEmpty\r\n        )}\r\n        colorMap={colorRef}\r\n        addNewWord={addWord}\r\n        wordToSortBy={highlightedWord}\r\n      />\r\n      <View style={styles.connectionIndicator}>\r\n        <ActivityIndicator\r\n          pointerEvents=\"none\"\r\n          animating={wordsBeingFetched}\r\n          size=\"large\"\r\n          color={Colors.CountourColor}\r\n        />\r\n      </View>\r\n\r\n      <View style={styles.controlView}>\r\n        <ControlPanelView\r\n          synonyms={synonyms}\r\n          colorMap={colorRef}\r\n          highlightedWord={highlightedWord}\r\n          onClearButton={clearWords}\r\n          onWordPress={(word) => removeWord(word)}\r\n          onWordLongPress={(word) => setHighlightedWord(word)}\r\n          onOptions={() => navigation.navigate(\"Options\")}\r\n          onAddWord={addWord}\r\n        />\r\n      </View>\r\n    </SafeAreaView>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  connectionIndicator: {\r\n    position: \"absolute\",\r\n    right: 10,\r\n    top: 50,\r\n    width: 40,\r\n    height: 40,\r\n    zIndex: 1,\r\n  },\r\n\r\n  container: {\r\n    flex: 1,\r\n    backgroundColor: \"white\",\r\n    justifyContent: \"center\",\r\n    alignContent: \"center\",\r\n  },\r\n\r\n  controlView: {\r\n    backgroundColor: Colors.AccentColor,\r\n    paddingVertical: 5,\r\n  },\r\n});\r\n\r\nexport default SynonymScreen;\r\n","import React, { useEffect, useCallback, useState } from \"react\";\r\nimport { useToast } from \"react-native-toast-notifications\";\r\n\r\nimport SynonymCollection from \"./synonymCollection\";\r\nimport Dictionary from \"../dictionary\";\r\n\r\n//react hook that provides tools for interracting with synonym collections\r\nexport function useSynonyms(\r\n  dictionary: Dictionary,\r\n  onRemove?: (word: string) => void\r\n) {\r\n  const [synonyms, setSynonyms] = React.useState<SynonymCollection[]>([]);\r\n  const toast = useToast();\r\n\r\n  useEffect(() => {\r\n    setSynonyms([]);\r\n  }, [dictionary]);\r\n\r\n  const addWord = useCallback(\r\n    (word: string) => {\r\n      setSynonyms((previous) => {\r\n        const newSynonym = new SynonymCollection(word);\r\n        const EMPTY = !newSynonym || newSynonym.Word == \"\";\r\n        const HAS_WORD_ALREADY =\r\n          previous.findIndex(\r\n            (definiton) => definiton.Word == newSynonym.Word\r\n          ) != -1;\r\n\r\n        if (!EMPTY && !HAS_WORD_ALREADY) {\r\n          newSynonym.Load(dictionary).then((result) => {\r\n            if (result.type == \"error\") toast.show(result.errorMessage);\r\n            setSynonyms((previous) => Array.from(previous));\r\n          });\r\n          return [...previous, newSynonym];\r\n        }\r\n        return previous;\r\n      });\r\n    },\r\n    [setSynonyms, dictionary]\r\n  );\r\n\r\n  const removeWord = useCallback(\r\n    (removedWord: string) => {\r\n      setSynonyms((previousSynonyms) => {\r\n        const index = previousSynonyms.findIndex(\r\n          ({ Word }) => Word == removedWord\r\n        );\r\n        if (index < 0) return previousSynonyms;\r\n        onRemove?.(removedWord);\r\n        return [\r\n          ...previousSynonyms.slice(0, index),\r\n          ...previousSynonyms.slice(index + 1),\r\n        ];\r\n      });\r\n    },\r\n    [setSynonyms, onRemove]\r\n  );\r\n\r\n  const clearWords = useCallback(() => setSynonyms([]), [setSynonyms]);\r\n  return { synonyms, addWord, removeWord, clearWords };\r\n}\r\n","import React, { useMemo, useRef } from \"react\";\r\n\r\n//memo with access to its previous value\r\nexport default function useCachedMemo<T>(\r\n  callback: (T) => T | undefined,\r\n  deps: React.DependencyList\r\n) {\r\n  const ref = useRef<T>(undefined);\r\n  return useMemo(() => {\r\n    const newVal = callback(ref.current);\r\n    ref.current = newVal;\r\n    return newVal;\r\n  }, deps);\r\n}\r\n","import React, { FC } from \"react\";\r\nimport { StyleSheet, Switch, Text, TouchableOpacity, View } from \"react-native\";\r\n\r\n// Toggle with a title\r\ninterface TitledToggleProps {\r\n  title: string;\r\n  state: boolean;\r\n  onValueChange: (state: boolean) => void;\r\n}\r\nconst TitledToggle: FC<TitledToggleProps> = ({\r\n  title,\r\n  state,\r\n  onValueChange,\r\n}) => {\r\n  return (\r\n    <TouchableOpacity\r\n      onPress={() => onValueChange(!state)}\r\n      style={styles.touchable}\r\n    >\r\n      <View style={styles.view}>\r\n        <Switch value={state} onValueChange={() => onValueChange(!state)} />\r\n        <Text style={styles.text}>{title}</Text>\r\n      </View>\r\n    </TouchableOpacity>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  text: { left: 20, fontSize: 16 },\r\n  touchable: { padding: 10 },\r\n  view: { flexDirection: \"row\", alignItems: \"center\" },\r\n});\r\n\r\nexport default TitledToggle;\r\n","import { DeviceEventEmitter, View } from \"react-native\";\r\nimport {\r\n  DictionaryKeyRequirement,\r\n  DictionaryName,\r\n  DictionaryRegistrationLinks,\r\n  DictionaryType,\r\n} from \"../../dictionaries/dictionary\";\r\nimport React, { FC } from \"react\";\r\nimport { useToast } from \"react-native-toast-notifications\";\r\n\r\nimport { InputModalEventParams } from \"../inputModal\";\r\nimport { OptionsProps } from \"../../navigation\";\r\nimport { EventsEnum } from \"../../events\";\r\nimport {\r\n  LoadCurrentDictionaryType,\r\n  SaveCurrentDictionaryType,\r\n} from \"../../dictionaries/dictionaryLoading\";\r\nimport TitledToggle from \"../titledToggle\";\r\n\r\ninterface ApiSwitchProps {\r\n  navigation: OptionsProps[\"navigation\"];\r\n}\r\n\r\n//List of toggles to switch API, pops up InputModal for API key when required\r\nexport const ApiSwitch: FC<ApiSwitchProps> = ({ navigation }) => {\r\n  const toast = useToast();\r\n  const [currentDictionaryType, setCurrentDictionaryType] =\r\n    React.useState<DictionaryType>();\r\n\r\n  //create data for each API in the dictionary\r\n  const apiTogglesData = Object.values(DictionaryType).map((dictionaryType) => {\r\n    return {\r\n      name: dictionaryType,\r\n      state: currentDictionaryType == dictionaryType,\r\n      text: DictionaryName[dictionaryType],\r\n    };\r\n  });\r\n\r\n  //popup modal when a toggle is pressed\r\n  const onTogglePress = (dictionaryType: DictionaryType) => {\r\n    const { state: enabled } = apiTogglesData.find(\r\n      ({ name }) => name == dictionaryType\r\n    );\r\n\r\n    if (DictionaryKeyRequirement[dictionaryType]) {\r\n      navigation.navigate(\"InputModal\", {\r\n        varName: dictionaryType,\r\n        varHint: `Enter a key for ${DictionaryName[dictionaryType]} API`,\r\n        varLink: DictionaryRegistrationLinks[dictionaryType], //todo move into personalized api section\r\n        eventName: EventsEnum.ApiKeyEntered,\r\n      });\r\n      return;\r\n    }\r\n\r\n    if (!enabled) {\r\n      setCurrentDictionaryType(dictionaryType);\r\n      SaveCurrentDictionaryType(dictionaryType).then(() =>\r\n        DeviceEventEmitter.emit(EventsEnum.ApiChanged)\r\n      );\r\n    }\r\n  };\r\n\r\n  //listen to the event of modal resolution\r\n  React.useEffect(() => {\r\n    LoadCurrentDictionaryType().then((result) =>\r\n      setCurrentDictionaryType(result)\r\n    );\r\n\r\n    //listen to an event from InputModal, change Dictionary and API key on recieve\r\n    const callback = (params: InputModalEventParams) => {\r\n      const { varName, varValue: apiKey } = params;\r\n      const dictionaryType = varName as DictionaryType;\r\n      if (currentDictionaryType != dictionaryType || apiKey) {\r\n        setCurrentDictionaryType(dictionaryType as DictionaryType);\r\n        SaveCurrentDictionaryType(\r\n          dictionaryType as DictionaryType,\r\n          apiKey\r\n        ).then(() => DeviceEventEmitter.emit(EventsEnum.ApiChanged));\r\n      } else {\r\n        toast.show(\r\n          `Please provide a key to use ${DictionaryName[dictionaryType]} API`\r\n        );\r\n      }\r\n    };\r\n\r\n    const subscription = DeviceEventEmitter.addListener(\r\n      EventsEnum.ApiKeyEntered,\r\n      callback\r\n    );\r\n    return () => subscription.remove();\r\n  }, []);\r\n\r\n  return (\r\n    <View>\r\n      {apiTogglesData.map(({ name, state, text }) => (\r\n        <TitledToggle\r\n          key={name}\r\n          onValueChange={() => {\r\n            onTogglePress(name);\r\n          }}\r\n          state={state}\r\n          title={text}\r\n        />\r\n      ))}\r\n    </View>\r\n  );\r\n};\r\n\r\nexport default ApiSwitch;\r\n","import React, { FC, useState } from \"react\";\r\nimport { DeviceEventEmitter, StyleSheet, Text, View } from \"react-native\";\r\nimport Slider from \"@react-native-community/slider\";\r\n\r\nimport Storage, { StringTypesEnum } from \"../../dictionaries/storageHandling\";\r\nimport { EventsEnum } from \"../../events\";\r\n\r\ninterface CloudCountSwitchProps {}\r\n\r\n//slider that changes the amount of rendered clouds\r\nconst CloudCountSwitch: FC<CloudCountSwitchProps> = ({}) => {\r\n  const [tileCount, setTileCount] = useState<number>(-1);\r\n\r\n  //on start, load value from memory\r\n  if (tileCount == -1)\r\n    Storage.GetString(StringTypesEnum.CloudCount).then((stringValue) => {\r\n      const numberValue = stringToTilecount(stringValue);\r\n      setTileCount(numberValue);\r\n    });\r\n\r\n  const onValChange = (newVal: number) => {\r\n    Storage.SetString(StringTypesEnum.CloudCount, tilecountToString(newVal));\r\n    setTileCount(newVal);\r\n    DeviceEventEmitter.emit(EventsEnum.CloudCountChanged);\r\n  };\r\n\r\n  return (\r\n    <View\r\n      style={{\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n      }}\r\n    >\r\n      <Text> Tile limit</Text>\r\n      <Text> {tileCount > tileValues.max ? \"No limit\" : tileCount}</Text>\r\n      <Slider\r\n        style={{\r\n          alignItems: \"center\",\r\n          width: \"90%\",\r\n          height: 40,\r\n        }}\r\n        step={tileValues.step}\r\n        value={tileCount}\r\n        minimumValue={tileValues.min}\r\n        maximumValue={tileValues.uimax}\r\n        onValueChange={onValChange}\r\n        minimumTrackTintColor=\"#FFFFFF\"\r\n        maximumTrackTintColor=\"#000000\"\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({ view: {} });\r\n\r\nfunction tilecountToString(count: number) {\r\n  return (isInfinite(count) ? 1000 : count).toString();\r\n}\r\n\r\nfunction stringToTilecount(count: string) {\r\n  const parsed = parseInt(count) || tileValues.default;\r\n  return isInfinite(parsed) ? tileValues.uimax : parsed;\r\n}\r\n\r\nfunction isInfinite(value) {\r\n  return value >= tileValues.uimax;\r\n}\r\n\r\nconst tileValues = {\r\n  step: 10,\r\n  min: 20,\r\n  max: 70,\r\n  uimax: 80,\r\n  default: 30,\r\n};\r\n\r\nexport default CloudCountSwitch;\r\n","import React, { FC, useEffect } from \"react\";\r\nimport {\r\n  View,\r\n  Text,\r\n  StyleSheet,\r\n  DeviceEventEmitter,\r\n  TouchableOpacity,\r\n  Platform,\r\n  Linking,\r\n} from \"react-native\";\r\nimport { MaterialIcons } from \"@expo/vector-icons\";\r\nimport Accordion from \"react-native-collapsible/Accordion\";\r\nimport * as Haptics from \"expo-haptics\";\r\n\r\nimport ApiSwitch from \"./apiSwitch\";\r\nimport { OptionsProps } from \"../../navigation\";\r\nimport Storage, { StringTypesEnum } from \"../../dictionaries/storageHandling\";\r\nimport { EventsEnum } from \"../../events\";\r\nimport * as Colors from \"../../colors\";\r\nimport CloudCountSwitch from \"./cloudCountSwitch\";\r\n\r\nconst OptionsScreen: FC<OptionsProps> = ({ navigation, route }) => {\r\n  const renderAccordionHeader = (title, index, isActive) => {\r\n    return (\r\n      <View key={index} style={{ ...styles.header }}>\r\n        {isActive ? (\r\n          <MaterialIcons\r\n            name=\"expand-less\"\r\n            size={24}\r\n            color={Colors.CountourColor}\r\n          />\r\n        ) : (\r\n          <MaterialIcons\r\n            name=\"expand-more\"\r\n            size={24}\r\n            color={Colors.CountourColor}\r\n          />\r\n        )}\r\n        <Text style={styles.title}>{title}</Text>\r\n      </View>\r\n    );\r\n  };\r\n\r\n  const accordionContents = {\r\n    [OptionSectionsEnum.Display]: <CloudCountSwitch />,\r\n    [OptionSectionsEnum.API]: <ApiSwitch navigation={navigation} />,\r\n    [OptionSectionsEnum.About]: (\r\n      <Text style={styles.linkText} onPress={() => Linking.openURL(ABOUT_LINK)}>\r\n        {ABOUT_LINK}\r\n      </Text>\r\n    ),\r\n    [OptionSectionsEnum.Hints]: (\r\n      <TouchableOpacity\r\n        style={styles.resetHints}\r\n        onPress={() => {\r\n          if (Platform.OS == \"android\") Haptics.selectionAsync();\r\n          Storage.SetString(StringTypesEnum.WasLaunched, \"\").then(() =>\r\n            DeviceEventEmitter.emit(EventsEnum.HintsReset)\r\n          );\r\n        }}\r\n      >\r\n        <MaterialIcons name=\"replay-circle-filled\" size={30} />\r\n        <Text style={{ fontSize: 15 }}>Reset Hints</Text>\r\n      </TouchableOpacity>\r\n    ),\r\n  };\r\n\r\n  const renderAccordingContent = (title) => {\r\n    return (\r\n      <View style={styles.content}>{accordionContents[title]}</View> || null\r\n    );\r\n  };\r\n\r\n  const [activeSessions, setActiveSessions] = React.useState<number[]>([]);\r\n  const updateSections = (activeSections: number[]) => {\r\n    setActiveSessions([...activeSections]);\r\n  };\r\n\r\n  //unravel certain section if parameter is present\r\n  const { unravel } = route.params ?? { unravel: undefined };\r\n  useEffect(() => {\r\n    const propIndex = Object.keys(OptionSectionsEnum).indexOf(unravel);\r\n    if (propIndex >= 0) setActiveSessions([propIndex]);\r\n  }, []);\r\n\r\n  return (\r\n    <View>\r\n      <Accordion\r\n        underlayColor={Colors.BGWhite}\r\n        sections={Object.values(OptionSectionsEnum)}\r\n        activeSections={activeSessions}\r\n        renderHeader={renderAccordionHeader}\r\n        renderContent={renderAccordingContent}\r\n        onChange={updateSections}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n  },\r\n  content: { left: 20, paddingVertical: 20 },\r\n  header: {\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    padding: 16,\r\n  },\r\n  linkText: { fontSize: 15, color: \"blue\" },\r\n  resetHints: {\r\n    flexDirection: \"row\",\r\n    alignItems: \"center\",\r\n    gap: 10,\r\n  },\r\n  title: {\r\n    marginLeft: 16,\r\n    fontSize: 18,\r\n    fontWeight: \"bold\",\r\n  },\r\n});\r\n\r\nconst ABOUT_LINK = \"https://github.com/holyhamster/Synesis/\";\r\nexport enum OptionSectionsEnum {\r\n  Display = \"Display\",\r\n  API = \"API\",\r\n  Hints = \"Hints\",\r\n  About = \"About\",\r\n}\r\n\r\nexport default OptionsScreen;\r\n","import React, { FC } from \"react\";\r\nimport {\r\n  ButtonProps,\r\n  DeviceEventEmitter,\r\n  Linking,\r\n  StyleSheet,\r\n  Text,\r\n  TextInput,\r\n  TextStyle,\r\n  View,\r\n  ViewStyle,\r\n} from \"react-native\";\r\n\r\nimport { InputModalProps } from \"../navigation\";\r\nimport MaterialButton from \"./materialButton\";\r\nimport * as Colors from \"../colors\";\r\n\r\nexport interface InputModalEventParams {\r\n  varName: string;\r\n  varValue: string;\r\n}\r\n\r\n//Modal that asks for a string and launches an event after it has been submitted\r\nconst InputModal: FC<InputModalProps> = ({ navigation, route }) => {\r\n  const { eventName, varName, varHint, varLink } = route.params;\r\n\r\n  const submitValue = (value: string) => {\r\n    const params: InputModalEventParams = { varName: varName, varValue: value };\r\n    DeviceEventEmitter.emit(eventName, params);\r\n  };\r\n\r\n  const [inputText, setInputText] = React.useState(\"\");\r\n  return (\r\n    <View style={styles.parentView}>\r\n      <Text style={styles.hintText}>{varHint ?? \"Enter variable\"}</Text>\r\n      <Text style={styles.linkText} onPress={() => Linking.openURL(varLink)}>\r\n        {varLink}\r\n      </Text>\r\n      <TextInput\r\n        autoFocus={true}\r\n        blurOnSubmit={true}\r\n        value={inputText}\r\n        onChangeText={(text) => {\r\n          setInputText(text);\r\n        }}\r\n        style={styles.input}\r\n        onSubmitEditing={({ nativeEvent }) => {\r\n          const { text } = nativeEvent;\r\n          if (text) {\r\n            submitValue(text);\r\n            navigation.goBack();\r\n          }\r\n        }}\r\n      />\r\n      <View style={styles.buttonView}>\r\n        <MaterialButton\r\n          name=\"clear\"\r\n          onPress={() => navigation.goBack()}\r\n          style={{ size: 50 }}\r\n        />\r\n        <MaterialButton\r\n          name=\"check\"\r\n          onPress={() => {\r\n            submitValue(inputText);\r\n            navigation.goBack();\r\n          }}\r\n          style={{ size: 50 }}\r\n        />\r\n      </View>\r\n    </View>\r\n  );\r\n};\r\n\r\ninterface InputModalStyleProps {\r\n  buttonView: ViewStyle;\r\n  buttons: ButtonProps;\r\n  input: TextStyle;\r\n  linkText: TextStyle;\r\n  parentView: ViewStyle;\r\n  hintText: TextStyle;\r\n}\r\n\r\nconst styles = StyleSheet.create<InputModalStyleProps>({\r\n  buttonView: { flexDirection: \"row\", gap: 10 },\r\n  buttons: {},\r\n  input: {\r\n    backgroundColor: Colors.BGWhite,\r\n    fontSize: 20,\r\n    width: \"80%\",\r\n    justifyContent: \"center\",\r\n    textAlign: \"center\",\r\n  },\r\n  linkText: { fontSize: 20, color: \"blue\", textAlign: \"center\" },\r\n  parentView: {\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n    gap: 10,\r\n    justifyContent: \"center\",\r\n  },\r\n  hintText: { fontSize: 25, textAlign: \"center\" },\r\n});\r\nexport default InputModal;\r\n","import React from \"react\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { ToastProvider } from \"react-native-toast-notifications\";\nimport { SafeAreaProvider } from \"react-native-safe-area-context\";\n\nimport SynonymScreen from \"./src/screens/synonyms/synonymScreen\";\nimport OptionsScreen from \"./src/screens/options/optionsScreen\";\nimport InputModal from \"./src/screens/inputModal\";\nimport { CreateStack } from \"./src/navigation\";\n\nconst Stack = CreateStack();\n\n//SynonymScreen component is the app's main screen\n//Navigation is used to switch to options and any popups\nexport default function App() {\n  return (\n    <SafeAreaProvider>\n      <NavigationContainer>\n        <ToastProvider placement=\"center\">\n          <Stack.Navigator>\n            <Stack.Screen\n              name=\"Synesis\"\n              component={SynonymScreen}\n              options={{ headerShown: false }}\n            />\n            <Stack.Screen name=\"Options\" component={OptionsScreen} />\n            <Stack.Group screenOptions={{ presentation: \"modal\" }}>\n              <Stack.Screen name=\"InputModal\" component={InputModal} />\n            </Stack.Group>\n          </Stack.Navigator>\n        </ToastProvider>\n      </NavigationContainer>\n    </SafeAreaProvider>\n  );\n}\n","import {\r\n  NativeStackScreenProps,\r\n  createNativeStackNavigator,\r\n} from \"@react-navigation/native-stack\";\r\n\r\nimport { OptionSectionsEnum } from \"./screens/options/optionsScreen\";\r\n\r\n//paramteres for screen navigation\r\n\r\nexport type StackParamList = {\r\n  Synesis: undefined;\r\n  Options: { unravel?: OptionSectionsEnum };\r\n  InputModal: {\r\n    eventName: string;\r\n    varName: string;\r\n    varHint: string | undefined;\r\n    varLink: string | undefined;\r\n  };\r\n};\r\nexport type SynesisProps = NativeStackScreenProps<StackParamList, \"Synesis\">;\r\nexport type OptionsProps = NativeStackScreenProps<StackParamList, \"Options\">;\r\nexport type InputModalProps = NativeStackScreenProps<\r\n  StackParamList,\r\n  \"InputModal\"\r\n>;\r\n\r\nexport function CreateStack() {\r\n  return createNativeStackNavigator<StackParamList>();\r\n}\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","var getProto = Object.getPrototypeOf ? (obj) => (Object.getPrototypeOf(obj)) : (obj) => (obj.__proto__);\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach((key) => (def[key] = () => (value[key])));\n\t}\n\tdef['default'] = () => (value);\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"/Synesis/\";","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t179: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkweb\"] = self[\"webpackChunkweb\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [569], () => (__webpack_require__(9386)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["lerpWorklet","_f","progress","start","end","_closure","asString","__workletHash","__location","_ref","animationProgress","transition","style","dataKey","registerTransitionUpdates","transitionRef","useSharedValue","useEffect","newTransition","value","staticStyle","useMemo","_objectSpread","position","animatedStyle","useAnimatedStyle","_transitionRef$value","left","bottom","width","height","backgroundColor","color","__optimalization","_jsx","Animated","Rectangle","_classCallCheck","_createClass","key","Lerp","spliceRect","rects","index","prevRect","splice","GetTransitionsKeys","result","Map","colors","forEach","rect","_colors$get","colorCount","get","set","styles","StyleSheet","view","flexDirection","DEFAULT_ANIMATION_LENGTH","colorNormal","animationLength","size","_useValueSynchronizer","keyProducer","removeFrom","missingFrom","_React$useState","React","_React$useState2","_slicedToArray","array","setArray","_React$useState3","_React$useState4","keys","setKeys","callbacks","registerCallback","callback","current","_","has","delete","arrayOrCallback","previous","newArray","newKeys","_callbacks$current$ge","useValueSynchronizer","setTransitions","transitions","restartAnimation","useCallback","duration","isNaN","withTiming","IsValid","_AlignRectangles","_start$","_end$","Array","from","startLength","length","endLength","defHeight","i","Math","max","_start$i","_end$i","_start$i2","_end","_end$i2","_start","AlignRectangles","map","_ref2","rect1","rect2","filter","ToGradient","ToRectangle","_AlignRectangles2","newStart","newTarget","newTransitions","View","children","id","AnimatedRect","getFreeColor","takenColors","Set","floor","random","DisabledGrey","BGWhite","CountourColor","SynonymWord","memo","word","onPress","propStyle","fontSize","viewOpacity","toValue","useNativeDriver","_colorNormal$getDomin","_ref2$zIndex","zIndex","chart","container","getDominantColor","margin","marginHorizontal","_useState","useState","_useState2","layoutSize","setLayoutSize","opacity","Pressable","android_ripple","Colors","foreground","_ref4","pressed","Platform","_jsxs","onLayout","_ref3","nativeEvent","layout","undefined","ColorChart","Text","EventsEnum","Storage","_GetString","_asyncToGenerator","storageString","AsyncStorage","_x","apply","arguments","_SetString","_x2","_x3","StringTypesEnum","defaultFadeCeiling","defaultFadeFloor","defaultDuration","imageBackground","faded","source","fadeFloor","fadeCeiling","animatiedOpacity","ImageBackground","resizeMode","WordNormal","_Array","_inherits","_super","_createSuper","call","copy","_toConsumableArray","_wrapNativeSuper","SynonymCloud","name","connections","connectionSum","order","strength","this","nullCache","existingDimensions","push","normalCache","wordMapCache","sum","normal","connectionWeights","quantities","weights","unitWeight","totalWeight","currentQ","columnWeight","ceil","val","CalculateWeights","mentions","parseFloat","toFixed","buildWordNormal","Copy","_this","GetWordNormal","clouds","sort","a","b","GetWordMap","Gradient","_len","items","_key","concat","colorSection","ColorNormal","wordNormal","colorMap","validated","wordColor","ln","sections","pair","_construct","backgroundColorValue","ibackground","useClouds","synonyms","sortBy","limit","allClouds","collections","allKeywords","synonymCollection","Word","getCloud","cloud","addConnectionToSet","keyWord","setWord","includes","addConnection","collection","definition","definitionSets","synonymSet","synonymList2","CrossReference","sortedClouds","newSorted","GetSorted","values","slice","Infinity","staggetTimer","renderedClouds","setRenderedClouds","clearInterval","moveNextClouds","previousClouds","final","changesPerCycle","entries","_ref3$","MoveElements","ELEMENTS_PER_RENDER","previousTimer","setInterval","TIME_INTERVAL","allElements","element","CopyExisting","previousNormals","colorNormals","newNormals","newColorMap","oldNormals","oldNormal","newNormal","isEqualTo","rebuildNormals","displayInfo","totalCount","renderedCount","IS_ON_MOBILE","FONT_SIZE","DEFAULT_CLOUD_LIMIT","BACKGROUND_IMAGE","require","innerView","flex","alignContent","justifyContent","flexWrap","gap","synonymScrollContainer","marginBottom","tooltip","alignItems","paddingHorizontal","tooltipBackground","borderWidth","borderRadius","tooltipText","Transition","durationMs","_style$zIndex","wordToSortBy","addNewWord","isOnWeb","cloudLimit","setCloudLimit","loadCloudLimit","GetString","CloudCount","then","loaded","parseInt","subscription","DeviceEventEmitter","CloudCountChanged","remove","_useClouds","transitionViewRef","useRef","_transitionViewRef$cu","animateNextTransition","cloudComponents","BackgroundImage","ScrollView","keyboardShouldPersistTaps","contentContainerStyle","Transitioning","ref","pointerEvents","APIErrorEnum","Dictionary","urlGetter","parse","normalize","fetch","fetchResponse","response","catch","type","errorMessage","Network","DictionaryType","DictionaryKeyRequirement","_DictionaryKeyRequire","_defineProperty","Self","Meriam","BigHugeThesarus","Datamuse","DictionaryRegistrationLinks","_DictionaryRegistrati","DictionaryName","_DictionaryName","BuildDatamuse","DatamuseParse","replace","_DatamuseParse","_parsed$","ok","Error","status","text","parsed","JSON","NoWord","data","error","message","MeriamParse","_MeriamParse","targetWord","WrongAPIkey","meta","definitionJSON","syns","synonymList","Keys","keyType","varName","secureKeyName","SetString","SecureStore","setItemAsync","_Get","getItemAsync","allowedTypes","BHLParse","_BHLParse","wordType","relType","add","_GetCurrentDictionary","apiKey","apiType","LoadCurrentDictionaryType","Get","buildDefaultDictionary","BuildBHL","apiNameKey","_LoadCurrentDictionaryType","SaveCurrentDictionaryType","_SaveCurrentDictionaryType","promises","Promise","all","SynonymCollection","isEmpty","wasFetched","trim","toLowerCase","NormalizeWord","_Load","dictionary","GetSynonyms","defaultCountour","defaultBackground","defaultDisabled","defaultSize","inputButton","disabled","bgColor","counterColor","disabledCountourColor","countourColor","TouchableOpacity","borderColor","MaterialIcons","marginVertical","listContainer","inputHolder","inputText","textAlign","inputContainer","paddingVertical","wordList","alignSelf","highlightedWord","materialButtonStyle","onWordPress","onWordLongPress","onClearButton","onOptions","onAddWord","isOnMobile","transitionReference","synonymComponents","IsEmpty","WasFetched","getWordStyle","onLongPress","Haptics","selectionAsync","setInputText","onSubmitEditing","newText","MaterialButton","TextInput","autoFocus","blurOnSubmit","onChangeText","event","hintText","connectionIndicator","right","top","controlView","navigation","setDictionary","loadDictionaryFromMemory","GetCurrentDictionary","newDictionary","ApiChanged","setHighlightedWord","_useSynonyms","onRemove","setSynonyms","toast","useToast","addWord","newSynonym","EMPTY","HAS_WORD_ALREADY","findIndex","definiton","Load","show","removeWord","removedWord","previousSynonyms","clearWords","useSynonyms","screenFocused","synnonymCount","shownHintID","setShownHintID","loadHints","WasLaunched","HintsReset","hide","useHints","useIsFocused","colorRef","deps","newVal","useCachedMemo","oldMap","newColormap","wordsBeingFetched","find","synonym","SafeAreaView","StatusBar","SynonymList","ActivityIndicator","animating","ControlPanelView","navigate","touchable","padding","title","state","onValueChange","Switch","currentDictionaryType","setCurrentDictionaryType","apiTogglesData","Object","dictionaryType","ApiKeyEntered","params","varValue","TitledToggle","enabled","varHint","varLink","eventName","onTogglePress","isInfinite","tileValues","uimax","step","min","default","_objectDestructuringEmpty","tileCount","setTileCount","stringValue","numberValue","count","stringToTilecount","Slider","minimumValue","maximumValue","toString","minimumTrackTintColor","maximumTrackTintColor","content","header","linkText","resetHints","marginLeft","fontWeight","ABOUT_LINK","OptionSectionsEnum","_accordionContents","_route$params","route","accordionContents","Display","CloudCountSwitch","API","ApiSwitch","About","Linking","Hints","activeSessions","setActiveSessions","unravel","propIndex","indexOf","Accordion","underlayColor","activeSections","renderHeader","isActive","renderContent","onChange","buttonView","buttons","input","parentView","submitValue","goBack","Stack","createNativeStackNavigator","App","SafeAreaProvider","NavigationContainer","ToastProvider","placement","Navigator","Screen","component","SynonymScreen","options","headerShown","OptionsScreen","Group","screenOptions","presentation","InputModal","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","deferred","O","chunkIds","fn","priority","notFulfilled","fulfilled","j","every","r","n","getter","__esModule","d","leafPrototypes","getProto","getPrototypeOf","obj","t","mode","ns","create","def","getOwnPropertyNames","o","defineProperty","enumerable","g","globalThis","Function","e","window","prop","prototype","hasOwnProperty","Symbol","toStringTag","nmd","paths","p","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}